/*
ConductorOne API

The ConductorOne API is a HTTP API for managing ConductorOne resources.

API version: 0.1.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c1api

import (
	"encoding/json"
)

// checks if the C1ApiAppV1GetAppUsageControlsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &C1ApiAppV1GetAppUsageControlsResponse{}

// C1ApiAppV1GetAppUsageControlsResponse The GetAppUsageControlsResponse message.
type C1ApiAppV1GetAppUsageControlsResponse struct {
	AppUsageControls *C1ApiAppV1AppUsageControls `json:"appUsageControls,omitempty"`
	// The hasUsageData field.
	HasUsageData *bool `json:"hasUsageData,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _C1ApiAppV1GetAppUsageControlsResponse C1ApiAppV1GetAppUsageControlsResponse

// NewC1ApiAppV1GetAppUsageControlsResponse instantiates a new C1ApiAppV1GetAppUsageControlsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewC1ApiAppV1GetAppUsageControlsResponse() *C1ApiAppV1GetAppUsageControlsResponse {
	this := C1ApiAppV1GetAppUsageControlsResponse{}
	return &this
}

// NewC1ApiAppV1GetAppUsageControlsResponseWithDefaults instantiates a new C1ApiAppV1GetAppUsageControlsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewC1ApiAppV1GetAppUsageControlsResponseWithDefaults() *C1ApiAppV1GetAppUsageControlsResponse {
	this := C1ApiAppV1GetAppUsageControlsResponse{}
	return &this
}

// GetAppUsageControls returns the AppUsageControls field value if set, zero value otherwise.
func (o *C1ApiAppV1GetAppUsageControlsResponse) GetAppUsageControls() C1ApiAppV1AppUsageControls {
	if o == nil || IsNil(o.AppUsageControls) {
		var ret C1ApiAppV1AppUsageControls
		return ret
	}
	return *o.AppUsageControls
}

// GetAppUsageControlsOk returns a tuple with the AppUsageControls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiAppV1GetAppUsageControlsResponse) GetAppUsageControlsOk() (*C1ApiAppV1AppUsageControls, bool) {
	if o == nil || IsNil(o.AppUsageControls) {
		return nil, false
	}
	return o.AppUsageControls, true
}

// HasAppUsageControls returns a boolean if a field has been set.
func (o *C1ApiAppV1GetAppUsageControlsResponse) HasAppUsageControls() bool {
	if o != nil && !IsNil(o.AppUsageControls) {
		return true
	}

	return false
}

// SetAppUsageControls gets a reference to the given C1ApiAppV1AppUsageControls and assigns it to the AppUsageControls field.
func (o *C1ApiAppV1GetAppUsageControlsResponse) SetAppUsageControls(v C1ApiAppV1AppUsageControls) {
	o.AppUsageControls = &v
}

// GetHasUsageData returns the HasUsageData field value if set, zero value otherwise.
func (o *C1ApiAppV1GetAppUsageControlsResponse) GetHasUsageData() bool {
	if o == nil || IsNil(o.HasUsageData) {
		var ret bool
		return ret
	}
	return *o.HasUsageData
}

// GetHasUsageDataOk returns a tuple with the HasUsageData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiAppV1GetAppUsageControlsResponse) GetHasUsageDataOk() (*bool, bool) {
	if o == nil || IsNil(o.HasUsageData) {
		return nil, false
	}
	return o.HasUsageData, true
}

// HasHasUsageData returns a boolean if a field has been set.
func (o *C1ApiAppV1GetAppUsageControlsResponse) HasHasUsageData() bool {
	if o != nil && !IsNil(o.HasUsageData) {
		return true
	}

	return false
}

// SetHasUsageData gets a reference to the given bool and assigns it to the HasUsageData field.
func (o *C1ApiAppV1GetAppUsageControlsResponse) SetHasUsageData(v bool) {
	o.HasUsageData = &v
}

func (o C1ApiAppV1GetAppUsageControlsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o C1ApiAppV1GetAppUsageControlsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AppUsageControls) {
		toSerialize["appUsageControls"] = o.AppUsageControls
	}
	if !IsNil(o.HasUsageData) {
		toSerialize["hasUsageData"] = o.HasUsageData
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *C1ApiAppV1GetAppUsageControlsResponse) UnmarshalJSON(bytes []byte) (err error) {
	varC1ApiAppV1GetAppUsageControlsResponse := _C1ApiAppV1GetAppUsageControlsResponse{}

	if err = json.Unmarshal(bytes, &varC1ApiAppV1GetAppUsageControlsResponse); err == nil {
		*o = C1ApiAppV1GetAppUsageControlsResponse(varC1ApiAppV1GetAppUsageControlsResponse)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "appUsageControls")
		delete(additionalProperties, "hasUsageData")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableC1ApiAppV1GetAppUsageControlsResponse struct {
	value *C1ApiAppV1GetAppUsageControlsResponse
	isSet bool
}

func (v NullableC1ApiAppV1GetAppUsageControlsResponse) Get() *C1ApiAppV1GetAppUsageControlsResponse {
	return v.value
}

func (v *NullableC1ApiAppV1GetAppUsageControlsResponse) Set(val *C1ApiAppV1GetAppUsageControlsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableC1ApiAppV1GetAppUsageControlsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableC1ApiAppV1GetAppUsageControlsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableC1ApiAppV1GetAppUsageControlsResponse(val *C1ApiAppV1GetAppUsageControlsResponse) *NullableC1ApiAppV1GetAppUsageControlsResponse {
	return &NullableC1ApiAppV1GetAppUsageControlsResponse{value: val, isSet: true}
}

func (v NullableC1ApiAppV1GetAppUsageControlsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableC1ApiAppV1GetAppUsageControlsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


