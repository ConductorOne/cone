/*
ConductorOne API

The ConductorOne API is a HTTP API for managing ConductorOne resources.

API version: 0.1.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c1api

import (
	"encoding/json"
)

// checks if the C1ApiTaskV1TaskRevokeSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &C1ApiTaskV1TaskRevokeSource{}

// C1ApiTaskV1TaskRevokeSource The TaskRevokeSource message.  This message contains a oneof named origin. Only a single field of the following list may be set at a time:   - review   - request   - expired   - nonUsage 
type C1ApiTaskV1TaskRevokeSource struct {
	Expired NullableC1ApiTaskV1TaskRevokeSourceExpired `json:"expired,omitempty"`
	NonUsage NullableC1ApiTaskV1TaskRevokeSourceNonUsage `json:"nonUsage,omitempty"`
	Request NullableC1ApiTaskV1TaskRevokeSourceRequest `json:"request,omitempty"`
	Review NullableC1ApiTaskV1TaskRevokeSourceReview `json:"review,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _C1ApiTaskV1TaskRevokeSource C1ApiTaskV1TaskRevokeSource

// NewC1ApiTaskV1TaskRevokeSource instantiates a new C1ApiTaskV1TaskRevokeSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewC1ApiTaskV1TaskRevokeSource() *C1ApiTaskV1TaskRevokeSource {
	this := C1ApiTaskV1TaskRevokeSource{}
	return &this
}

// NewC1ApiTaskV1TaskRevokeSourceWithDefaults instantiates a new C1ApiTaskV1TaskRevokeSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewC1ApiTaskV1TaskRevokeSourceWithDefaults() *C1ApiTaskV1TaskRevokeSource {
	this := C1ApiTaskV1TaskRevokeSource{}
	return &this
}

// GetExpired returns the Expired field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiTaskV1TaskRevokeSource) GetExpired() C1ApiTaskV1TaskRevokeSourceExpired {
	if o == nil || IsNil(o.Expired.Get()) {
		var ret C1ApiTaskV1TaskRevokeSourceExpired
		return ret
	}
	return *o.Expired.Get()
}

// GetExpiredOk returns a tuple with the Expired field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiTaskV1TaskRevokeSource) GetExpiredOk() (*C1ApiTaskV1TaskRevokeSourceExpired, bool) {
	if o == nil {
		return nil, false
	}
	return o.Expired.Get(), o.Expired.IsSet()
}

// HasExpired returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskRevokeSource) HasExpired() bool {
	if o != nil && o.Expired.IsSet() {
		return true
	}

	return false
}

// SetExpired gets a reference to the given NullableC1ApiTaskV1TaskRevokeSourceExpired and assigns it to the Expired field.
func (o *C1ApiTaskV1TaskRevokeSource) SetExpired(v C1ApiTaskV1TaskRevokeSourceExpired) {
	o.Expired.Set(&v)
}
// SetExpiredNil sets the value for Expired to be an explicit nil
func (o *C1ApiTaskV1TaskRevokeSource) SetExpiredNil() {
	o.Expired.Set(nil)
}

// UnsetExpired ensures that no value is present for Expired, not even an explicit nil
func (o *C1ApiTaskV1TaskRevokeSource) UnsetExpired() {
	o.Expired.Unset()
}

// GetNonUsage returns the NonUsage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiTaskV1TaskRevokeSource) GetNonUsage() C1ApiTaskV1TaskRevokeSourceNonUsage {
	if o == nil || IsNil(o.NonUsage.Get()) {
		var ret C1ApiTaskV1TaskRevokeSourceNonUsage
		return ret
	}
	return *o.NonUsage.Get()
}

// GetNonUsageOk returns a tuple with the NonUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiTaskV1TaskRevokeSource) GetNonUsageOk() (*C1ApiTaskV1TaskRevokeSourceNonUsage, bool) {
	if o == nil {
		return nil, false
	}
	return o.NonUsage.Get(), o.NonUsage.IsSet()
}

// HasNonUsage returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskRevokeSource) HasNonUsage() bool {
	if o != nil && o.NonUsage.IsSet() {
		return true
	}

	return false
}

// SetNonUsage gets a reference to the given NullableC1ApiTaskV1TaskRevokeSourceNonUsage and assigns it to the NonUsage field.
func (o *C1ApiTaskV1TaskRevokeSource) SetNonUsage(v C1ApiTaskV1TaskRevokeSourceNonUsage) {
	o.NonUsage.Set(&v)
}
// SetNonUsageNil sets the value for NonUsage to be an explicit nil
func (o *C1ApiTaskV1TaskRevokeSource) SetNonUsageNil() {
	o.NonUsage.Set(nil)
}

// UnsetNonUsage ensures that no value is present for NonUsage, not even an explicit nil
func (o *C1ApiTaskV1TaskRevokeSource) UnsetNonUsage() {
	o.NonUsage.Unset()
}

// GetRequest returns the Request field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiTaskV1TaskRevokeSource) GetRequest() C1ApiTaskV1TaskRevokeSourceRequest {
	if o == nil || IsNil(o.Request.Get()) {
		var ret C1ApiTaskV1TaskRevokeSourceRequest
		return ret
	}
	return *o.Request.Get()
}

// GetRequestOk returns a tuple with the Request field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiTaskV1TaskRevokeSource) GetRequestOk() (*C1ApiTaskV1TaskRevokeSourceRequest, bool) {
	if o == nil {
		return nil, false
	}
	return o.Request.Get(), o.Request.IsSet()
}

// HasRequest returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskRevokeSource) HasRequest() bool {
	if o != nil && o.Request.IsSet() {
		return true
	}

	return false
}

// SetRequest gets a reference to the given NullableC1ApiTaskV1TaskRevokeSourceRequest and assigns it to the Request field.
func (o *C1ApiTaskV1TaskRevokeSource) SetRequest(v C1ApiTaskV1TaskRevokeSourceRequest) {
	o.Request.Set(&v)
}
// SetRequestNil sets the value for Request to be an explicit nil
func (o *C1ApiTaskV1TaskRevokeSource) SetRequestNil() {
	o.Request.Set(nil)
}

// UnsetRequest ensures that no value is present for Request, not even an explicit nil
func (o *C1ApiTaskV1TaskRevokeSource) UnsetRequest() {
	o.Request.Unset()
}

// GetReview returns the Review field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiTaskV1TaskRevokeSource) GetReview() C1ApiTaskV1TaskRevokeSourceReview {
	if o == nil || IsNil(o.Review.Get()) {
		var ret C1ApiTaskV1TaskRevokeSourceReview
		return ret
	}
	return *o.Review.Get()
}

// GetReviewOk returns a tuple with the Review field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiTaskV1TaskRevokeSource) GetReviewOk() (*C1ApiTaskV1TaskRevokeSourceReview, bool) {
	if o == nil {
		return nil, false
	}
	return o.Review.Get(), o.Review.IsSet()
}

// HasReview returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskRevokeSource) HasReview() bool {
	if o != nil && o.Review.IsSet() {
		return true
	}

	return false
}

// SetReview gets a reference to the given NullableC1ApiTaskV1TaskRevokeSourceReview and assigns it to the Review field.
func (o *C1ApiTaskV1TaskRevokeSource) SetReview(v C1ApiTaskV1TaskRevokeSourceReview) {
	o.Review.Set(&v)
}
// SetReviewNil sets the value for Review to be an explicit nil
func (o *C1ApiTaskV1TaskRevokeSource) SetReviewNil() {
	o.Review.Set(nil)
}

// UnsetReview ensures that no value is present for Review, not even an explicit nil
func (o *C1ApiTaskV1TaskRevokeSource) UnsetReview() {
	o.Review.Unset()
}

func (o C1ApiTaskV1TaskRevokeSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o C1ApiTaskV1TaskRevokeSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Expired.IsSet() {
		toSerialize["expired"] = o.Expired.Get()
	}
	if o.NonUsage.IsSet() {
		toSerialize["nonUsage"] = o.NonUsage.Get()
	}
	if o.Request.IsSet() {
		toSerialize["request"] = o.Request.Get()
	}
	if o.Review.IsSet() {
		toSerialize["review"] = o.Review.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *C1ApiTaskV1TaskRevokeSource) UnmarshalJSON(bytes []byte) (err error) {
	varC1ApiTaskV1TaskRevokeSource := _C1ApiTaskV1TaskRevokeSource{}

	if err = json.Unmarshal(bytes, &varC1ApiTaskV1TaskRevokeSource); err == nil {
		*o = C1ApiTaskV1TaskRevokeSource(varC1ApiTaskV1TaskRevokeSource)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "expired")
		delete(additionalProperties, "nonUsage")
		delete(additionalProperties, "request")
		delete(additionalProperties, "review")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableC1ApiTaskV1TaskRevokeSource struct {
	value *C1ApiTaskV1TaskRevokeSource
	isSet bool
}

func (v NullableC1ApiTaskV1TaskRevokeSource) Get() *C1ApiTaskV1TaskRevokeSource {
	return v.value
}

func (v *NullableC1ApiTaskV1TaskRevokeSource) Set(val *C1ApiTaskV1TaskRevokeSource) {
	v.value = val
	v.isSet = true
}

func (v NullableC1ApiTaskV1TaskRevokeSource) IsSet() bool {
	return v.isSet
}

func (v *NullableC1ApiTaskV1TaskRevokeSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableC1ApiTaskV1TaskRevokeSource(val *C1ApiTaskV1TaskRevokeSource) *NullableC1ApiTaskV1TaskRevokeSource {
	return &NullableC1ApiTaskV1TaskRevokeSource{value: val, isSet: true}
}

func (v NullableC1ApiTaskV1TaskRevokeSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableC1ApiTaskV1TaskRevokeSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


