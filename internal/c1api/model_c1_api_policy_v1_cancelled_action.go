/*
ConductorOne API

The ConductorOne API is a HTTP API for managing ConductorOne resources.

API version: 0.1.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c1api

import (
	"encoding/json"
	"time"
)

// checks if the C1ApiPolicyV1CancelledAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &C1ApiPolicyV1CancelledAction{}

// C1ApiPolicyV1CancelledAction The CancelledAction message.
type C1ApiPolicyV1CancelledAction struct {
	CancelledAt *time.Time `json:"cancelledAt,omitempty"`
	// The cancelledByUserId field.
	CancelledByUserId *string `json:"cancelledByUserId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _C1ApiPolicyV1CancelledAction C1ApiPolicyV1CancelledAction

// NewC1ApiPolicyV1CancelledAction instantiates a new C1ApiPolicyV1CancelledAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewC1ApiPolicyV1CancelledAction() *C1ApiPolicyV1CancelledAction {
	this := C1ApiPolicyV1CancelledAction{}
	return &this
}

// NewC1ApiPolicyV1CancelledActionWithDefaults instantiates a new C1ApiPolicyV1CancelledAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewC1ApiPolicyV1CancelledActionWithDefaults() *C1ApiPolicyV1CancelledAction {
	this := C1ApiPolicyV1CancelledAction{}
	return &this
}

// GetCancelledAt returns the CancelledAt field value if set, zero value otherwise.
func (o *C1ApiPolicyV1CancelledAction) GetCancelledAt() time.Time {
	if o == nil || IsNil(o.CancelledAt) {
		var ret time.Time
		return ret
	}
	return *o.CancelledAt
}

// GetCancelledAtOk returns a tuple with the CancelledAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiPolicyV1CancelledAction) GetCancelledAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CancelledAt) {
		return nil, false
	}
	return o.CancelledAt, true
}

// HasCancelledAt returns a boolean if a field has been set.
func (o *C1ApiPolicyV1CancelledAction) HasCancelledAt() bool {
	if o != nil && !IsNil(o.CancelledAt) {
		return true
	}

	return false
}

// SetCancelledAt gets a reference to the given time.Time and assigns it to the CancelledAt field.
func (o *C1ApiPolicyV1CancelledAction) SetCancelledAt(v time.Time) {
	o.CancelledAt = &v
}

// GetCancelledByUserId returns the CancelledByUserId field value if set, zero value otherwise.
func (o *C1ApiPolicyV1CancelledAction) GetCancelledByUserId() string {
	if o == nil || IsNil(o.CancelledByUserId) {
		var ret string
		return ret
	}
	return *o.CancelledByUserId
}

// GetCancelledByUserIdOk returns a tuple with the CancelledByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiPolicyV1CancelledAction) GetCancelledByUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.CancelledByUserId) {
		return nil, false
	}
	return o.CancelledByUserId, true
}

// HasCancelledByUserId returns a boolean if a field has been set.
func (o *C1ApiPolicyV1CancelledAction) HasCancelledByUserId() bool {
	if o != nil && !IsNil(o.CancelledByUserId) {
		return true
	}

	return false
}

// SetCancelledByUserId gets a reference to the given string and assigns it to the CancelledByUserId field.
func (o *C1ApiPolicyV1CancelledAction) SetCancelledByUserId(v string) {
	o.CancelledByUserId = &v
}

func (o C1ApiPolicyV1CancelledAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o C1ApiPolicyV1CancelledAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CancelledAt) {
		toSerialize["cancelledAt"] = o.CancelledAt
	}
	if !IsNil(o.CancelledByUserId) {
		toSerialize["cancelledByUserId"] = o.CancelledByUserId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *C1ApiPolicyV1CancelledAction) UnmarshalJSON(bytes []byte) (err error) {
	varC1ApiPolicyV1CancelledAction := _C1ApiPolicyV1CancelledAction{}

	if err = json.Unmarshal(bytes, &varC1ApiPolicyV1CancelledAction); err == nil {
		*o = C1ApiPolicyV1CancelledAction(varC1ApiPolicyV1CancelledAction)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "cancelledAt")
		delete(additionalProperties, "cancelledByUserId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableC1ApiPolicyV1CancelledAction struct {
	value *C1ApiPolicyV1CancelledAction
	isSet bool
}

func (v NullableC1ApiPolicyV1CancelledAction) Get() *C1ApiPolicyV1CancelledAction {
	return v.value
}

func (v *NullableC1ApiPolicyV1CancelledAction) Set(val *C1ApiPolicyV1CancelledAction) {
	v.value = val
	v.isSet = true
}

func (v NullableC1ApiPolicyV1CancelledAction) IsSet() bool {
	return v.isSet
}

func (v *NullableC1ApiPolicyV1CancelledAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableC1ApiPolicyV1CancelledAction(val *C1ApiPolicyV1CancelledAction) *NullableC1ApiPolicyV1CancelledAction {
	return &NullableC1ApiPolicyV1CancelledAction{value: val, isSet: true}
}

func (v NullableC1ApiPolicyV1CancelledAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableC1ApiPolicyV1CancelledAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


