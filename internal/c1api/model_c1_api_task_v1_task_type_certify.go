/*
ConductorOne API

The ConductorOne API is a HTTP API for managing ConductorOne resources.

API version: 0.1.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c1api

import (
	"encoding/json"
	"time"
)

// checks if the C1ApiTaskV1TaskTypeCertify type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &C1ApiTaskV1TaskTypeCertify{}

// C1ApiTaskV1TaskTypeCertify The TaskTypeCertify message.
type C1ApiTaskV1TaskTypeCertify struct {
	// The accessReviewId field.
	AccessReviewId *string `json:"accessReviewId,omitempty"`
	// The accessReviewSelection field.
	AccessReviewSelection *string `json:"accessReviewSelection,omitempty"`
	// The appEntitlementIds field.
	AppEntitlementIds []string `json:"appEntitlementIds,omitempty"`
	// The appId field.
	AppId *string `json:"appId,omitempty"`
	// The appUserId field.
	AppUserId *string `json:"appUserId,omitempty"`
	// The identityUserId field.
	IdentityUserId *string `json:"identityUserId,omitempty"`
	// The outcome field.
	Outcome *string `json:"outcome,omitempty"`
	OutcomeTime *time.Time `json:"outcomeTime,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _C1ApiTaskV1TaskTypeCertify C1ApiTaskV1TaskTypeCertify

// NewC1ApiTaskV1TaskTypeCertify instantiates a new C1ApiTaskV1TaskTypeCertify object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewC1ApiTaskV1TaskTypeCertify() *C1ApiTaskV1TaskTypeCertify {
	this := C1ApiTaskV1TaskTypeCertify{}
	return &this
}

// NewC1ApiTaskV1TaskTypeCertifyWithDefaults instantiates a new C1ApiTaskV1TaskTypeCertify object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewC1ApiTaskV1TaskTypeCertifyWithDefaults() *C1ApiTaskV1TaskTypeCertify {
	this := C1ApiTaskV1TaskTypeCertify{}
	return &this
}

// GetAccessReviewId returns the AccessReviewId field value if set, zero value otherwise.
func (o *C1ApiTaskV1TaskTypeCertify) GetAccessReviewId() string {
	if o == nil || IsNil(o.AccessReviewId) {
		var ret string
		return ret
	}
	return *o.AccessReviewId
}

// GetAccessReviewIdOk returns a tuple with the AccessReviewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1TaskTypeCertify) GetAccessReviewIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccessReviewId) {
		return nil, false
	}
	return o.AccessReviewId, true
}

// HasAccessReviewId returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskTypeCertify) HasAccessReviewId() bool {
	if o != nil && !IsNil(o.AccessReviewId) {
		return true
	}

	return false
}

// SetAccessReviewId gets a reference to the given string and assigns it to the AccessReviewId field.
func (o *C1ApiTaskV1TaskTypeCertify) SetAccessReviewId(v string) {
	o.AccessReviewId = &v
}

// GetAccessReviewSelection returns the AccessReviewSelection field value if set, zero value otherwise.
func (o *C1ApiTaskV1TaskTypeCertify) GetAccessReviewSelection() string {
	if o == nil || IsNil(o.AccessReviewSelection) {
		var ret string
		return ret
	}
	return *o.AccessReviewSelection
}

// GetAccessReviewSelectionOk returns a tuple with the AccessReviewSelection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1TaskTypeCertify) GetAccessReviewSelectionOk() (*string, bool) {
	if o == nil || IsNil(o.AccessReviewSelection) {
		return nil, false
	}
	return o.AccessReviewSelection, true
}

// HasAccessReviewSelection returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskTypeCertify) HasAccessReviewSelection() bool {
	if o != nil && !IsNil(o.AccessReviewSelection) {
		return true
	}

	return false
}

// SetAccessReviewSelection gets a reference to the given string and assigns it to the AccessReviewSelection field.
func (o *C1ApiTaskV1TaskTypeCertify) SetAccessReviewSelection(v string) {
	o.AccessReviewSelection = &v
}

// GetAppEntitlementIds returns the AppEntitlementIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiTaskV1TaskTypeCertify) GetAppEntitlementIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.AppEntitlementIds
}

// GetAppEntitlementIdsOk returns a tuple with the AppEntitlementIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiTaskV1TaskTypeCertify) GetAppEntitlementIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.AppEntitlementIds) {
		return nil, false
	}
	return o.AppEntitlementIds, true
}

// HasAppEntitlementIds returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskTypeCertify) HasAppEntitlementIds() bool {
	if o != nil && IsNil(o.AppEntitlementIds) {
		return true
	}

	return false
}

// SetAppEntitlementIds gets a reference to the given []string and assigns it to the AppEntitlementIds field.
func (o *C1ApiTaskV1TaskTypeCertify) SetAppEntitlementIds(v []string) {
	o.AppEntitlementIds = v
}

// GetAppId returns the AppId field value if set, zero value otherwise.
func (o *C1ApiTaskV1TaskTypeCertify) GetAppId() string {
	if o == nil || IsNil(o.AppId) {
		var ret string
		return ret
	}
	return *o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1TaskTypeCertify) GetAppIdOk() (*string, bool) {
	if o == nil || IsNil(o.AppId) {
		return nil, false
	}
	return o.AppId, true
}

// HasAppId returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskTypeCertify) HasAppId() bool {
	if o != nil && !IsNil(o.AppId) {
		return true
	}

	return false
}

// SetAppId gets a reference to the given string and assigns it to the AppId field.
func (o *C1ApiTaskV1TaskTypeCertify) SetAppId(v string) {
	o.AppId = &v
}

// GetAppUserId returns the AppUserId field value if set, zero value otherwise.
func (o *C1ApiTaskV1TaskTypeCertify) GetAppUserId() string {
	if o == nil || IsNil(o.AppUserId) {
		var ret string
		return ret
	}
	return *o.AppUserId
}

// GetAppUserIdOk returns a tuple with the AppUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1TaskTypeCertify) GetAppUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.AppUserId) {
		return nil, false
	}
	return o.AppUserId, true
}

// HasAppUserId returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskTypeCertify) HasAppUserId() bool {
	if o != nil && !IsNil(o.AppUserId) {
		return true
	}

	return false
}

// SetAppUserId gets a reference to the given string and assigns it to the AppUserId field.
func (o *C1ApiTaskV1TaskTypeCertify) SetAppUserId(v string) {
	o.AppUserId = &v
}

// GetIdentityUserId returns the IdentityUserId field value if set, zero value otherwise.
func (o *C1ApiTaskV1TaskTypeCertify) GetIdentityUserId() string {
	if o == nil || IsNil(o.IdentityUserId) {
		var ret string
		return ret
	}
	return *o.IdentityUserId
}

// GetIdentityUserIdOk returns a tuple with the IdentityUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1TaskTypeCertify) GetIdentityUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.IdentityUserId) {
		return nil, false
	}
	return o.IdentityUserId, true
}

// HasIdentityUserId returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskTypeCertify) HasIdentityUserId() bool {
	if o != nil && !IsNil(o.IdentityUserId) {
		return true
	}

	return false
}

// SetIdentityUserId gets a reference to the given string and assigns it to the IdentityUserId field.
func (o *C1ApiTaskV1TaskTypeCertify) SetIdentityUserId(v string) {
	o.IdentityUserId = &v
}

// GetOutcome returns the Outcome field value if set, zero value otherwise.
func (o *C1ApiTaskV1TaskTypeCertify) GetOutcome() string {
	if o == nil || IsNil(o.Outcome) {
		var ret string
		return ret
	}
	return *o.Outcome
}

// GetOutcomeOk returns a tuple with the Outcome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1TaskTypeCertify) GetOutcomeOk() (*string, bool) {
	if o == nil || IsNil(o.Outcome) {
		return nil, false
	}
	return o.Outcome, true
}

// HasOutcome returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskTypeCertify) HasOutcome() bool {
	if o != nil && !IsNil(o.Outcome) {
		return true
	}

	return false
}

// SetOutcome gets a reference to the given string and assigns it to the Outcome field.
func (o *C1ApiTaskV1TaskTypeCertify) SetOutcome(v string) {
	o.Outcome = &v
}

// GetOutcomeTime returns the OutcomeTime field value if set, zero value otherwise.
func (o *C1ApiTaskV1TaskTypeCertify) GetOutcomeTime() time.Time {
	if o == nil || IsNil(o.OutcomeTime) {
		var ret time.Time
		return ret
	}
	return *o.OutcomeTime
}

// GetOutcomeTimeOk returns a tuple with the OutcomeTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1TaskTypeCertify) GetOutcomeTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.OutcomeTime) {
		return nil, false
	}
	return o.OutcomeTime, true
}

// HasOutcomeTime returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskTypeCertify) HasOutcomeTime() bool {
	if o != nil && !IsNil(o.OutcomeTime) {
		return true
	}

	return false
}

// SetOutcomeTime gets a reference to the given time.Time and assigns it to the OutcomeTime field.
func (o *C1ApiTaskV1TaskTypeCertify) SetOutcomeTime(v time.Time) {
	o.OutcomeTime = &v
}

func (o C1ApiTaskV1TaskTypeCertify) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o C1ApiTaskV1TaskTypeCertify) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessReviewId) {
		toSerialize["accessReviewId"] = o.AccessReviewId
	}
	if !IsNil(o.AccessReviewSelection) {
		toSerialize["accessReviewSelection"] = o.AccessReviewSelection
	}
	if o.AppEntitlementIds != nil {
		toSerialize["appEntitlementIds"] = o.AppEntitlementIds
	}
	if !IsNil(o.AppId) {
		toSerialize["appId"] = o.AppId
	}
	if !IsNil(o.AppUserId) {
		toSerialize["appUserId"] = o.AppUserId
	}
	if !IsNil(o.IdentityUserId) {
		toSerialize["identityUserId"] = o.IdentityUserId
	}
	if !IsNil(o.Outcome) {
		toSerialize["outcome"] = o.Outcome
	}
	if !IsNil(o.OutcomeTime) {
		toSerialize["outcomeTime"] = o.OutcomeTime
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *C1ApiTaskV1TaskTypeCertify) UnmarshalJSON(bytes []byte) (err error) {
	varC1ApiTaskV1TaskTypeCertify := _C1ApiTaskV1TaskTypeCertify{}

	if err = json.Unmarshal(bytes, &varC1ApiTaskV1TaskTypeCertify); err == nil {
		*o = C1ApiTaskV1TaskTypeCertify(varC1ApiTaskV1TaskTypeCertify)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "accessReviewId")
		delete(additionalProperties, "accessReviewSelection")
		delete(additionalProperties, "appEntitlementIds")
		delete(additionalProperties, "appId")
		delete(additionalProperties, "appUserId")
		delete(additionalProperties, "identityUserId")
		delete(additionalProperties, "outcome")
		delete(additionalProperties, "outcomeTime")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableC1ApiTaskV1TaskTypeCertify struct {
	value *C1ApiTaskV1TaskTypeCertify
	isSet bool
}

func (v NullableC1ApiTaskV1TaskTypeCertify) Get() *C1ApiTaskV1TaskTypeCertify {
	return v.value
}

func (v *NullableC1ApiTaskV1TaskTypeCertify) Set(val *C1ApiTaskV1TaskTypeCertify) {
	v.value = val
	v.isSet = true
}

func (v NullableC1ApiTaskV1TaskTypeCertify) IsSet() bool {
	return v.isSet
}

func (v *NullableC1ApiTaskV1TaskTypeCertify) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableC1ApiTaskV1TaskTypeCertify(val *C1ApiTaskV1TaskTypeCertify) *NullableC1ApiTaskV1TaskTypeCertify {
	return &NullableC1ApiTaskV1TaskTypeCertify{value: val, isSet: true}
}

func (v NullableC1ApiTaskV1TaskTypeCertify) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableC1ApiTaskV1TaskTypeCertify) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


