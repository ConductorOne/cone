/*
ConductorOne API

The ConductorOne API is a HTTP API for managing ConductorOne resources.

API version: 0.1.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c1api

import (
	"encoding/json"
)

// checks if the C1ApiTaskV1TaskRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &C1ApiTaskV1TaskRef{}

// C1ApiTaskV1TaskRef The TaskRef message.
type C1ApiTaskV1TaskRef struct {
	// The id field.
	Id *string `json:"id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _C1ApiTaskV1TaskRef C1ApiTaskV1TaskRef

// NewC1ApiTaskV1TaskRef instantiates a new C1ApiTaskV1TaskRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewC1ApiTaskV1TaskRef() *C1ApiTaskV1TaskRef {
	this := C1ApiTaskV1TaskRef{}
	return &this
}

// NewC1ApiTaskV1TaskRefWithDefaults instantiates a new C1ApiTaskV1TaskRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewC1ApiTaskV1TaskRefWithDefaults() *C1ApiTaskV1TaskRef {
	this := C1ApiTaskV1TaskRef{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *C1ApiTaskV1TaskRef) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1TaskRef) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskRef) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *C1ApiTaskV1TaskRef) SetId(v string) {
	o.Id = &v
}

func (o C1ApiTaskV1TaskRef) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o C1ApiTaskV1TaskRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *C1ApiTaskV1TaskRef) UnmarshalJSON(bytes []byte) (err error) {
	varC1ApiTaskV1TaskRef := _C1ApiTaskV1TaskRef{}

	if err = json.Unmarshal(bytes, &varC1ApiTaskV1TaskRef); err == nil {
		*o = C1ApiTaskV1TaskRef(varC1ApiTaskV1TaskRef)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableC1ApiTaskV1TaskRef struct {
	value *C1ApiTaskV1TaskRef
	isSet bool
}

func (v NullableC1ApiTaskV1TaskRef) Get() *C1ApiTaskV1TaskRef {
	return v.value
}

func (v *NullableC1ApiTaskV1TaskRef) Set(val *C1ApiTaskV1TaskRef) {
	v.value = val
	v.isSet = true
}

func (v NullableC1ApiTaskV1TaskRef) IsSet() bool {
	return v.isSet
}

func (v *NullableC1ApiTaskV1TaskRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableC1ApiTaskV1TaskRef(val *C1ApiTaskV1TaskRef) *NullableC1ApiTaskV1TaskRef {
	return &NullableC1ApiTaskV1TaskRef{value: val, isSet: true}
}

func (v NullableC1ApiTaskV1TaskRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableC1ApiTaskV1TaskRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


