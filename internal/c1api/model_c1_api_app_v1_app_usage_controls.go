/*
ConductorOne API

The ConductorOne API is a HTTP API for managing ConductorOne resources.

API version: 0.1.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c1api

import (
	"encoding/json"
)

// checks if the C1ApiAppV1AppUsageControls type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &C1ApiAppV1AppUsageControls{}

// C1ApiAppV1AppUsageControls The AppUsageControls message.
type C1ApiAppV1AppUsageControls struct {
	// The appId field.
	AppId *string `json:"appId,omitempty"`
	// The notify field.
	Notify *bool `json:"notify,omitempty"`
	// The notifyAfterDays field.
	NotifyAfterDays *float32 `json:"notifyAfterDays,omitempty"`
	// The revoke field.
	Revoke *bool `json:"revoke,omitempty"`
	// The revokeAfterDays field.
	RevokeAfterDays *float32 `json:"revokeAfterDays,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _C1ApiAppV1AppUsageControls C1ApiAppV1AppUsageControls

// NewC1ApiAppV1AppUsageControls instantiates a new C1ApiAppV1AppUsageControls object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewC1ApiAppV1AppUsageControls() *C1ApiAppV1AppUsageControls {
	this := C1ApiAppV1AppUsageControls{}
	return &this
}

// NewC1ApiAppV1AppUsageControlsWithDefaults instantiates a new C1ApiAppV1AppUsageControls object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewC1ApiAppV1AppUsageControlsWithDefaults() *C1ApiAppV1AppUsageControls {
	this := C1ApiAppV1AppUsageControls{}
	return &this
}

// GetAppId returns the AppId field value if set, zero value otherwise.
func (o *C1ApiAppV1AppUsageControls) GetAppId() string {
	if o == nil || IsNil(o.AppId) {
		var ret string
		return ret
	}
	return *o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiAppV1AppUsageControls) GetAppIdOk() (*string, bool) {
	if o == nil || IsNil(o.AppId) {
		return nil, false
	}
	return o.AppId, true
}

// HasAppId returns a boolean if a field has been set.
func (o *C1ApiAppV1AppUsageControls) HasAppId() bool {
	if o != nil && !IsNil(o.AppId) {
		return true
	}

	return false
}

// SetAppId gets a reference to the given string and assigns it to the AppId field.
func (o *C1ApiAppV1AppUsageControls) SetAppId(v string) {
	o.AppId = &v
}

// GetNotify returns the Notify field value if set, zero value otherwise.
func (o *C1ApiAppV1AppUsageControls) GetNotify() bool {
	if o == nil || IsNil(o.Notify) {
		var ret bool
		return ret
	}
	return *o.Notify
}

// GetNotifyOk returns a tuple with the Notify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiAppV1AppUsageControls) GetNotifyOk() (*bool, bool) {
	if o == nil || IsNil(o.Notify) {
		return nil, false
	}
	return o.Notify, true
}

// HasNotify returns a boolean if a field has been set.
func (o *C1ApiAppV1AppUsageControls) HasNotify() bool {
	if o != nil && !IsNil(o.Notify) {
		return true
	}

	return false
}

// SetNotify gets a reference to the given bool and assigns it to the Notify field.
func (o *C1ApiAppV1AppUsageControls) SetNotify(v bool) {
	o.Notify = &v
}

// GetNotifyAfterDays returns the NotifyAfterDays field value if set, zero value otherwise.
func (o *C1ApiAppV1AppUsageControls) GetNotifyAfterDays() float32 {
	if o == nil || IsNil(o.NotifyAfterDays) {
		var ret float32
		return ret
	}
	return *o.NotifyAfterDays
}

// GetNotifyAfterDaysOk returns a tuple with the NotifyAfterDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiAppV1AppUsageControls) GetNotifyAfterDaysOk() (*float32, bool) {
	if o == nil || IsNil(o.NotifyAfterDays) {
		return nil, false
	}
	return o.NotifyAfterDays, true
}

// HasNotifyAfterDays returns a boolean if a field has been set.
func (o *C1ApiAppV1AppUsageControls) HasNotifyAfterDays() bool {
	if o != nil && !IsNil(o.NotifyAfterDays) {
		return true
	}

	return false
}

// SetNotifyAfterDays gets a reference to the given float32 and assigns it to the NotifyAfterDays field.
func (o *C1ApiAppV1AppUsageControls) SetNotifyAfterDays(v float32) {
	o.NotifyAfterDays = &v
}

// GetRevoke returns the Revoke field value if set, zero value otherwise.
func (o *C1ApiAppV1AppUsageControls) GetRevoke() bool {
	if o == nil || IsNil(o.Revoke) {
		var ret bool
		return ret
	}
	return *o.Revoke
}

// GetRevokeOk returns a tuple with the Revoke field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiAppV1AppUsageControls) GetRevokeOk() (*bool, bool) {
	if o == nil || IsNil(o.Revoke) {
		return nil, false
	}
	return o.Revoke, true
}

// HasRevoke returns a boolean if a field has been set.
func (o *C1ApiAppV1AppUsageControls) HasRevoke() bool {
	if o != nil && !IsNil(o.Revoke) {
		return true
	}

	return false
}

// SetRevoke gets a reference to the given bool and assigns it to the Revoke field.
func (o *C1ApiAppV1AppUsageControls) SetRevoke(v bool) {
	o.Revoke = &v
}

// GetRevokeAfterDays returns the RevokeAfterDays field value if set, zero value otherwise.
func (o *C1ApiAppV1AppUsageControls) GetRevokeAfterDays() float32 {
	if o == nil || IsNil(o.RevokeAfterDays) {
		var ret float32
		return ret
	}
	return *o.RevokeAfterDays
}

// GetRevokeAfterDaysOk returns a tuple with the RevokeAfterDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiAppV1AppUsageControls) GetRevokeAfterDaysOk() (*float32, bool) {
	if o == nil || IsNil(o.RevokeAfterDays) {
		return nil, false
	}
	return o.RevokeAfterDays, true
}

// HasRevokeAfterDays returns a boolean if a field has been set.
func (o *C1ApiAppV1AppUsageControls) HasRevokeAfterDays() bool {
	if o != nil && !IsNil(o.RevokeAfterDays) {
		return true
	}

	return false
}

// SetRevokeAfterDays gets a reference to the given float32 and assigns it to the RevokeAfterDays field.
func (o *C1ApiAppV1AppUsageControls) SetRevokeAfterDays(v float32) {
	o.RevokeAfterDays = &v
}

func (o C1ApiAppV1AppUsageControls) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o C1ApiAppV1AppUsageControls) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AppId) {
		toSerialize["appId"] = o.AppId
	}
	if !IsNil(o.Notify) {
		toSerialize["notify"] = o.Notify
	}
	if !IsNil(o.NotifyAfterDays) {
		toSerialize["notifyAfterDays"] = o.NotifyAfterDays
	}
	if !IsNil(o.Revoke) {
		toSerialize["revoke"] = o.Revoke
	}
	if !IsNil(o.RevokeAfterDays) {
		toSerialize["revokeAfterDays"] = o.RevokeAfterDays
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *C1ApiAppV1AppUsageControls) UnmarshalJSON(bytes []byte) (err error) {
	varC1ApiAppV1AppUsageControls := _C1ApiAppV1AppUsageControls{}

	if err = json.Unmarshal(bytes, &varC1ApiAppV1AppUsageControls); err == nil {
		*o = C1ApiAppV1AppUsageControls(varC1ApiAppV1AppUsageControls)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "appId")
		delete(additionalProperties, "notify")
		delete(additionalProperties, "notifyAfterDays")
		delete(additionalProperties, "revoke")
		delete(additionalProperties, "revokeAfterDays")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableC1ApiAppV1AppUsageControls struct {
	value *C1ApiAppV1AppUsageControls
	isSet bool
}

func (v NullableC1ApiAppV1AppUsageControls) Get() *C1ApiAppV1AppUsageControls {
	return v.value
}

func (v *NullableC1ApiAppV1AppUsageControls) Set(val *C1ApiAppV1AppUsageControls) {
	v.value = val
	v.isSet = true
}

func (v NullableC1ApiAppV1AppUsageControls) IsSet() bool {
	return v.isSet
}

func (v *NullableC1ApiAppV1AppUsageControls) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableC1ApiAppV1AppUsageControls(val *C1ApiAppV1AppUsageControls) *NullableC1ApiAppV1AppUsageControls {
	return &NullableC1ApiAppV1AppUsageControls{value: val, isSet: true}
}

func (v NullableC1ApiAppV1AppUsageControls) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableC1ApiAppV1AppUsageControls) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


