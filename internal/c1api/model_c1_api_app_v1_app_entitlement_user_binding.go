/*
ConductorOne API

The ConductorOne API is a HTTP API for managing ConductorOne resources.

API version: 0.1.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c1api

import (
	"encoding/json"
	"time"
)

// checks if the C1ApiAppV1AppEntitlementUserBinding type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &C1ApiAppV1AppEntitlementUserBinding{}

// C1ApiAppV1AppEntitlementUserBinding The AppEntitlementUserBinding message.
type C1ApiAppV1AppEntitlementUserBinding struct {
	// The appEntitlementId field.
	AppEntitlementId *string `json:"appEntitlementId,omitempty"`
	// The appId field.
	AppId *string `json:"appId,omitempty"`
	// The appUserId field.
	AppUserId *string `json:"appUserId,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	DeprovisionAt *time.Time `json:"deprovisionAt,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _C1ApiAppV1AppEntitlementUserBinding C1ApiAppV1AppEntitlementUserBinding

// NewC1ApiAppV1AppEntitlementUserBinding instantiates a new C1ApiAppV1AppEntitlementUserBinding object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewC1ApiAppV1AppEntitlementUserBinding() *C1ApiAppV1AppEntitlementUserBinding {
	this := C1ApiAppV1AppEntitlementUserBinding{}
	return &this
}

// NewC1ApiAppV1AppEntitlementUserBindingWithDefaults instantiates a new C1ApiAppV1AppEntitlementUserBinding object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewC1ApiAppV1AppEntitlementUserBindingWithDefaults() *C1ApiAppV1AppEntitlementUserBinding {
	this := C1ApiAppV1AppEntitlementUserBinding{}
	return &this
}

// GetAppEntitlementId returns the AppEntitlementId field value if set, zero value otherwise.
func (o *C1ApiAppV1AppEntitlementUserBinding) GetAppEntitlementId() string {
	if o == nil || IsNil(o.AppEntitlementId) {
		var ret string
		return ret
	}
	return *o.AppEntitlementId
}

// GetAppEntitlementIdOk returns a tuple with the AppEntitlementId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiAppV1AppEntitlementUserBinding) GetAppEntitlementIdOk() (*string, bool) {
	if o == nil || IsNil(o.AppEntitlementId) {
		return nil, false
	}
	return o.AppEntitlementId, true
}

// HasAppEntitlementId returns a boolean if a field has been set.
func (o *C1ApiAppV1AppEntitlementUserBinding) HasAppEntitlementId() bool {
	if o != nil && !IsNil(o.AppEntitlementId) {
		return true
	}

	return false
}

// SetAppEntitlementId gets a reference to the given string and assigns it to the AppEntitlementId field.
func (o *C1ApiAppV1AppEntitlementUserBinding) SetAppEntitlementId(v string) {
	o.AppEntitlementId = &v
}

// GetAppId returns the AppId field value if set, zero value otherwise.
func (o *C1ApiAppV1AppEntitlementUserBinding) GetAppId() string {
	if o == nil || IsNil(o.AppId) {
		var ret string
		return ret
	}
	return *o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiAppV1AppEntitlementUserBinding) GetAppIdOk() (*string, bool) {
	if o == nil || IsNil(o.AppId) {
		return nil, false
	}
	return o.AppId, true
}

// HasAppId returns a boolean if a field has been set.
func (o *C1ApiAppV1AppEntitlementUserBinding) HasAppId() bool {
	if o != nil && !IsNil(o.AppId) {
		return true
	}

	return false
}

// SetAppId gets a reference to the given string and assigns it to the AppId field.
func (o *C1ApiAppV1AppEntitlementUserBinding) SetAppId(v string) {
	o.AppId = &v
}

// GetAppUserId returns the AppUserId field value if set, zero value otherwise.
func (o *C1ApiAppV1AppEntitlementUserBinding) GetAppUserId() string {
	if o == nil || IsNil(o.AppUserId) {
		var ret string
		return ret
	}
	return *o.AppUserId
}

// GetAppUserIdOk returns a tuple with the AppUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiAppV1AppEntitlementUserBinding) GetAppUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.AppUserId) {
		return nil, false
	}
	return o.AppUserId, true
}

// HasAppUserId returns a boolean if a field has been set.
func (o *C1ApiAppV1AppEntitlementUserBinding) HasAppUserId() bool {
	if o != nil && !IsNil(o.AppUserId) {
		return true
	}

	return false
}

// SetAppUserId gets a reference to the given string and assigns it to the AppUserId field.
func (o *C1ApiAppV1AppEntitlementUserBinding) SetAppUserId(v string) {
	o.AppUserId = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *C1ApiAppV1AppEntitlementUserBinding) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiAppV1AppEntitlementUserBinding) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *C1ApiAppV1AppEntitlementUserBinding) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *C1ApiAppV1AppEntitlementUserBinding) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *C1ApiAppV1AppEntitlementUserBinding) GetDeletedAt() time.Time {
	if o == nil || IsNil(o.DeletedAt) {
		var ret time.Time
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiAppV1AppEntitlementUserBinding) GetDeletedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *C1ApiAppV1AppEntitlementUserBinding) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given time.Time and assigns it to the DeletedAt field.
func (o *C1ApiAppV1AppEntitlementUserBinding) SetDeletedAt(v time.Time) {
	o.DeletedAt = &v
}

// GetDeprovisionAt returns the DeprovisionAt field value if set, zero value otherwise.
func (o *C1ApiAppV1AppEntitlementUserBinding) GetDeprovisionAt() time.Time {
	if o == nil || IsNil(o.DeprovisionAt) {
		var ret time.Time
		return ret
	}
	return *o.DeprovisionAt
}

// GetDeprovisionAtOk returns a tuple with the DeprovisionAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiAppV1AppEntitlementUserBinding) GetDeprovisionAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DeprovisionAt) {
		return nil, false
	}
	return o.DeprovisionAt, true
}

// HasDeprovisionAt returns a boolean if a field has been set.
func (o *C1ApiAppV1AppEntitlementUserBinding) HasDeprovisionAt() bool {
	if o != nil && !IsNil(o.DeprovisionAt) {
		return true
	}

	return false
}

// SetDeprovisionAt gets a reference to the given time.Time and assigns it to the DeprovisionAt field.
func (o *C1ApiAppV1AppEntitlementUserBinding) SetDeprovisionAt(v time.Time) {
	o.DeprovisionAt = &v
}

func (o C1ApiAppV1AppEntitlementUserBinding) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o C1ApiAppV1AppEntitlementUserBinding) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AppEntitlementId) {
		toSerialize["appEntitlementId"] = o.AppEntitlementId
	}
	if !IsNil(o.AppId) {
		toSerialize["appId"] = o.AppId
	}
	if !IsNil(o.AppUserId) {
		toSerialize["appUserId"] = o.AppUserId
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deletedAt"] = o.DeletedAt
	}
	if !IsNil(o.DeprovisionAt) {
		toSerialize["deprovisionAt"] = o.DeprovisionAt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *C1ApiAppV1AppEntitlementUserBinding) UnmarshalJSON(bytes []byte) (err error) {
	varC1ApiAppV1AppEntitlementUserBinding := _C1ApiAppV1AppEntitlementUserBinding{}

	if err = json.Unmarshal(bytes, &varC1ApiAppV1AppEntitlementUserBinding); err == nil {
		*o = C1ApiAppV1AppEntitlementUserBinding(varC1ApiAppV1AppEntitlementUserBinding)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "appEntitlementId")
		delete(additionalProperties, "appId")
		delete(additionalProperties, "appUserId")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "deletedAt")
		delete(additionalProperties, "deprovisionAt")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableC1ApiAppV1AppEntitlementUserBinding struct {
	value *C1ApiAppV1AppEntitlementUserBinding
	isSet bool
}

func (v NullableC1ApiAppV1AppEntitlementUserBinding) Get() *C1ApiAppV1AppEntitlementUserBinding {
	return v.value
}

func (v *NullableC1ApiAppV1AppEntitlementUserBinding) Set(val *C1ApiAppV1AppEntitlementUserBinding) {
	v.value = val
	v.isSet = true
}

func (v NullableC1ApiAppV1AppEntitlementUserBinding) IsSet() bool {
	return v.isSet
}

func (v *NullableC1ApiAppV1AppEntitlementUserBinding) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableC1ApiAppV1AppEntitlementUserBinding(val *C1ApiAppV1AppEntitlementUserBinding) *NullableC1ApiAppV1AppEntitlementUserBinding {
	return &NullableC1ApiAppV1AppEntitlementUserBinding{value: val, isSet: true}
}

func (v NullableC1ApiAppV1AppEntitlementUserBinding) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableC1ApiAppV1AppEntitlementUserBinding) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


