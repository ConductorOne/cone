/*
ConductorOne API

The ConductorOne API is a HTTP API for managing ConductorOne resources.

API version: 0.1.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c1api

import (
	"encoding/json"
)

// checks if the C1ApiAppV1SearchAppsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &C1ApiAppV1SearchAppsRequest{}

// C1ApiAppV1SearchAppsRequest The SearchAppsRequest message.
type C1ApiAppV1SearchAppsRequest struct {
	// The appIds field.
	AppIds []string `json:"appIds,omitempty"`
	// The excludeAppIds field.
	ExcludeAppIds []string `json:"excludeAppIds,omitempty"`
	// The pageSize field.
	PageSize *float32 `json:"pageSize,omitempty"`
	// The pageToken field.
	PageToken *string `json:"pageToken,omitempty"`
	// The query field.
	Query *string `json:"query,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _C1ApiAppV1SearchAppsRequest C1ApiAppV1SearchAppsRequest

// NewC1ApiAppV1SearchAppsRequest instantiates a new C1ApiAppV1SearchAppsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewC1ApiAppV1SearchAppsRequest() *C1ApiAppV1SearchAppsRequest {
	this := C1ApiAppV1SearchAppsRequest{}
	return &this
}

// NewC1ApiAppV1SearchAppsRequestWithDefaults instantiates a new C1ApiAppV1SearchAppsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewC1ApiAppV1SearchAppsRequestWithDefaults() *C1ApiAppV1SearchAppsRequest {
	this := C1ApiAppV1SearchAppsRequest{}
	return &this
}

// GetAppIds returns the AppIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiAppV1SearchAppsRequest) GetAppIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.AppIds
}

// GetAppIdsOk returns a tuple with the AppIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiAppV1SearchAppsRequest) GetAppIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.AppIds) {
		return nil, false
	}
	return o.AppIds, true
}

// HasAppIds returns a boolean if a field has been set.
func (o *C1ApiAppV1SearchAppsRequest) HasAppIds() bool {
	if o != nil && IsNil(o.AppIds) {
		return true
	}

	return false
}

// SetAppIds gets a reference to the given []string and assigns it to the AppIds field.
func (o *C1ApiAppV1SearchAppsRequest) SetAppIds(v []string) {
	o.AppIds = v
}

// GetExcludeAppIds returns the ExcludeAppIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiAppV1SearchAppsRequest) GetExcludeAppIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ExcludeAppIds
}

// GetExcludeAppIdsOk returns a tuple with the ExcludeAppIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiAppV1SearchAppsRequest) GetExcludeAppIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ExcludeAppIds) {
		return nil, false
	}
	return o.ExcludeAppIds, true
}

// HasExcludeAppIds returns a boolean if a field has been set.
func (o *C1ApiAppV1SearchAppsRequest) HasExcludeAppIds() bool {
	if o != nil && IsNil(o.ExcludeAppIds) {
		return true
	}

	return false
}

// SetExcludeAppIds gets a reference to the given []string and assigns it to the ExcludeAppIds field.
func (o *C1ApiAppV1SearchAppsRequest) SetExcludeAppIds(v []string) {
	o.ExcludeAppIds = v
}

// GetPageSize returns the PageSize field value if set, zero value otherwise.
func (o *C1ApiAppV1SearchAppsRequest) GetPageSize() float32 {
	if o == nil || IsNil(o.PageSize) {
		var ret float32
		return ret
	}
	return *o.PageSize
}

// GetPageSizeOk returns a tuple with the PageSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiAppV1SearchAppsRequest) GetPageSizeOk() (*float32, bool) {
	if o == nil || IsNil(o.PageSize) {
		return nil, false
	}
	return o.PageSize, true
}

// HasPageSize returns a boolean if a field has been set.
func (o *C1ApiAppV1SearchAppsRequest) HasPageSize() bool {
	if o != nil && !IsNil(o.PageSize) {
		return true
	}

	return false
}

// SetPageSize gets a reference to the given float32 and assigns it to the PageSize field.
func (o *C1ApiAppV1SearchAppsRequest) SetPageSize(v float32) {
	o.PageSize = &v
}

// GetPageToken returns the PageToken field value if set, zero value otherwise.
func (o *C1ApiAppV1SearchAppsRequest) GetPageToken() string {
	if o == nil || IsNil(o.PageToken) {
		var ret string
		return ret
	}
	return *o.PageToken
}

// GetPageTokenOk returns a tuple with the PageToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiAppV1SearchAppsRequest) GetPageTokenOk() (*string, bool) {
	if o == nil || IsNil(o.PageToken) {
		return nil, false
	}
	return o.PageToken, true
}

// HasPageToken returns a boolean if a field has been set.
func (o *C1ApiAppV1SearchAppsRequest) HasPageToken() bool {
	if o != nil && !IsNil(o.PageToken) {
		return true
	}

	return false
}

// SetPageToken gets a reference to the given string and assigns it to the PageToken field.
func (o *C1ApiAppV1SearchAppsRequest) SetPageToken(v string) {
	o.PageToken = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *C1ApiAppV1SearchAppsRequest) GetQuery() string {
	if o == nil || IsNil(o.Query) {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiAppV1SearchAppsRequest) GetQueryOk() (*string, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *C1ApiAppV1SearchAppsRequest) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *C1ApiAppV1SearchAppsRequest) SetQuery(v string) {
	o.Query = &v
}

func (o C1ApiAppV1SearchAppsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o C1ApiAppV1SearchAppsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AppIds != nil {
		toSerialize["appIds"] = o.AppIds
	}
	if o.ExcludeAppIds != nil {
		toSerialize["excludeAppIds"] = o.ExcludeAppIds
	}
	if !IsNil(o.PageSize) {
		toSerialize["pageSize"] = o.PageSize
	}
	if !IsNil(o.PageToken) {
		toSerialize["pageToken"] = o.PageToken
	}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *C1ApiAppV1SearchAppsRequest) UnmarshalJSON(bytes []byte) (err error) {
	varC1ApiAppV1SearchAppsRequest := _C1ApiAppV1SearchAppsRequest{}

	if err = json.Unmarshal(bytes, &varC1ApiAppV1SearchAppsRequest); err == nil {
		*o = C1ApiAppV1SearchAppsRequest(varC1ApiAppV1SearchAppsRequest)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "appIds")
		delete(additionalProperties, "excludeAppIds")
		delete(additionalProperties, "pageSize")
		delete(additionalProperties, "pageToken")
		delete(additionalProperties, "query")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableC1ApiAppV1SearchAppsRequest struct {
	value *C1ApiAppV1SearchAppsRequest
	isSet bool
}

func (v NullableC1ApiAppV1SearchAppsRequest) Get() *C1ApiAppV1SearchAppsRequest {
	return v.value
}

func (v *NullableC1ApiAppV1SearchAppsRequest) Set(val *C1ApiAppV1SearchAppsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableC1ApiAppV1SearchAppsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableC1ApiAppV1SearchAppsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableC1ApiAppV1SearchAppsRequest(val *C1ApiAppV1SearchAppsRequest) *NullableC1ApiAppV1SearchAppsRequest {
	return &NullableC1ApiAppV1SearchAppsRequest{value: val, isSet: true}
}

func (v NullableC1ApiAppV1SearchAppsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableC1ApiAppV1SearchAppsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


