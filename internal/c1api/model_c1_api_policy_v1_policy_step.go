/*
ConductorOne API

The ConductorOne API is a HTTP API for managing ConductorOne resources.

API version: 0.1.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c1api

import (
	"encoding/json"
)

// checks if the C1ApiPolicyV1PolicyStep type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &C1ApiPolicyV1PolicyStep{}

// C1ApiPolicyV1PolicyStep The PolicyStep message.  This message contains a oneof named step. Only a single field of the following list may be set at a time:   - approval   - provision 
type C1ApiPolicyV1PolicyStep struct {
	Approval NullableC1ApiPolicyV1Approval `json:"approval,omitempty"`
	Provision NullableC1ApiPolicyV1Provision `json:"provision,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _C1ApiPolicyV1PolicyStep C1ApiPolicyV1PolicyStep

// NewC1ApiPolicyV1PolicyStep instantiates a new C1ApiPolicyV1PolicyStep object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewC1ApiPolicyV1PolicyStep() *C1ApiPolicyV1PolicyStep {
	this := C1ApiPolicyV1PolicyStep{}
	return &this
}

// NewC1ApiPolicyV1PolicyStepWithDefaults instantiates a new C1ApiPolicyV1PolicyStep object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewC1ApiPolicyV1PolicyStepWithDefaults() *C1ApiPolicyV1PolicyStep {
	this := C1ApiPolicyV1PolicyStep{}
	return &this
}

// GetApproval returns the Approval field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiPolicyV1PolicyStep) GetApproval() C1ApiPolicyV1Approval {
	if o == nil || IsNil(o.Approval.Get()) {
		var ret C1ApiPolicyV1Approval
		return ret
	}
	return *o.Approval.Get()
}

// GetApprovalOk returns a tuple with the Approval field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiPolicyV1PolicyStep) GetApprovalOk() (*C1ApiPolicyV1Approval, bool) {
	if o == nil {
		return nil, false
	}
	return o.Approval.Get(), o.Approval.IsSet()
}

// HasApproval returns a boolean if a field has been set.
func (o *C1ApiPolicyV1PolicyStep) HasApproval() bool {
	if o != nil && o.Approval.IsSet() {
		return true
	}

	return false
}

// SetApproval gets a reference to the given NullableC1ApiPolicyV1Approval and assigns it to the Approval field.
func (o *C1ApiPolicyV1PolicyStep) SetApproval(v C1ApiPolicyV1Approval) {
	o.Approval.Set(&v)
}
// SetApprovalNil sets the value for Approval to be an explicit nil
func (o *C1ApiPolicyV1PolicyStep) SetApprovalNil() {
	o.Approval.Set(nil)
}

// UnsetApproval ensures that no value is present for Approval, not even an explicit nil
func (o *C1ApiPolicyV1PolicyStep) UnsetApproval() {
	o.Approval.Unset()
}

// GetProvision returns the Provision field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiPolicyV1PolicyStep) GetProvision() C1ApiPolicyV1Provision {
	if o == nil || IsNil(o.Provision.Get()) {
		var ret C1ApiPolicyV1Provision
		return ret
	}
	return *o.Provision.Get()
}

// GetProvisionOk returns a tuple with the Provision field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiPolicyV1PolicyStep) GetProvisionOk() (*C1ApiPolicyV1Provision, bool) {
	if o == nil {
		return nil, false
	}
	return o.Provision.Get(), o.Provision.IsSet()
}

// HasProvision returns a boolean if a field has been set.
func (o *C1ApiPolicyV1PolicyStep) HasProvision() bool {
	if o != nil && o.Provision.IsSet() {
		return true
	}

	return false
}

// SetProvision gets a reference to the given NullableC1ApiPolicyV1Provision and assigns it to the Provision field.
func (o *C1ApiPolicyV1PolicyStep) SetProvision(v C1ApiPolicyV1Provision) {
	o.Provision.Set(&v)
}
// SetProvisionNil sets the value for Provision to be an explicit nil
func (o *C1ApiPolicyV1PolicyStep) SetProvisionNil() {
	o.Provision.Set(nil)
}

// UnsetProvision ensures that no value is present for Provision, not even an explicit nil
func (o *C1ApiPolicyV1PolicyStep) UnsetProvision() {
	o.Provision.Unset()
}

func (o C1ApiPolicyV1PolicyStep) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o C1ApiPolicyV1PolicyStep) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Approval.IsSet() {
		toSerialize["approval"] = o.Approval.Get()
	}
	if o.Provision.IsSet() {
		toSerialize["provision"] = o.Provision.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *C1ApiPolicyV1PolicyStep) UnmarshalJSON(bytes []byte) (err error) {
	varC1ApiPolicyV1PolicyStep := _C1ApiPolicyV1PolicyStep{}

	if err = json.Unmarshal(bytes, &varC1ApiPolicyV1PolicyStep); err == nil {
		*o = C1ApiPolicyV1PolicyStep(varC1ApiPolicyV1PolicyStep)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "approval")
		delete(additionalProperties, "provision")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableC1ApiPolicyV1PolicyStep struct {
	value *C1ApiPolicyV1PolicyStep
	isSet bool
}

func (v NullableC1ApiPolicyV1PolicyStep) Get() *C1ApiPolicyV1PolicyStep {
	return v.value
}

func (v *NullableC1ApiPolicyV1PolicyStep) Set(val *C1ApiPolicyV1PolicyStep) {
	v.value = val
	v.isSet = true
}

func (v NullableC1ApiPolicyV1PolicyStep) IsSet() bool {
	return v.isSet
}

func (v *NullableC1ApiPolicyV1PolicyStep) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableC1ApiPolicyV1PolicyStep(val *C1ApiPolicyV1PolicyStep) *NullableC1ApiPolicyV1PolicyStep {
	return &NullableC1ApiPolicyV1PolicyStep{value: val, isSet: true}
}

func (v NullableC1ApiPolicyV1PolicyStep) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableC1ApiPolicyV1PolicyStep) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


