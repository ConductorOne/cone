/*
ConductorOne API

The ConductorOne API is a HTTP API for managing ConductorOne resources.

API version: 0.1.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c1api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DirectoryAPIService DirectoryAPI service
type DirectoryAPIService service

type DirectoryAPIC1ApiDirectoryV1DirectoryServiceCreateRequest struct {
	ctx context.Context
	ApiService *DirectoryAPIService
	c1ApiDirectoryV1DirectoryServiceCreateRequest *C1ApiDirectoryV1DirectoryServiceCreateRequest
}

func (r DirectoryAPIC1ApiDirectoryV1DirectoryServiceCreateRequest) C1ApiDirectoryV1DirectoryServiceCreateRequest(c1ApiDirectoryV1DirectoryServiceCreateRequest C1ApiDirectoryV1DirectoryServiceCreateRequest) DirectoryAPIC1ApiDirectoryV1DirectoryServiceCreateRequest {
	r.c1ApiDirectoryV1DirectoryServiceCreateRequest = &c1ApiDirectoryV1DirectoryServiceCreateRequest
	return r
}

func (r DirectoryAPIC1ApiDirectoryV1DirectoryServiceCreateRequest) Execute() (*C1ApiDirectoryV1DirectoryServiceCreateResponse, *http.Response, error) {
	return r.ApiService.C1ApiDirectoryV1DirectoryServiceCreateExecute(r)
}

/*
C1ApiDirectoryV1DirectoryServiceCreate Method for C1ApiDirectoryV1DirectoryServiceCreate

Invokes the c1.api.directory.v1.DirectoryService.Create method.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return DirectoryAPIC1ApiDirectoryV1DirectoryServiceCreateRequest
*/
func (a *DirectoryAPIService) C1ApiDirectoryV1DirectoryServiceCreate(ctx context.Context) DirectoryAPIC1ApiDirectoryV1DirectoryServiceCreateRequest {
	return DirectoryAPIC1ApiDirectoryV1DirectoryServiceCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return C1ApiDirectoryV1DirectoryServiceCreateResponse
func (a *DirectoryAPIService) C1ApiDirectoryV1DirectoryServiceCreateExecute(r DirectoryAPIC1ApiDirectoryV1DirectoryServiceCreateRequest) (*C1ApiDirectoryV1DirectoryServiceCreateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *C1ApiDirectoryV1DirectoryServiceCreateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DirectoryAPIService.C1ApiDirectoryV1DirectoryServiceCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/directories"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.c1ApiDirectoryV1DirectoryServiceCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DirectoryAPIC1ApiDirectoryV1DirectoryServiceDeleteRequest struct {
	ctx context.Context
	ApiService *DirectoryAPIService
	appId string
	body *map[string]interface{}
}

func (r DirectoryAPIC1ApiDirectoryV1DirectoryServiceDeleteRequest) Body(body map[string]interface{}) DirectoryAPIC1ApiDirectoryV1DirectoryServiceDeleteRequest {
	r.body = &body
	return r
}

func (r DirectoryAPIC1ApiDirectoryV1DirectoryServiceDeleteRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.C1ApiDirectoryV1DirectoryServiceDeleteExecute(r)
}

/*
C1ApiDirectoryV1DirectoryServiceDelete Method for C1ApiDirectoryV1DirectoryServiceDelete

Invokes the c1.api.directory.v1.DirectoryService.Delete method.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appId
 @return DirectoryAPIC1ApiDirectoryV1DirectoryServiceDeleteRequest
*/
func (a *DirectoryAPIService) C1ApiDirectoryV1DirectoryServiceDelete(ctx context.Context, appId string) DirectoryAPIC1ApiDirectoryV1DirectoryServiceDeleteRequest {
	return DirectoryAPIC1ApiDirectoryV1DirectoryServiceDeleteRequest{
		ApiService: a,
		ctx: ctx,
		appId: appId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *DirectoryAPIService) C1ApiDirectoryV1DirectoryServiceDeleteExecute(r DirectoryAPIC1ApiDirectoryV1DirectoryServiceDeleteRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DirectoryAPIService.C1ApiDirectoryV1DirectoryServiceDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/directories/{app_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"app_id"+"}", url.PathEscape(parameterValueToString(r.appId, "appId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DirectoryAPIC1ApiDirectoryV1DirectoryServiceGetRequest struct {
	ctx context.Context
	ApiService *DirectoryAPIService
	appId string
}

func (r DirectoryAPIC1ApiDirectoryV1DirectoryServiceGetRequest) Execute() (*C1ApiDirectoryV1DirectoryServiceGetResponse, *http.Response, error) {
	return r.ApiService.C1ApiDirectoryV1DirectoryServiceGetExecute(r)
}

/*
C1ApiDirectoryV1DirectoryServiceGet Method for C1ApiDirectoryV1DirectoryServiceGet

Invokes the c1.api.directory.v1.DirectoryService.Get method.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appId
 @return DirectoryAPIC1ApiDirectoryV1DirectoryServiceGetRequest
*/
func (a *DirectoryAPIService) C1ApiDirectoryV1DirectoryServiceGet(ctx context.Context, appId string) DirectoryAPIC1ApiDirectoryV1DirectoryServiceGetRequest {
	return DirectoryAPIC1ApiDirectoryV1DirectoryServiceGetRequest{
		ApiService: a,
		ctx: ctx,
		appId: appId,
	}
}

// Execute executes the request
//  @return C1ApiDirectoryV1DirectoryServiceGetResponse
func (a *DirectoryAPIService) C1ApiDirectoryV1DirectoryServiceGetExecute(r DirectoryAPIC1ApiDirectoryV1DirectoryServiceGetRequest) (*C1ApiDirectoryV1DirectoryServiceGetResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *C1ApiDirectoryV1DirectoryServiceGetResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DirectoryAPIService.C1ApiDirectoryV1DirectoryServiceGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/directories/{app_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"app_id"+"}", url.PathEscape(parameterValueToString(r.appId, "appId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DirectoryAPIC1ApiDirectoryV1DirectoryServiceListRequest struct {
	ctx context.Context
	ApiService *DirectoryAPIService
}

func (r DirectoryAPIC1ApiDirectoryV1DirectoryServiceListRequest) Execute() (*C1ApiDirectoryV1DirectoryServiceListResponse, *http.Response, error) {
	return r.ApiService.C1ApiDirectoryV1DirectoryServiceListExecute(r)
}

/*
C1ApiDirectoryV1DirectoryServiceList Method for C1ApiDirectoryV1DirectoryServiceList

Invokes the c1.api.directory.v1.DirectoryService.List method.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return DirectoryAPIC1ApiDirectoryV1DirectoryServiceListRequest
*/
func (a *DirectoryAPIService) C1ApiDirectoryV1DirectoryServiceList(ctx context.Context) DirectoryAPIC1ApiDirectoryV1DirectoryServiceListRequest {
	return DirectoryAPIC1ApiDirectoryV1DirectoryServiceListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return C1ApiDirectoryV1DirectoryServiceListResponse
func (a *DirectoryAPIService) C1ApiDirectoryV1DirectoryServiceListExecute(r DirectoryAPIC1ApiDirectoryV1DirectoryServiceListRequest) (*C1ApiDirectoryV1DirectoryServiceListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *C1ApiDirectoryV1DirectoryServiceListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DirectoryAPIService.C1ApiDirectoryV1DirectoryServiceList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/directories"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
