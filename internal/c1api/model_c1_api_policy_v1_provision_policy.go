/*
ConductorOne API

The ConductorOne API is a HTTP API for managing ConductorOne resources.

API version: 0.1.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c1api

import (
	"encoding/json"
)

// checks if the C1ApiPolicyV1ProvisionPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &C1ApiPolicyV1ProvisionPolicy{}

// C1ApiPolicyV1ProvisionPolicy The ProvisionPolicy message.  This message contains a oneof named typ. Only a single field of the following list may be set at a time:   - connector   - manual   - delegated 
type C1ApiPolicyV1ProvisionPolicy struct {
	// The ConnectorProvision message.
	Connector interface{} `json:"connector,omitempty"`
	Delegated *C1ApiPolicyV1DelegatedProvision `json:"delegated,omitempty"`
	Manual *C1ApiPolicyV1ManualProvision `json:"manual,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _C1ApiPolicyV1ProvisionPolicy C1ApiPolicyV1ProvisionPolicy

// NewC1ApiPolicyV1ProvisionPolicy instantiates a new C1ApiPolicyV1ProvisionPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewC1ApiPolicyV1ProvisionPolicy() *C1ApiPolicyV1ProvisionPolicy {
	this := C1ApiPolicyV1ProvisionPolicy{}
	return &this
}

// NewC1ApiPolicyV1ProvisionPolicyWithDefaults instantiates a new C1ApiPolicyV1ProvisionPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewC1ApiPolicyV1ProvisionPolicyWithDefaults() *C1ApiPolicyV1ProvisionPolicy {
	this := C1ApiPolicyV1ProvisionPolicy{}
	return &this
}

// GetConnector returns the Connector field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiPolicyV1ProvisionPolicy) GetConnector() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Connector
}

// GetConnectorOk returns a tuple with the Connector field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiPolicyV1ProvisionPolicy) GetConnectorOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Connector) {
		return nil, false
	}
	return &o.Connector, true
}

// HasConnector returns a boolean if a field has been set.
func (o *C1ApiPolicyV1ProvisionPolicy) HasConnector() bool {
	if o != nil && IsNil(o.Connector) {
		return true
	}

	return false
}

// SetConnector gets a reference to the given interface{} and assigns it to the Connector field.
func (o *C1ApiPolicyV1ProvisionPolicy) SetConnector(v interface{}) {
	o.Connector = v
}

// GetDelegated returns the Delegated field value if set, zero value otherwise.
func (o *C1ApiPolicyV1ProvisionPolicy) GetDelegated() C1ApiPolicyV1DelegatedProvision {
	if o == nil || IsNil(o.Delegated) {
		var ret C1ApiPolicyV1DelegatedProvision
		return ret
	}
	return *o.Delegated
}

// GetDelegatedOk returns a tuple with the Delegated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiPolicyV1ProvisionPolicy) GetDelegatedOk() (*C1ApiPolicyV1DelegatedProvision, bool) {
	if o == nil || IsNil(o.Delegated) {
		return nil, false
	}
	return o.Delegated, true
}

// HasDelegated returns a boolean if a field has been set.
func (o *C1ApiPolicyV1ProvisionPolicy) HasDelegated() bool {
	if o != nil && !IsNil(o.Delegated) {
		return true
	}

	return false
}

// SetDelegated gets a reference to the given C1ApiPolicyV1DelegatedProvision and assigns it to the Delegated field.
func (o *C1ApiPolicyV1ProvisionPolicy) SetDelegated(v C1ApiPolicyV1DelegatedProvision) {
	o.Delegated = &v
}

// GetManual returns the Manual field value if set, zero value otherwise.
func (o *C1ApiPolicyV1ProvisionPolicy) GetManual() C1ApiPolicyV1ManualProvision {
	if o == nil || IsNil(o.Manual) {
		var ret C1ApiPolicyV1ManualProvision
		return ret
	}
	return *o.Manual
}

// GetManualOk returns a tuple with the Manual field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiPolicyV1ProvisionPolicy) GetManualOk() (*C1ApiPolicyV1ManualProvision, bool) {
	if o == nil || IsNil(o.Manual) {
		return nil, false
	}
	return o.Manual, true
}

// HasManual returns a boolean if a field has been set.
func (o *C1ApiPolicyV1ProvisionPolicy) HasManual() bool {
	if o != nil && !IsNil(o.Manual) {
		return true
	}

	return false
}

// SetManual gets a reference to the given C1ApiPolicyV1ManualProvision and assigns it to the Manual field.
func (o *C1ApiPolicyV1ProvisionPolicy) SetManual(v C1ApiPolicyV1ManualProvision) {
	o.Manual = &v
}

func (o C1ApiPolicyV1ProvisionPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o C1ApiPolicyV1ProvisionPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Connector != nil {
		toSerialize["connector"] = o.Connector
	}
	if !IsNil(o.Delegated) {
		toSerialize["delegated"] = o.Delegated
	}
	if !IsNil(o.Manual) {
		toSerialize["manual"] = o.Manual
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *C1ApiPolicyV1ProvisionPolicy) UnmarshalJSON(bytes []byte) (err error) {
	varC1ApiPolicyV1ProvisionPolicy := _C1ApiPolicyV1ProvisionPolicy{}

	if err = json.Unmarshal(bytes, &varC1ApiPolicyV1ProvisionPolicy); err == nil {
		*o = C1ApiPolicyV1ProvisionPolicy(varC1ApiPolicyV1ProvisionPolicy)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "connector")
		delete(additionalProperties, "delegated")
		delete(additionalProperties, "manual")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableC1ApiPolicyV1ProvisionPolicy struct {
	value *C1ApiPolicyV1ProvisionPolicy
	isSet bool
}

func (v NullableC1ApiPolicyV1ProvisionPolicy) Get() *C1ApiPolicyV1ProvisionPolicy {
	return v.value
}

func (v *NullableC1ApiPolicyV1ProvisionPolicy) Set(val *C1ApiPolicyV1ProvisionPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableC1ApiPolicyV1ProvisionPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableC1ApiPolicyV1ProvisionPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableC1ApiPolicyV1ProvisionPolicy(val *C1ApiPolicyV1ProvisionPolicy) *NullableC1ApiPolicyV1ProvisionPolicy {
	return &NullableC1ApiPolicyV1ProvisionPolicy{value: val, isSet: true}
}

func (v NullableC1ApiPolicyV1ProvisionPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableC1ApiPolicyV1ProvisionPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


