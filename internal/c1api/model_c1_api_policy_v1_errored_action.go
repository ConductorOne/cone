/*
ConductorOne API

The ConductorOne API is a HTTP API for managing ConductorOne resources.

API version: 0.1.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c1api

import (
	"encoding/json"
	"time"
)

// checks if the C1ApiPolicyV1ErroredAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &C1ApiPolicyV1ErroredAction{}

// C1ApiPolicyV1ErroredAction The ErroredAction message.
type C1ApiPolicyV1ErroredAction struct {
	// The description field.
	Description *string `json:"description,omitempty"`
	// The errorCode field.
	ErrorCode *string `json:"errorCode,omitempty"`
	ErroredAt *time.Time `json:"erroredAt,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _C1ApiPolicyV1ErroredAction C1ApiPolicyV1ErroredAction

// NewC1ApiPolicyV1ErroredAction instantiates a new C1ApiPolicyV1ErroredAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewC1ApiPolicyV1ErroredAction() *C1ApiPolicyV1ErroredAction {
	this := C1ApiPolicyV1ErroredAction{}
	return &this
}

// NewC1ApiPolicyV1ErroredActionWithDefaults instantiates a new C1ApiPolicyV1ErroredAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewC1ApiPolicyV1ErroredActionWithDefaults() *C1ApiPolicyV1ErroredAction {
	this := C1ApiPolicyV1ErroredAction{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *C1ApiPolicyV1ErroredAction) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiPolicyV1ErroredAction) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *C1ApiPolicyV1ErroredAction) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *C1ApiPolicyV1ErroredAction) SetDescription(v string) {
	o.Description = &v
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *C1ApiPolicyV1ErroredAction) GetErrorCode() string {
	if o == nil || IsNil(o.ErrorCode) {
		var ret string
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiPolicyV1ErroredAction) GetErrorCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorCode) {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *C1ApiPolicyV1ErroredAction) HasErrorCode() bool {
	if o != nil && !IsNil(o.ErrorCode) {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given string and assigns it to the ErrorCode field.
func (o *C1ApiPolicyV1ErroredAction) SetErrorCode(v string) {
	o.ErrorCode = &v
}

// GetErroredAt returns the ErroredAt field value if set, zero value otherwise.
func (o *C1ApiPolicyV1ErroredAction) GetErroredAt() time.Time {
	if o == nil || IsNil(o.ErroredAt) {
		var ret time.Time
		return ret
	}
	return *o.ErroredAt
}

// GetErroredAtOk returns a tuple with the ErroredAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiPolicyV1ErroredAction) GetErroredAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ErroredAt) {
		return nil, false
	}
	return o.ErroredAt, true
}

// HasErroredAt returns a boolean if a field has been set.
func (o *C1ApiPolicyV1ErroredAction) HasErroredAt() bool {
	if o != nil && !IsNil(o.ErroredAt) {
		return true
	}

	return false
}

// SetErroredAt gets a reference to the given time.Time and assigns it to the ErroredAt field.
func (o *C1ApiPolicyV1ErroredAction) SetErroredAt(v time.Time) {
	o.ErroredAt = &v
}

func (o C1ApiPolicyV1ErroredAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o C1ApiPolicyV1ErroredAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ErrorCode) {
		toSerialize["errorCode"] = o.ErrorCode
	}
	if !IsNil(o.ErroredAt) {
		toSerialize["erroredAt"] = o.ErroredAt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *C1ApiPolicyV1ErroredAction) UnmarshalJSON(bytes []byte) (err error) {
	varC1ApiPolicyV1ErroredAction := _C1ApiPolicyV1ErroredAction{}

	if err = json.Unmarshal(bytes, &varC1ApiPolicyV1ErroredAction); err == nil {
		*o = C1ApiPolicyV1ErroredAction(varC1ApiPolicyV1ErroredAction)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "description")
		delete(additionalProperties, "errorCode")
		delete(additionalProperties, "erroredAt")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableC1ApiPolicyV1ErroredAction struct {
	value *C1ApiPolicyV1ErroredAction
	isSet bool
}

func (v NullableC1ApiPolicyV1ErroredAction) Get() *C1ApiPolicyV1ErroredAction {
	return v.value
}

func (v *NullableC1ApiPolicyV1ErroredAction) Set(val *C1ApiPolicyV1ErroredAction) {
	v.value = val
	v.isSet = true
}

func (v NullableC1ApiPolicyV1ErroredAction) IsSet() bool {
	return v.isSet
}

func (v *NullableC1ApiPolicyV1ErroredAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableC1ApiPolicyV1ErroredAction(val *C1ApiPolicyV1ErroredAction) *NullableC1ApiPolicyV1ErroredAction {
	return &NullableC1ApiPolicyV1ErroredAction{value: val, isSet: true}
}

func (v NullableC1ApiPolicyV1ErroredAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableC1ApiPolicyV1ErroredAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


