/*
ConductorOne API

The ConductorOne API is a HTTP API for managing ConductorOne resources.

API version: 0.1.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c1api

import (
	"encoding/json"
)

// checks if the C1ApiUserV1User type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &C1ApiUserV1User{}

// C1ApiUserV1User The User message.
type C1ApiUserV1User struct {
	CreatedAt interface{} `json:"createdAt,omitempty"`
	// The delegatedUserId field.
	DelegatedUserId interface{} `json:"delegatedUserId,omitempty"`
	DeletedAt interface{} `json:"deletedAt,omitempty"`
	// The department field.
	Department interface{} `json:"department,omitempty"`
	// The departmentSources field.
	DepartmentSources interface{} `json:"departmentSources,omitempty"`
	// The directoryIds field.
	DirectoryIds interface{} `json:"directoryIds,omitempty"`
	// The directoryStatus field.
	DirectoryStatus interface{} `json:"directoryStatus,omitempty"`
	// The directoryStatusSources field.
	DirectoryStatusSources interface{} `json:"directoryStatusSources,omitempty"`
	// The displayName field.
	DisplayName interface{} `json:"displayName,omitempty"`
	// The email field.
	Email interface{} `json:"email,omitempty"`
	// The employmentStatus field.
	EmploymentStatus interface{} `json:"employmentStatus,omitempty"`
	// The employmentStatusSources field.
	EmploymentStatusSources interface{} `json:"employmentStatusSources,omitempty"`
	// The employmentType field.
	EmploymentType interface{} `json:"employmentType,omitempty"`
	// The employmentTypeSources field.
	EmploymentTypeSources interface{} `json:"employmentTypeSources,omitempty"`
	// The id field.
	Id interface{} `json:"id,omitempty"`
	// The jobTitle field.
	JobTitle interface{} `json:"jobTitle,omitempty"`
	// The jobTitleSources field.
	JobTitleSources interface{} `json:"jobTitleSources,omitempty"`
	// The managerIds field.
	ManagerIds interface{} `json:"managerIds,omitempty"`
	// The managerSources field.
	ManagerSources interface{} `json:"managerSources,omitempty"`
	// The roleIds field.
	RoleIds interface{} `json:"roleIds,omitempty"`
	// The status field.
	Status interface{} `json:"status,omitempty"`
	UpdatedAt interface{} `json:"updatedAt,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _C1ApiUserV1User C1ApiUserV1User

// NewC1ApiUserV1User instantiates a new C1ApiUserV1User object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewC1ApiUserV1User() *C1ApiUserV1User {
	this := C1ApiUserV1User{}
	return &this
}

// NewC1ApiUserV1UserWithDefaults instantiates a new C1ApiUserV1User object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewC1ApiUserV1UserWithDefaults() *C1ApiUserV1User {
	this := C1ApiUserV1User{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiUserV1User) GetCreatedAt() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiUserV1User) GetCreatedAtOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return &o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *C1ApiUserV1User) HasCreatedAt() bool {
	if o != nil && IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given interface{} and assigns it to the CreatedAt field.
func (o *C1ApiUserV1User) SetCreatedAt(v interface{}) {
	o.CreatedAt = v
}

// GetDelegatedUserId returns the DelegatedUserId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiUserV1User) GetDelegatedUserId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.DelegatedUserId
}

// GetDelegatedUserIdOk returns a tuple with the DelegatedUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiUserV1User) GetDelegatedUserIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.DelegatedUserId) {
		return nil, false
	}
	return &o.DelegatedUserId, true
}

// HasDelegatedUserId returns a boolean if a field has been set.
func (o *C1ApiUserV1User) HasDelegatedUserId() bool {
	if o != nil && IsNil(o.DelegatedUserId) {
		return true
	}

	return false
}

// SetDelegatedUserId gets a reference to the given interface{} and assigns it to the DelegatedUserId field.
func (o *C1ApiUserV1User) SetDelegatedUserId(v interface{}) {
	o.DelegatedUserId = v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiUserV1User) GetDeletedAt() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiUserV1User) GetDeletedAtOk() (*interface{}, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return &o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *C1ApiUserV1User) HasDeletedAt() bool {
	if o != nil && IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given interface{} and assigns it to the DeletedAt field.
func (o *C1ApiUserV1User) SetDeletedAt(v interface{}) {
	o.DeletedAt = v
}

// GetDepartment returns the Department field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiUserV1User) GetDepartment() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Department
}

// GetDepartmentOk returns a tuple with the Department field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiUserV1User) GetDepartmentOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Department) {
		return nil, false
	}
	return &o.Department, true
}

// HasDepartment returns a boolean if a field has been set.
func (o *C1ApiUserV1User) HasDepartment() bool {
	if o != nil && IsNil(o.Department) {
		return true
	}

	return false
}

// SetDepartment gets a reference to the given interface{} and assigns it to the Department field.
func (o *C1ApiUserV1User) SetDepartment(v interface{}) {
	o.Department = v
}

// GetDepartmentSources returns the DepartmentSources field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiUserV1User) GetDepartmentSources() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.DepartmentSources
}

// GetDepartmentSourcesOk returns a tuple with the DepartmentSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiUserV1User) GetDepartmentSourcesOk() (*interface{}, bool) {
	if o == nil || IsNil(o.DepartmentSources) {
		return nil, false
	}
	return &o.DepartmentSources, true
}

// HasDepartmentSources returns a boolean if a field has been set.
func (o *C1ApiUserV1User) HasDepartmentSources() bool {
	if o != nil && IsNil(o.DepartmentSources) {
		return true
	}

	return false
}

// SetDepartmentSources gets a reference to the given interface{} and assigns it to the DepartmentSources field.
func (o *C1ApiUserV1User) SetDepartmentSources(v interface{}) {
	o.DepartmentSources = v
}

// GetDirectoryIds returns the DirectoryIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiUserV1User) GetDirectoryIds() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.DirectoryIds
}

// GetDirectoryIdsOk returns a tuple with the DirectoryIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiUserV1User) GetDirectoryIdsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.DirectoryIds) {
		return nil, false
	}
	return &o.DirectoryIds, true
}

// HasDirectoryIds returns a boolean if a field has been set.
func (o *C1ApiUserV1User) HasDirectoryIds() bool {
	if o != nil && IsNil(o.DirectoryIds) {
		return true
	}

	return false
}

// SetDirectoryIds gets a reference to the given interface{} and assigns it to the DirectoryIds field.
func (o *C1ApiUserV1User) SetDirectoryIds(v interface{}) {
	o.DirectoryIds = v
}

// GetDirectoryStatus returns the DirectoryStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiUserV1User) GetDirectoryStatus() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.DirectoryStatus
}

// GetDirectoryStatusOk returns a tuple with the DirectoryStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiUserV1User) GetDirectoryStatusOk() (*interface{}, bool) {
	if o == nil || IsNil(o.DirectoryStatus) {
		return nil, false
	}
	return &o.DirectoryStatus, true
}

// HasDirectoryStatus returns a boolean if a field has been set.
func (o *C1ApiUserV1User) HasDirectoryStatus() bool {
	if o != nil && IsNil(o.DirectoryStatus) {
		return true
	}

	return false
}

// SetDirectoryStatus gets a reference to the given interface{} and assigns it to the DirectoryStatus field.
func (o *C1ApiUserV1User) SetDirectoryStatus(v interface{}) {
	o.DirectoryStatus = v
}

// GetDirectoryStatusSources returns the DirectoryStatusSources field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiUserV1User) GetDirectoryStatusSources() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.DirectoryStatusSources
}

// GetDirectoryStatusSourcesOk returns a tuple with the DirectoryStatusSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiUserV1User) GetDirectoryStatusSourcesOk() (*interface{}, bool) {
	if o == nil || IsNil(o.DirectoryStatusSources) {
		return nil, false
	}
	return &o.DirectoryStatusSources, true
}

// HasDirectoryStatusSources returns a boolean if a field has been set.
func (o *C1ApiUserV1User) HasDirectoryStatusSources() bool {
	if o != nil && IsNil(o.DirectoryStatusSources) {
		return true
	}

	return false
}

// SetDirectoryStatusSources gets a reference to the given interface{} and assigns it to the DirectoryStatusSources field.
func (o *C1ApiUserV1User) SetDirectoryStatusSources(v interface{}) {
	o.DirectoryStatusSources = v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiUserV1User) GetDisplayName() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiUserV1User) GetDisplayNameOk() (*interface{}, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return &o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *C1ApiUserV1User) HasDisplayName() bool {
	if o != nil && IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given interface{} and assigns it to the DisplayName field.
func (o *C1ApiUserV1User) SetDisplayName(v interface{}) {
	o.DisplayName = v
}

// GetEmail returns the Email field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiUserV1User) GetEmail() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiUserV1User) GetEmailOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return &o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *C1ApiUserV1User) HasEmail() bool {
	if o != nil && IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given interface{} and assigns it to the Email field.
func (o *C1ApiUserV1User) SetEmail(v interface{}) {
	o.Email = v
}

// GetEmploymentStatus returns the EmploymentStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiUserV1User) GetEmploymentStatus() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.EmploymentStatus
}

// GetEmploymentStatusOk returns a tuple with the EmploymentStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiUserV1User) GetEmploymentStatusOk() (*interface{}, bool) {
	if o == nil || IsNil(o.EmploymentStatus) {
		return nil, false
	}
	return &o.EmploymentStatus, true
}

// HasEmploymentStatus returns a boolean if a field has been set.
func (o *C1ApiUserV1User) HasEmploymentStatus() bool {
	if o != nil && IsNil(o.EmploymentStatus) {
		return true
	}

	return false
}

// SetEmploymentStatus gets a reference to the given interface{} and assigns it to the EmploymentStatus field.
func (o *C1ApiUserV1User) SetEmploymentStatus(v interface{}) {
	o.EmploymentStatus = v
}

// GetEmploymentStatusSources returns the EmploymentStatusSources field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiUserV1User) GetEmploymentStatusSources() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.EmploymentStatusSources
}

// GetEmploymentStatusSourcesOk returns a tuple with the EmploymentStatusSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiUserV1User) GetEmploymentStatusSourcesOk() (*interface{}, bool) {
	if o == nil || IsNil(o.EmploymentStatusSources) {
		return nil, false
	}
	return &o.EmploymentStatusSources, true
}

// HasEmploymentStatusSources returns a boolean if a field has been set.
func (o *C1ApiUserV1User) HasEmploymentStatusSources() bool {
	if o != nil && IsNil(o.EmploymentStatusSources) {
		return true
	}

	return false
}

// SetEmploymentStatusSources gets a reference to the given interface{} and assigns it to the EmploymentStatusSources field.
func (o *C1ApiUserV1User) SetEmploymentStatusSources(v interface{}) {
	o.EmploymentStatusSources = v
}

// GetEmploymentType returns the EmploymentType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiUserV1User) GetEmploymentType() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.EmploymentType
}

// GetEmploymentTypeOk returns a tuple with the EmploymentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiUserV1User) GetEmploymentTypeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.EmploymentType) {
		return nil, false
	}
	return &o.EmploymentType, true
}

// HasEmploymentType returns a boolean if a field has been set.
func (o *C1ApiUserV1User) HasEmploymentType() bool {
	if o != nil && IsNil(o.EmploymentType) {
		return true
	}

	return false
}

// SetEmploymentType gets a reference to the given interface{} and assigns it to the EmploymentType field.
func (o *C1ApiUserV1User) SetEmploymentType(v interface{}) {
	o.EmploymentType = v
}

// GetEmploymentTypeSources returns the EmploymentTypeSources field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiUserV1User) GetEmploymentTypeSources() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.EmploymentTypeSources
}

// GetEmploymentTypeSourcesOk returns a tuple with the EmploymentTypeSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiUserV1User) GetEmploymentTypeSourcesOk() (*interface{}, bool) {
	if o == nil || IsNil(o.EmploymentTypeSources) {
		return nil, false
	}
	return &o.EmploymentTypeSources, true
}

// HasEmploymentTypeSources returns a boolean if a field has been set.
func (o *C1ApiUserV1User) HasEmploymentTypeSources() bool {
	if o != nil && IsNil(o.EmploymentTypeSources) {
		return true
	}

	return false
}

// SetEmploymentTypeSources gets a reference to the given interface{} and assigns it to the EmploymentTypeSources field.
func (o *C1ApiUserV1User) SetEmploymentTypeSources(v interface{}) {
	o.EmploymentTypeSources = v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiUserV1User) GetId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiUserV1User) GetIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return &o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *C1ApiUserV1User) HasId() bool {
	if o != nil && IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given interface{} and assigns it to the Id field.
func (o *C1ApiUserV1User) SetId(v interface{}) {
	o.Id = v
}

// GetJobTitle returns the JobTitle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiUserV1User) GetJobTitle() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.JobTitle
}

// GetJobTitleOk returns a tuple with the JobTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiUserV1User) GetJobTitleOk() (*interface{}, bool) {
	if o == nil || IsNil(o.JobTitle) {
		return nil, false
	}
	return &o.JobTitle, true
}

// HasJobTitle returns a boolean if a field has been set.
func (o *C1ApiUserV1User) HasJobTitle() bool {
	if o != nil && IsNil(o.JobTitle) {
		return true
	}

	return false
}

// SetJobTitle gets a reference to the given interface{} and assigns it to the JobTitle field.
func (o *C1ApiUserV1User) SetJobTitle(v interface{}) {
	o.JobTitle = v
}

// GetJobTitleSources returns the JobTitleSources field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiUserV1User) GetJobTitleSources() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.JobTitleSources
}

// GetJobTitleSourcesOk returns a tuple with the JobTitleSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiUserV1User) GetJobTitleSourcesOk() (*interface{}, bool) {
	if o == nil || IsNil(o.JobTitleSources) {
		return nil, false
	}
	return &o.JobTitleSources, true
}

// HasJobTitleSources returns a boolean if a field has been set.
func (o *C1ApiUserV1User) HasJobTitleSources() bool {
	if o != nil && IsNil(o.JobTitleSources) {
		return true
	}

	return false
}

// SetJobTitleSources gets a reference to the given interface{} and assigns it to the JobTitleSources field.
func (o *C1ApiUserV1User) SetJobTitleSources(v interface{}) {
	o.JobTitleSources = v
}

// GetManagerIds returns the ManagerIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiUserV1User) GetManagerIds() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ManagerIds
}

// GetManagerIdsOk returns a tuple with the ManagerIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiUserV1User) GetManagerIdsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ManagerIds) {
		return nil, false
	}
	return &o.ManagerIds, true
}

// HasManagerIds returns a boolean if a field has been set.
func (o *C1ApiUserV1User) HasManagerIds() bool {
	if o != nil && IsNil(o.ManagerIds) {
		return true
	}

	return false
}

// SetManagerIds gets a reference to the given interface{} and assigns it to the ManagerIds field.
func (o *C1ApiUserV1User) SetManagerIds(v interface{}) {
	o.ManagerIds = v
}

// GetManagerSources returns the ManagerSources field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiUserV1User) GetManagerSources() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ManagerSources
}

// GetManagerSourcesOk returns a tuple with the ManagerSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiUserV1User) GetManagerSourcesOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ManagerSources) {
		return nil, false
	}
	return &o.ManagerSources, true
}

// HasManagerSources returns a boolean if a field has been set.
func (o *C1ApiUserV1User) HasManagerSources() bool {
	if o != nil && IsNil(o.ManagerSources) {
		return true
	}

	return false
}

// SetManagerSources gets a reference to the given interface{} and assigns it to the ManagerSources field.
func (o *C1ApiUserV1User) SetManagerSources(v interface{}) {
	o.ManagerSources = v
}

// GetRoleIds returns the RoleIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiUserV1User) GetRoleIds() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.RoleIds
}

// GetRoleIdsOk returns a tuple with the RoleIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiUserV1User) GetRoleIdsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.RoleIds) {
		return nil, false
	}
	return &o.RoleIds, true
}

// HasRoleIds returns a boolean if a field has been set.
func (o *C1ApiUserV1User) HasRoleIds() bool {
	if o != nil && IsNil(o.RoleIds) {
		return true
	}

	return false
}

// SetRoleIds gets a reference to the given interface{} and assigns it to the RoleIds field.
func (o *C1ApiUserV1User) SetRoleIds(v interface{}) {
	o.RoleIds = v
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiUserV1User) GetStatus() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiUserV1User) GetStatusOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return &o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *C1ApiUserV1User) HasStatus() bool {
	if o != nil && IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given interface{} and assigns it to the Status field.
func (o *C1ApiUserV1User) SetStatus(v interface{}) {
	o.Status = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiUserV1User) GetUpdatedAt() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiUserV1User) GetUpdatedAtOk() (*interface{}, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *C1ApiUserV1User) HasUpdatedAt() bool {
	if o != nil && IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given interface{} and assigns it to the UpdatedAt field.
func (o *C1ApiUserV1User) SetUpdatedAt(v interface{}) {
	o.UpdatedAt = v
}

func (o C1ApiUserV1User) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o C1ApiUserV1User) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.DelegatedUserId != nil {
		toSerialize["delegatedUserId"] = o.DelegatedUserId
	}
	if o.DeletedAt != nil {
		toSerialize["deletedAt"] = o.DeletedAt
	}
	if o.Department != nil {
		toSerialize["department"] = o.Department
	}
	if o.DepartmentSources != nil {
		toSerialize["departmentSources"] = o.DepartmentSources
	}
	if o.DirectoryIds != nil {
		toSerialize["directoryIds"] = o.DirectoryIds
	}
	if o.DirectoryStatus != nil {
		toSerialize["directoryStatus"] = o.DirectoryStatus
	}
	if o.DirectoryStatusSources != nil {
		toSerialize["directoryStatusSources"] = o.DirectoryStatusSources
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.EmploymentStatus != nil {
		toSerialize["employmentStatus"] = o.EmploymentStatus
	}
	if o.EmploymentStatusSources != nil {
		toSerialize["employmentStatusSources"] = o.EmploymentStatusSources
	}
	if o.EmploymentType != nil {
		toSerialize["employmentType"] = o.EmploymentType
	}
	if o.EmploymentTypeSources != nil {
		toSerialize["employmentTypeSources"] = o.EmploymentTypeSources
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.JobTitle != nil {
		toSerialize["jobTitle"] = o.JobTitle
	}
	if o.JobTitleSources != nil {
		toSerialize["jobTitleSources"] = o.JobTitleSources
	}
	if o.ManagerIds != nil {
		toSerialize["managerIds"] = o.ManagerIds
	}
	if o.ManagerSources != nil {
		toSerialize["managerSources"] = o.ManagerSources
	}
	if o.RoleIds != nil {
		toSerialize["roleIds"] = o.RoleIds
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *C1ApiUserV1User) UnmarshalJSON(bytes []byte) (err error) {
	varC1ApiUserV1User := _C1ApiUserV1User{}

	if err = json.Unmarshal(bytes, &varC1ApiUserV1User); err == nil {
		*o = C1ApiUserV1User(varC1ApiUserV1User)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "delegatedUserId")
		delete(additionalProperties, "deletedAt")
		delete(additionalProperties, "department")
		delete(additionalProperties, "departmentSources")
		delete(additionalProperties, "directoryIds")
		delete(additionalProperties, "directoryStatus")
		delete(additionalProperties, "directoryStatusSources")
		delete(additionalProperties, "displayName")
		delete(additionalProperties, "email")
		delete(additionalProperties, "employmentStatus")
		delete(additionalProperties, "employmentStatusSources")
		delete(additionalProperties, "employmentType")
		delete(additionalProperties, "employmentTypeSources")
		delete(additionalProperties, "id")
		delete(additionalProperties, "jobTitle")
		delete(additionalProperties, "jobTitleSources")
		delete(additionalProperties, "managerIds")
		delete(additionalProperties, "managerSources")
		delete(additionalProperties, "roleIds")
		delete(additionalProperties, "status")
		delete(additionalProperties, "updatedAt")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableC1ApiUserV1User struct {
	value *C1ApiUserV1User
	isSet bool
}

func (v NullableC1ApiUserV1User) Get() *C1ApiUserV1User {
	return v.value
}

func (v *NullableC1ApiUserV1User) Set(val *C1ApiUserV1User) {
	v.value = val
	v.isSet = true
}

func (v NullableC1ApiUserV1User) IsSet() bool {
	return v.isSet
}

func (v *NullableC1ApiUserV1User) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableC1ApiUserV1User(val *C1ApiUserV1User) *NullableC1ApiUserV1User {
	return &NullableC1ApiUserV1User{value: val, isSet: true}
}

func (v NullableC1ApiUserV1User) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableC1ApiUserV1User) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


