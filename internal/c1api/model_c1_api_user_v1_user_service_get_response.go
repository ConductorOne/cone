/*
ConductorOne API

The ConductorOne API is a HTTP API for managing ConductorOne resources.

API version: 0.1.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c1api

import (
	"encoding/json"
)

// checks if the C1ApiUserV1UserServiceGetResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &C1ApiUserV1UserServiceGetResponse{}

// C1ApiUserV1UserServiceGetResponse The UserServiceGetResponse message.
type C1ApiUserV1UserServiceGetResponse struct {
	// The expanded field.
	Expanded interface{} `json:"expanded,omitempty"`
	UserView *C1ApiUserV1UserView `json:"userView,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _C1ApiUserV1UserServiceGetResponse C1ApiUserV1UserServiceGetResponse

// NewC1ApiUserV1UserServiceGetResponse instantiates a new C1ApiUserV1UserServiceGetResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewC1ApiUserV1UserServiceGetResponse() *C1ApiUserV1UserServiceGetResponse {
	this := C1ApiUserV1UserServiceGetResponse{}
	return &this
}

// NewC1ApiUserV1UserServiceGetResponseWithDefaults instantiates a new C1ApiUserV1UserServiceGetResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewC1ApiUserV1UserServiceGetResponseWithDefaults() *C1ApiUserV1UserServiceGetResponse {
	this := C1ApiUserV1UserServiceGetResponse{}
	return &this
}

// GetExpanded returns the Expanded field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiUserV1UserServiceGetResponse) GetExpanded() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Expanded
}

// GetExpandedOk returns a tuple with the Expanded field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiUserV1UserServiceGetResponse) GetExpandedOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Expanded) {
		return nil, false
	}
	return &o.Expanded, true
}

// HasExpanded returns a boolean if a field has been set.
func (o *C1ApiUserV1UserServiceGetResponse) HasExpanded() bool {
	if o != nil && IsNil(o.Expanded) {
		return true
	}

	return false
}

// SetExpanded gets a reference to the given interface{} and assigns it to the Expanded field.
func (o *C1ApiUserV1UserServiceGetResponse) SetExpanded(v interface{}) {
	o.Expanded = v
}

// GetUserView returns the UserView field value if set, zero value otherwise.
func (o *C1ApiUserV1UserServiceGetResponse) GetUserView() C1ApiUserV1UserView {
	if o == nil || IsNil(o.UserView) {
		var ret C1ApiUserV1UserView
		return ret
	}
	return *o.UserView
}

// GetUserViewOk returns a tuple with the UserView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiUserV1UserServiceGetResponse) GetUserViewOk() (*C1ApiUserV1UserView, bool) {
	if o == nil || IsNil(o.UserView) {
		return nil, false
	}
	return o.UserView, true
}

// HasUserView returns a boolean if a field has been set.
func (o *C1ApiUserV1UserServiceGetResponse) HasUserView() bool {
	if o != nil && !IsNil(o.UserView) {
		return true
	}

	return false
}

// SetUserView gets a reference to the given C1ApiUserV1UserView and assigns it to the UserView field.
func (o *C1ApiUserV1UserServiceGetResponse) SetUserView(v C1ApiUserV1UserView) {
	o.UserView = &v
}

func (o C1ApiUserV1UserServiceGetResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o C1ApiUserV1UserServiceGetResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Expanded != nil {
		toSerialize["expanded"] = o.Expanded
	}
	if !IsNil(o.UserView) {
		toSerialize["userView"] = o.UserView
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *C1ApiUserV1UserServiceGetResponse) UnmarshalJSON(bytes []byte) (err error) {
	varC1ApiUserV1UserServiceGetResponse := _C1ApiUserV1UserServiceGetResponse{}

	if err = json.Unmarshal(bytes, &varC1ApiUserV1UserServiceGetResponse); err == nil {
		*o = C1ApiUserV1UserServiceGetResponse(varC1ApiUserV1UserServiceGetResponse)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "expanded")
		delete(additionalProperties, "userView")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableC1ApiUserV1UserServiceGetResponse struct {
	value *C1ApiUserV1UserServiceGetResponse
	isSet bool
}

func (v NullableC1ApiUserV1UserServiceGetResponse) Get() *C1ApiUserV1UserServiceGetResponse {
	return v.value
}

func (v *NullableC1ApiUserV1UserServiceGetResponse) Set(val *C1ApiUserV1UserServiceGetResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableC1ApiUserV1UserServiceGetResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableC1ApiUserV1UserServiceGetResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableC1ApiUserV1UserServiceGetResponse(val *C1ApiUserV1UserServiceGetResponse) *NullableC1ApiUserV1UserServiceGetResponse {
	return &NullableC1ApiUserV1UserServiceGetResponse{value: val, isSet: true}
}

func (v NullableC1ApiUserV1UserServiceGetResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableC1ApiUserV1UserServiceGetResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


