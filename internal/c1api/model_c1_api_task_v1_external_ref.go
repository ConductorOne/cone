/*
ConductorOne API

The ConductorOne API is a HTTP API for managing ConductorOne resources.

API version: 0.1.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c1api

import (
	"encoding/json"
)

// checks if the C1ApiTaskV1ExternalRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &C1ApiTaskV1ExternalRef{}

// C1ApiTaskV1ExternalRef The ExternalRef message.
type C1ApiTaskV1ExternalRef struct {
	// The externalRefSource field.
	ExternalRefSource *string `json:"externalRefSource,omitempty"`
	// The name field.
	Name *string `json:"name,omitempty"`
	// The url field.
	Url *string `json:"url,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _C1ApiTaskV1ExternalRef C1ApiTaskV1ExternalRef

// NewC1ApiTaskV1ExternalRef instantiates a new C1ApiTaskV1ExternalRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewC1ApiTaskV1ExternalRef() *C1ApiTaskV1ExternalRef {
	this := C1ApiTaskV1ExternalRef{}
	return &this
}

// NewC1ApiTaskV1ExternalRefWithDefaults instantiates a new C1ApiTaskV1ExternalRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewC1ApiTaskV1ExternalRefWithDefaults() *C1ApiTaskV1ExternalRef {
	this := C1ApiTaskV1ExternalRef{}
	return &this
}

// GetExternalRefSource returns the ExternalRefSource field value if set, zero value otherwise.
func (o *C1ApiTaskV1ExternalRef) GetExternalRefSource() string {
	if o == nil || IsNil(o.ExternalRefSource) {
		var ret string
		return ret
	}
	return *o.ExternalRefSource
}

// GetExternalRefSourceOk returns a tuple with the ExternalRefSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1ExternalRef) GetExternalRefSourceOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalRefSource) {
		return nil, false
	}
	return o.ExternalRefSource, true
}

// HasExternalRefSource returns a boolean if a field has been set.
func (o *C1ApiTaskV1ExternalRef) HasExternalRefSource() bool {
	if o != nil && !IsNil(o.ExternalRefSource) {
		return true
	}

	return false
}

// SetExternalRefSource gets a reference to the given string and assigns it to the ExternalRefSource field.
func (o *C1ApiTaskV1ExternalRef) SetExternalRefSource(v string) {
	o.ExternalRefSource = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *C1ApiTaskV1ExternalRef) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1ExternalRef) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *C1ApiTaskV1ExternalRef) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *C1ApiTaskV1ExternalRef) SetName(v string) {
	o.Name = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *C1ApiTaskV1ExternalRef) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1ExternalRef) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *C1ApiTaskV1ExternalRef) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *C1ApiTaskV1ExternalRef) SetUrl(v string) {
	o.Url = &v
}

func (o C1ApiTaskV1ExternalRef) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o C1ApiTaskV1ExternalRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExternalRefSource) {
		toSerialize["externalRefSource"] = o.ExternalRefSource
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *C1ApiTaskV1ExternalRef) UnmarshalJSON(bytes []byte) (err error) {
	varC1ApiTaskV1ExternalRef := _C1ApiTaskV1ExternalRef{}

	if err = json.Unmarshal(bytes, &varC1ApiTaskV1ExternalRef); err == nil {
		*o = C1ApiTaskV1ExternalRef(varC1ApiTaskV1ExternalRef)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "externalRefSource")
		delete(additionalProperties, "name")
		delete(additionalProperties, "url")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableC1ApiTaskV1ExternalRef struct {
	value *C1ApiTaskV1ExternalRef
	isSet bool
}

func (v NullableC1ApiTaskV1ExternalRef) Get() *C1ApiTaskV1ExternalRef {
	return v.value
}

func (v *NullableC1ApiTaskV1ExternalRef) Set(val *C1ApiTaskV1ExternalRef) {
	v.value = val
	v.isSet = true
}

func (v NullableC1ApiTaskV1ExternalRef) IsSet() bool {
	return v.isSet
}

func (v *NullableC1ApiTaskV1ExternalRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableC1ApiTaskV1ExternalRef(val *C1ApiTaskV1ExternalRef) *NullableC1ApiTaskV1ExternalRef {
	return &NullableC1ApiTaskV1ExternalRef{value: val, isSet: true}
}

func (v NullableC1ApiTaskV1ExternalRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableC1ApiTaskV1ExternalRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


