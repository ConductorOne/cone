/*
ConductorOne API

The ConductorOne API is a HTTP API for managing ConductorOne resources.

API version: 0.1.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c1api

import (
	"encoding/json"
)

// checks if the C1ApiPolicyV1AppEntitlementReference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &C1ApiPolicyV1AppEntitlementReference{}

// C1ApiPolicyV1AppEntitlementReference The AppEntitlementReference message.
type C1ApiPolicyV1AppEntitlementReference struct {
	// The appEntitlementId field.
	AppEntitlementId *string `json:"appEntitlementId,omitempty"`
	// The appId field.
	AppId *string `json:"appId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _C1ApiPolicyV1AppEntitlementReference C1ApiPolicyV1AppEntitlementReference

// NewC1ApiPolicyV1AppEntitlementReference instantiates a new C1ApiPolicyV1AppEntitlementReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewC1ApiPolicyV1AppEntitlementReference() *C1ApiPolicyV1AppEntitlementReference {
	this := C1ApiPolicyV1AppEntitlementReference{}
	return &this
}

// NewC1ApiPolicyV1AppEntitlementReferenceWithDefaults instantiates a new C1ApiPolicyV1AppEntitlementReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewC1ApiPolicyV1AppEntitlementReferenceWithDefaults() *C1ApiPolicyV1AppEntitlementReference {
	this := C1ApiPolicyV1AppEntitlementReference{}
	return &this
}

// GetAppEntitlementId returns the AppEntitlementId field value if set, zero value otherwise.
func (o *C1ApiPolicyV1AppEntitlementReference) GetAppEntitlementId() string {
	if o == nil || IsNil(o.AppEntitlementId) {
		var ret string
		return ret
	}
	return *o.AppEntitlementId
}

// GetAppEntitlementIdOk returns a tuple with the AppEntitlementId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiPolicyV1AppEntitlementReference) GetAppEntitlementIdOk() (*string, bool) {
	if o == nil || IsNil(o.AppEntitlementId) {
		return nil, false
	}
	return o.AppEntitlementId, true
}

// HasAppEntitlementId returns a boolean if a field has been set.
func (o *C1ApiPolicyV1AppEntitlementReference) HasAppEntitlementId() bool {
	if o != nil && !IsNil(o.AppEntitlementId) {
		return true
	}

	return false
}

// SetAppEntitlementId gets a reference to the given string and assigns it to the AppEntitlementId field.
func (o *C1ApiPolicyV1AppEntitlementReference) SetAppEntitlementId(v string) {
	o.AppEntitlementId = &v
}

// GetAppId returns the AppId field value if set, zero value otherwise.
func (o *C1ApiPolicyV1AppEntitlementReference) GetAppId() string {
	if o == nil || IsNil(o.AppId) {
		var ret string
		return ret
	}
	return *o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiPolicyV1AppEntitlementReference) GetAppIdOk() (*string, bool) {
	if o == nil || IsNil(o.AppId) {
		return nil, false
	}
	return o.AppId, true
}

// HasAppId returns a boolean if a field has been set.
func (o *C1ApiPolicyV1AppEntitlementReference) HasAppId() bool {
	if o != nil && !IsNil(o.AppId) {
		return true
	}

	return false
}

// SetAppId gets a reference to the given string and assigns it to the AppId field.
func (o *C1ApiPolicyV1AppEntitlementReference) SetAppId(v string) {
	o.AppId = &v
}

func (o C1ApiPolicyV1AppEntitlementReference) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o C1ApiPolicyV1AppEntitlementReference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AppEntitlementId) {
		toSerialize["appEntitlementId"] = o.AppEntitlementId
	}
	if !IsNil(o.AppId) {
		toSerialize["appId"] = o.AppId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *C1ApiPolicyV1AppEntitlementReference) UnmarshalJSON(bytes []byte) (err error) {
	varC1ApiPolicyV1AppEntitlementReference := _C1ApiPolicyV1AppEntitlementReference{}

	if err = json.Unmarshal(bytes, &varC1ApiPolicyV1AppEntitlementReference); err == nil {
		*o = C1ApiPolicyV1AppEntitlementReference(varC1ApiPolicyV1AppEntitlementReference)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "appEntitlementId")
		delete(additionalProperties, "appId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableC1ApiPolicyV1AppEntitlementReference struct {
	value *C1ApiPolicyV1AppEntitlementReference
	isSet bool
}

func (v NullableC1ApiPolicyV1AppEntitlementReference) Get() *C1ApiPolicyV1AppEntitlementReference {
	return v.value
}

func (v *NullableC1ApiPolicyV1AppEntitlementReference) Set(val *C1ApiPolicyV1AppEntitlementReference) {
	v.value = val
	v.isSet = true
}

func (v NullableC1ApiPolicyV1AppEntitlementReference) IsSet() bool {
	return v.isSet
}

func (v *NullableC1ApiPolicyV1AppEntitlementReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableC1ApiPolicyV1AppEntitlementReference(val *C1ApiPolicyV1AppEntitlementReference) *NullableC1ApiPolicyV1AppEntitlementReference {
	return &NullableC1ApiPolicyV1AppEntitlementReference{value: val, isSet: true}
}

func (v NullableC1ApiPolicyV1AppEntitlementReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableC1ApiPolicyV1AppEntitlementReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


