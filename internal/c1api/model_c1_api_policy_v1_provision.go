/*
ConductorOne API

The ConductorOne API is a HTTP API for managing ConductorOne resources.

API version: 0.1.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c1api

import (
	"encoding/json"
)

// checks if the C1ApiPolicyV1Provision type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &C1ApiPolicyV1Provision{}

// C1ApiPolicyV1Provision The Provision message.
type C1ApiPolicyV1Provision struct {
	// The assigned field.
	Assigned *bool `json:"assigned,omitempty"`
	ProvisionPolicy *C1ApiPolicyV1ProvisionPolicy `json:"provisionPolicy,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _C1ApiPolicyV1Provision C1ApiPolicyV1Provision

// NewC1ApiPolicyV1Provision instantiates a new C1ApiPolicyV1Provision object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewC1ApiPolicyV1Provision() *C1ApiPolicyV1Provision {
	this := C1ApiPolicyV1Provision{}
	return &this
}

// NewC1ApiPolicyV1ProvisionWithDefaults instantiates a new C1ApiPolicyV1Provision object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewC1ApiPolicyV1ProvisionWithDefaults() *C1ApiPolicyV1Provision {
	this := C1ApiPolicyV1Provision{}
	return &this
}

// GetAssigned returns the Assigned field value if set, zero value otherwise.
func (o *C1ApiPolicyV1Provision) GetAssigned() bool {
	if o == nil || IsNil(o.Assigned) {
		var ret bool
		return ret
	}
	return *o.Assigned
}

// GetAssignedOk returns a tuple with the Assigned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiPolicyV1Provision) GetAssignedOk() (*bool, bool) {
	if o == nil || IsNil(o.Assigned) {
		return nil, false
	}
	return o.Assigned, true
}

// HasAssigned returns a boolean if a field has been set.
func (o *C1ApiPolicyV1Provision) HasAssigned() bool {
	if o != nil && !IsNil(o.Assigned) {
		return true
	}

	return false
}

// SetAssigned gets a reference to the given bool and assigns it to the Assigned field.
func (o *C1ApiPolicyV1Provision) SetAssigned(v bool) {
	o.Assigned = &v
}

// GetProvisionPolicy returns the ProvisionPolicy field value if set, zero value otherwise.
func (o *C1ApiPolicyV1Provision) GetProvisionPolicy() C1ApiPolicyV1ProvisionPolicy {
	if o == nil || IsNil(o.ProvisionPolicy) {
		var ret C1ApiPolicyV1ProvisionPolicy
		return ret
	}
	return *o.ProvisionPolicy
}

// GetProvisionPolicyOk returns a tuple with the ProvisionPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiPolicyV1Provision) GetProvisionPolicyOk() (*C1ApiPolicyV1ProvisionPolicy, bool) {
	if o == nil || IsNil(o.ProvisionPolicy) {
		return nil, false
	}
	return o.ProvisionPolicy, true
}

// HasProvisionPolicy returns a boolean if a field has been set.
func (o *C1ApiPolicyV1Provision) HasProvisionPolicy() bool {
	if o != nil && !IsNil(o.ProvisionPolicy) {
		return true
	}

	return false
}

// SetProvisionPolicy gets a reference to the given C1ApiPolicyV1ProvisionPolicy and assigns it to the ProvisionPolicy field.
func (o *C1ApiPolicyV1Provision) SetProvisionPolicy(v C1ApiPolicyV1ProvisionPolicy) {
	o.ProvisionPolicy = &v
}

func (o C1ApiPolicyV1Provision) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o C1ApiPolicyV1Provision) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Assigned) {
		toSerialize["assigned"] = o.Assigned
	}
	if !IsNil(o.ProvisionPolicy) {
		toSerialize["provisionPolicy"] = o.ProvisionPolicy
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *C1ApiPolicyV1Provision) UnmarshalJSON(bytes []byte) (err error) {
	varC1ApiPolicyV1Provision := _C1ApiPolicyV1Provision{}

	if err = json.Unmarshal(bytes, &varC1ApiPolicyV1Provision); err == nil {
		*o = C1ApiPolicyV1Provision(varC1ApiPolicyV1Provision)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "assigned")
		delete(additionalProperties, "provisionPolicy")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableC1ApiPolicyV1Provision struct {
	value *C1ApiPolicyV1Provision
	isSet bool
}

func (v NullableC1ApiPolicyV1Provision) Get() *C1ApiPolicyV1Provision {
	return v.value
}

func (v *NullableC1ApiPolicyV1Provision) Set(val *C1ApiPolicyV1Provision) {
	v.value = val
	v.isSet = true
}

func (v NullableC1ApiPolicyV1Provision) IsSet() bool {
	return v.isSet
}

func (v *NullableC1ApiPolicyV1Provision) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableC1ApiPolicyV1Provision(val *C1ApiPolicyV1Provision) *NullableC1ApiPolicyV1Provision {
	return &NullableC1ApiPolicyV1Provision{value: val, isSet: true}
}

func (v NullableC1ApiPolicyV1Provision) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableC1ApiPolicyV1Provision) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


