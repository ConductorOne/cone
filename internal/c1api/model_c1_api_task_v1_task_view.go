/*
ConductorOne API

The ConductorOne API is a HTTP API for managing ConductorOne resources.

API version: 0.1.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c1api

import (
	"encoding/json"
)

// checks if the C1ApiTaskV1TaskView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &C1ApiTaskV1TaskView{}

// C1ApiTaskV1TaskView The TaskView message.
type C1ApiTaskV1TaskView struct {
	// The accessReviewPath field.
	AccessReviewPath *string `json:"accessReviewPath,omitempty"`
	// The appPath field.
	AppPath *string `json:"appPath,omitempty"`
	// The appUserPath field.
	AppUserPath *string `json:"appUserPath,omitempty"`
	// The createdByUserPath field.
	CreatedByUserPath *string `json:"createdByUserPath,omitempty"`
	// The entitlementsPath field.
	EntitlementsPath *string `json:"entitlementsPath,omitempty"`
	// The identityUserPath field.
	IdentityUserPath *string `json:"identityUserPath,omitempty"`
	// The stepApproversPath field.
	StepApproversPath *string `json:"stepApproversPath,omitempty"`
	Task *C1ApiTaskV1Task `json:"task,omitempty"`
	// The userPath field.
	UserPath *string `json:"userPath,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _C1ApiTaskV1TaskView C1ApiTaskV1TaskView

// NewC1ApiTaskV1TaskView instantiates a new C1ApiTaskV1TaskView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewC1ApiTaskV1TaskView() *C1ApiTaskV1TaskView {
	this := C1ApiTaskV1TaskView{}
	return &this
}

// NewC1ApiTaskV1TaskViewWithDefaults instantiates a new C1ApiTaskV1TaskView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewC1ApiTaskV1TaskViewWithDefaults() *C1ApiTaskV1TaskView {
	this := C1ApiTaskV1TaskView{}
	return &this
}

// GetAccessReviewPath returns the AccessReviewPath field value if set, zero value otherwise.
func (o *C1ApiTaskV1TaskView) GetAccessReviewPath() string {
	if o == nil || IsNil(o.AccessReviewPath) {
		var ret string
		return ret
	}
	return *o.AccessReviewPath
}

// GetAccessReviewPathOk returns a tuple with the AccessReviewPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1TaskView) GetAccessReviewPathOk() (*string, bool) {
	if o == nil || IsNil(o.AccessReviewPath) {
		return nil, false
	}
	return o.AccessReviewPath, true
}

// HasAccessReviewPath returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskView) HasAccessReviewPath() bool {
	if o != nil && !IsNil(o.AccessReviewPath) {
		return true
	}

	return false
}

// SetAccessReviewPath gets a reference to the given string and assigns it to the AccessReviewPath field.
func (o *C1ApiTaskV1TaskView) SetAccessReviewPath(v string) {
	o.AccessReviewPath = &v
}

// GetAppPath returns the AppPath field value if set, zero value otherwise.
func (o *C1ApiTaskV1TaskView) GetAppPath() string {
	if o == nil || IsNil(o.AppPath) {
		var ret string
		return ret
	}
	return *o.AppPath
}

// GetAppPathOk returns a tuple with the AppPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1TaskView) GetAppPathOk() (*string, bool) {
	if o == nil || IsNil(o.AppPath) {
		return nil, false
	}
	return o.AppPath, true
}

// HasAppPath returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskView) HasAppPath() bool {
	if o != nil && !IsNil(o.AppPath) {
		return true
	}

	return false
}

// SetAppPath gets a reference to the given string and assigns it to the AppPath field.
func (o *C1ApiTaskV1TaskView) SetAppPath(v string) {
	o.AppPath = &v
}

// GetAppUserPath returns the AppUserPath field value if set, zero value otherwise.
func (o *C1ApiTaskV1TaskView) GetAppUserPath() string {
	if o == nil || IsNil(o.AppUserPath) {
		var ret string
		return ret
	}
	return *o.AppUserPath
}

// GetAppUserPathOk returns a tuple with the AppUserPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1TaskView) GetAppUserPathOk() (*string, bool) {
	if o == nil || IsNil(o.AppUserPath) {
		return nil, false
	}
	return o.AppUserPath, true
}

// HasAppUserPath returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskView) HasAppUserPath() bool {
	if o != nil && !IsNil(o.AppUserPath) {
		return true
	}

	return false
}

// SetAppUserPath gets a reference to the given string and assigns it to the AppUserPath field.
func (o *C1ApiTaskV1TaskView) SetAppUserPath(v string) {
	o.AppUserPath = &v
}

// GetCreatedByUserPath returns the CreatedByUserPath field value if set, zero value otherwise.
func (o *C1ApiTaskV1TaskView) GetCreatedByUserPath() string {
	if o == nil || IsNil(o.CreatedByUserPath) {
		var ret string
		return ret
	}
	return *o.CreatedByUserPath
}

// GetCreatedByUserPathOk returns a tuple with the CreatedByUserPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1TaskView) GetCreatedByUserPathOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedByUserPath) {
		return nil, false
	}
	return o.CreatedByUserPath, true
}

// HasCreatedByUserPath returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskView) HasCreatedByUserPath() bool {
	if o != nil && !IsNil(o.CreatedByUserPath) {
		return true
	}

	return false
}

// SetCreatedByUserPath gets a reference to the given string and assigns it to the CreatedByUserPath field.
func (o *C1ApiTaskV1TaskView) SetCreatedByUserPath(v string) {
	o.CreatedByUserPath = &v
}

// GetEntitlementsPath returns the EntitlementsPath field value if set, zero value otherwise.
func (o *C1ApiTaskV1TaskView) GetEntitlementsPath() string {
	if o == nil || IsNil(o.EntitlementsPath) {
		var ret string
		return ret
	}
	return *o.EntitlementsPath
}

// GetEntitlementsPathOk returns a tuple with the EntitlementsPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1TaskView) GetEntitlementsPathOk() (*string, bool) {
	if o == nil || IsNil(o.EntitlementsPath) {
		return nil, false
	}
	return o.EntitlementsPath, true
}

// HasEntitlementsPath returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskView) HasEntitlementsPath() bool {
	if o != nil && !IsNil(o.EntitlementsPath) {
		return true
	}

	return false
}

// SetEntitlementsPath gets a reference to the given string and assigns it to the EntitlementsPath field.
func (o *C1ApiTaskV1TaskView) SetEntitlementsPath(v string) {
	o.EntitlementsPath = &v
}

// GetIdentityUserPath returns the IdentityUserPath field value if set, zero value otherwise.
func (o *C1ApiTaskV1TaskView) GetIdentityUserPath() string {
	if o == nil || IsNil(o.IdentityUserPath) {
		var ret string
		return ret
	}
	return *o.IdentityUserPath
}

// GetIdentityUserPathOk returns a tuple with the IdentityUserPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1TaskView) GetIdentityUserPathOk() (*string, bool) {
	if o == nil || IsNil(o.IdentityUserPath) {
		return nil, false
	}
	return o.IdentityUserPath, true
}

// HasIdentityUserPath returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskView) HasIdentityUserPath() bool {
	if o != nil && !IsNil(o.IdentityUserPath) {
		return true
	}

	return false
}

// SetIdentityUserPath gets a reference to the given string and assigns it to the IdentityUserPath field.
func (o *C1ApiTaskV1TaskView) SetIdentityUserPath(v string) {
	o.IdentityUserPath = &v
}

// GetStepApproversPath returns the StepApproversPath field value if set, zero value otherwise.
func (o *C1ApiTaskV1TaskView) GetStepApproversPath() string {
	if o == nil || IsNil(o.StepApproversPath) {
		var ret string
		return ret
	}
	return *o.StepApproversPath
}

// GetStepApproversPathOk returns a tuple with the StepApproversPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1TaskView) GetStepApproversPathOk() (*string, bool) {
	if o == nil || IsNil(o.StepApproversPath) {
		return nil, false
	}
	return o.StepApproversPath, true
}

// HasStepApproversPath returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskView) HasStepApproversPath() bool {
	if o != nil && !IsNil(o.StepApproversPath) {
		return true
	}

	return false
}

// SetStepApproversPath gets a reference to the given string and assigns it to the StepApproversPath field.
func (o *C1ApiTaskV1TaskView) SetStepApproversPath(v string) {
	o.StepApproversPath = &v
}

// GetTask returns the Task field value if set, zero value otherwise.
func (o *C1ApiTaskV1TaskView) GetTask() C1ApiTaskV1Task {
	if o == nil || IsNil(o.Task) {
		var ret C1ApiTaskV1Task
		return ret
	}
	return *o.Task
}

// GetTaskOk returns a tuple with the Task field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1TaskView) GetTaskOk() (*C1ApiTaskV1Task, bool) {
	if o == nil || IsNil(o.Task) {
		return nil, false
	}
	return o.Task, true
}

// HasTask returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskView) HasTask() bool {
	if o != nil && !IsNil(o.Task) {
		return true
	}

	return false
}

// SetTask gets a reference to the given C1ApiTaskV1Task and assigns it to the Task field.
func (o *C1ApiTaskV1TaskView) SetTask(v C1ApiTaskV1Task) {
	o.Task = &v
}

// GetUserPath returns the UserPath field value if set, zero value otherwise.
func (o *C1ApiTaskV1TaskView) GetUserPath() string {
	if o == nil || IsNil(o.UserPath) {
		var ret string
		return ret
	}
	return *o.UserPath
}

// GetUserPathOk returns a tuple with the UserPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1TaskView) GetUserPathOk() (*string, bool) {
	if o == nil || IsNil(o.UserPath) {
		return nil, false
	}
	return o.UserPath, true
}

// HasUserPath returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskView) HasUserPath() bool {
	if o != nil && !IsNil(o.UserPath) {
		return true
	}

	return false
}

// SetUserPath gets a reference to the given string and assigns it to the UserPath field.
func (o *C1ApiTaskV1TaskView) SetUserPath(v string) {
	o.UserPath = &v
}

func (o C1ApiTaskV1TaskView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o C1ApiTaskV1TaskView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessReviewPath) {
		toSerialize["accessReviewPath"] = o.AccessReviewPath
	}
	if !IsNil(o.AppPath) {
		toSerialize["appPath"] = o.AppPath
	}
	if !IsNil(o.AppUserPath) {
		toSerialize["appUserPath"] = o.AppUserPath
	}
	if !IsNil(o.CreatedByUserPath) {
		toSerialize["createdByUserPath"] = o.CreatedByUserPath
	}
	if !IsNil(o.EntitlementsPath) {
		toSerialize["entitlementsPath"] = o.EntitlementsPath
	}
	if !IsNil(o.IdentityUserPath) {
		toSerialize["identityUserPath"] = o.IdentityUserPath
	}
	if !IsNil(o.StepApproversPath) {
		toSerialize["stepApproversPath"] = o.StepApproversPath
	}
	if !IsNil(o.Task) {
		toSerialize["task"] = o.Task
	}
	if !IsNil(o.UserPath) {
		toSerialize["userPath"] = o.UserPath
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *C1ApiTaskV1TaskView) UnmarshalJSON(bytes []byte) (err error) {
	varC1ApiTaskV1TaskView := _C1ApiTaskV1TaskView{}

	if err = json.Unmarshal(bytes, &varC1ApiTaskV1TaskView); err == nil {
		*o = C1ApiTaskV1TaskView(varC1ApiTaskV1TaskView)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "accessReviewPath")
		delete(additionalProperties, "appPath")
		delete(additionalProperties, "appUserPath")
		delete(additionalProperties, "createdByUserPath")
		delete(additionalProperties, "entitlementsPath")
		delete(additionalProperties, "identityUserPath")
		delete(additionalProperties, "stepApproversPath")
		delete(additionalProperties, "task")
		delete(additionalProperties, "userPath")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableC1ApiTaskV1TaskView struct {
	value *C1ApiTaskV1TaskView
	isSet bool
}

func (v NullableC1ApiTaskV1TaskView) Get() *C1ApiTaskV1TaskView {
	return v.value
}

func (v *NullableC1ApiTaskV1TaskView) Set(val *C1ApiTaskV1TaskView) {
	v.value = val
	v.isSet = true
}

func (v NullableC1ApiTaskV1TaskView) IsSet() bool {
	return v.isSet
}

func (v *NullableC1ApiTaskV1TaskView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableC1ApiTaskV1TaskView(val *C1ApiTaskV1TaskView) *NullableC1ApiTaskV1TaskView {
	return &NullableC1ApiTaskV1TaskView{value: val, isSet: true}
}

func (v NullableC1ApiTaskV1TaskView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableC1ApiTaskV1TaskView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


