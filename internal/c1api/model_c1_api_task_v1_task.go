/*
ConductorOne API

The ConductorOne API is a HTTP API for managing ConductorOne resources.

API version: 0.1.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c1api

import (
	"encoding/json"
	"time"
)

// checks if the C1ApiTaskV1Task type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &C1ApiTaskV1Task{}

// C1ApiTaskV1Task The Task message.
type C1ApiTaskV1Task struct {
	// The actions field.
	Actions []string `json:"actions,omitempty"`
	// The analysisId field.
	AnalysisId *string `json:"analysisId,omitempty"`
	// The annotations field.
	Annotations []C1ApiAppV1AppResourceServiceGetResponseExpandedInner `json:"annotations,omitempty"`
	// The commentCount field.
	CommentCount *float32 `json:"commentCount,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// The createdByUserId field.
	CreatedByUserId *string `json:"createdByUserId,omitempty"`
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	// The description field.
	Description *string `json:"description,omitempty"`
	// The displayName field.
	DisplayName *string `json:"displayName,omitempty"`
	// The externalRefs field.
	ExternalRefs []C1ApiTaskV1ExternalRef `json:"externalRefs,omitempty"`
	//  General Metadata 
	Id *string `json:"id,omitempty"`
	// The numericId field.
	NumericId *string `json:"numericId,omitempty"`
	Policy *C1ApiPolicyV1PolicyInstance `json:"policy,omitempty"`
	// The processing field.
	Processing *string `json:"processing,omitempty"`
	//  State 
	State *string `json:"state,omitempty"`
	// The stepApproverIds field.
	StepApproverIds []string `json:"stepApproverIds,omitempty"`
	Type *C1ApiTaskV1TaskType `json:"type,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	//  External IDS 
	UserId *string `json:"userId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _C1ApiTaskV1Task C1ApiTaskV1Task

// NewC1ApiTaskV1Task instantiates a new C1ApiTaskV1Task object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewC1ApiTaskV1Task() *C1ApiTaskV1Task {
	this := C1ApiTaskV1Task{}
	return &this
}

// NewC1ApiTaskV1TaskWithDefaults instantiates a new C1ApiTaskV1Task object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewC1ApiTaskV1TaskWithDefaults() *C1ApiTaskV1Task {
	this := C1ApiTaskV1Task{}
	return &this
}

// GetActions returns the Actions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiTaskV1Task) GetActions() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiTaskV1Task) GetActionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Actions) {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *C1ApiTaskV1Task) HasActions() bool {
	if o != nil && IsNil(o.Actions) {
		return true
	}

	return false
}

// SetActions gets a reference to the given []string and assigns it to the Actions field.
func (o *C1ApiTaskV1Task) SetActions(v []string) {
	o.Actions = v
}

// GetAnalysisId returns the AnalysisId field value if set, zero value otherwise.
func (o *C1ApiTaskV1Task) GetAnalysisId() string {
	if o == nil || IsNil(o.AnalysisId) {
		var ret string
		return ret
	}
	return *o.AnalysisId
}

// GetAnalysisIdOk returns a tuple with the AnalysisId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1Task) GetAnalysisIdOk() (*string, bool) {
	if o == nil || IsNil(o.AnalysisId) {
		return nil, false
	}
	return o.AnalysisId, true
}

// HasAnalysisId returns a boolean if a field has been set.
func (o *C1ApiTaskV1Task) HasAnalysisId() bool {
	if o != nil && !IsNil(o.AnalysisId) {
		return true
	}

	return false
}

// SetAnalysisId gets a reference to the given string and assigns it to the AnalysisId field.
func (o *C1ApiTaskV1Task) SetAnalysisId(v string) {
	o.AnalysisId = &v
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiTaskV1Task) GetAnnotations() []C1ApiAppV1AppResourceServiceGetResponseExpandedInner {
	if o == nil {
		var ret []C1ApiAppV1AppResourceServiceGetResponseExpandedInner
		return ret
	}
	return o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiTaskV1Task) GetAnnotationsOk() ([]C1ApiAppV1AppResourceServiceGetResponseExpandedInner, bool) {
	if o == nil || IsNil(o.Annotations) {
		return nil, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *C1ApiTaskV1Task) HasAnnotations() bool {
	if o != nil && IsNil(o.Annotations) {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given []C1ApiAppV1AppResourceServiceGetResponseExpandedInner and assigns it to the Annotations field.
func (o *C1ApiTaskV1Task) SetAnnotations(v []C1ApiAppV1AppResourceServiceGetResponseExpandedInner) {
	o.Annotations = v
}

// GetCommentCount returns the CommentCount field value if set, zero value otherwise.
func (o *C1ApiTaskV1Task) GetCommentCount() float32 {
	if o == nil || IsNil(o.CommentCount) {
		var ret float32
		return ret
	}
	return *o.CommentCount
}

// GetCommentCountOk returns a tuple with the CommentCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1Task) GetCommentCountOk() (*float32, bool) {
	if o == nil || IsNil(o.CommentCount) {
		return nil, false
	}
	return o.CommentCount, true
}

// HasCommentCount returns a boolean if a field has been set.
func (o *C1ApiTaskV1Task) HasCommentCount() bool {
	if o != nil && !IsNil(o.CommentCount) {
		return true
	}

	return false
}

// SetCommentCount gets a reference to the given float32 and assigns it to the CommentCount field.
func (o *C1ApiTaskV1Task) SetCommentCount(v float32) {
	o.CommentCount = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *C1ApiTaskV1Task) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1Task) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *C1ApiTaskV1Task) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *C1ApiTaskV1Task) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetCreatedByUserId returns the CreatedByUserId field value if set, zero value otherwise.
func (o *C1ApiTaskV1Task) GetCreatedByUserId() string {
	if o == nil || IsNil(o.CreatedByUserId) {
		var ret string
		return ret
	}
	return *o.CreatedByUserId
}

// GetCreatedByUserIdOk returns a tuple with the CreatedByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1Task) GetCreatedByUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedByUserId) {
		return nil, false
	}
	return o.CreatedByUserId, true
}

// HasCreatedByUserId returns a boolean if a field has been set.
func (o *C1ApiTaskV1Task) HasCreatedByUserId() bool {
	if o != nil && !IsNil(o.CreatedByUserId) {
		return true
	}

	return false
}

// SetCreatedByUserId gets a reference to the given string and assigns it to the CreatedByUserId field.
func (o *C1ApiTaskV1Task) SetCreatedByUserId(v string) {
	o.CreatedByUserId = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *C1ApiTaskV1Task) GetDeletedAt() time.Time {
	if o == nil || IsNil(o.DeletedAt) {
		var ret time.Time
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1Task) GetDeletedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *C1ApiTaskV1Task) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given time.Time and assigns it to the DeletedAt field.
func (o *C1ApiTaskV1Task) SetDeletedAt(v time.Time) {
	o.DeletedAt = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *C1ApiTaskV1Task) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1Task) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *C1ApiTaskV1Task) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *C1ApiTaskV1Task) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *C1ApiTaskV1Task) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1Task) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *C1ApiTaskV1Task) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *C1ApiTaskV1Task) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetExternalRefs returns the ExternalRefs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiTaskV1Task) GetExternalRefs() []C1ApiTaskV1ExternalRef {
	if o == nil {
		var ret []C1ApiTaskV1ExternalRef
		return ret
	}
	return o.ExternalRefs
}

// GetExternalRefsOk returns a tuple with the ExternalRefs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiTaskV1Task) GetExternalRefsOk() ([]C1ApiTaskV1ExternalRef, bool) {
	if o == nil || IsNil(o.ExternalRefs) {
		return nil, false
	}
	return o.ExternalRefs, true
}

// HasExternalRefs returns a boolean if a field has been set.
func (o *C1ApiTaskV1Task) HasExternalRefs() bool {
	if o != nil && IsNil(o.ExternalRefs) {
		return true
	}

	return false
}

// SetExternalRefs gets a reference to the given []C1ApiTaskV1ExternalRef and assigns it to the ExternalRefs field.
func (o *C1ApiTaskV1Task) SetExternalRefs(v []C1ApiTaskV1ExternalRef) {
	o.ExternalRefs = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *C1ApiTaskV1Task) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1Task) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *C1ApiTaskV1Task) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *C1ApiTaskV1Task) SetId(v string) {
	o.Id = &v
}

// GetNumericId returns the NumericId field value if set, zero value otherwise.
func (o *C1ApiTaskV1Task) GetNumericId() string {
	if o == nil || IsNil(o.NumericId) {
		var ret string
		return ret
	}
	return *o.NumericId
}

// GetNumericIdOk returns a tuple with the NumericId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1Task) GetNumericIdOk() (*string, bool) {
	if o == nil || IsNil(o.NumericId) {
		return nil, false
	}
	return o.NumericId, true
}

// HasNumericId returns a boolean if a field has been set.
func (o *C1ApiTaskV1Task) HasNumericId() bool {
	if o != nil && !IsNil(o.NumericId) {
		return true
	}

	return false
}

// SetNumericId gets a reference to the given string and assigns it to the NumericId field.
func (o *C1ApiTaskV1Task) SetNumericId(v string) {
	o.NumericId = &v
}

// GetPolicy returns the Policy field value if set, zero value otherwise.
func (o *C1ApiTaskV1Task) GetPolicy() C1ApiPolicyV1PolicyInstance {
	if o == nil || IsNil(o.Policy) {
		var ret C1ApiPolicyV1PolicyInstance
		return ret
	}
	return *o.Policy
}

// GetPolicyOk returns a tuple with the Policy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1Task) GetPolicyOk() (*C1ApiPolicyV1PolicyInstance, bool) {
	if o == nil || IsNil(o.Policy) {
		return nil, false
	}
	return o.Policy, true
}

// HasPolicy returns a boolean if a field has been set.
func (o *C1ApiTaskV1Task) HasPolicy() bool {
	if o != nil && !IsNil(o.Policy) {
		return true
	}

	return false
}

// SetPolicy gets a reference to the given C1ApiPolicyV1PolicyInstance and assigns it to the Policy field.
func (o *C1ApiTaskV1Task) SetPolicy(v C1ApiPolicyV1PolicyInstance) {
	o.Policy = &v
}

// GetProcessing returns the Processing field value if set, zero value otherwise.
func (o *C1ApiTaskV1Task) GetProcessing() string {
	if o == nil || IsNil(o.Processing) {
		var ret string
		return ret
	}
	return *o.Processing
}

// GetProcessingOk returns a tuple with the Processing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1Task) GetProcessingOk() (*string, bool) {
	if o == nil || IsNil(o.Processing) {
		return nil, false
	}
	return o.Processing, true
}

// HasProcessing returns a boolean if a field has been set.
func (o *C1ApiTaskV1Task) HasProcessing() bool {
	if o != nil && !IsNil(o.Processing) {
		return true
	}

	return false
}

// SetProcessing gets a reference to the given string and assigns it to the Processing field.
func (o *C1ApiTaskV1Task) SetProcessing(v string) {
	o.Processing = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *C1ApiTaskV1Task) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1Task) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *C1ApiTaskV1Task) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *C1ApiTaskV1Task) SetState(v string) {
	o.State = &v
}

// GetStepApproverIds returns the StepApproverIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiTaskV1Task) GetStepApproverIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.StepApproverIds
}

// GetStepApproverIdsOk returns a tuple with the StepApproverIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiTaskV1Task) GetStepApproverIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.StepApproverIds) {
		return nil, false
	}
	return o.StepApproverIds, true
}

// HasStepApproverIds returns a boolean if a field has been set.
func (o *C1ApiTaskV1Task) HasStepApproverIds() bool {
	if o != nil && IsNil(o.StepApproverIds) {
		return true
	}

	return false
}

// SetStepApproverIds gets a reference to the given []string and assigns it to the StepApproverIds field.
func (o *C1ApiTaskV1Task) SetStepApproverIds(v []string) {
	o.StepApproverIds = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *C1ApiTaskV1Task) GetType() C1ApiTaskV1TaskType {
	if o == nil || IsNil(o.Type) {
		var ret C1ApiTaskV1TaskType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1Task) GetTypeOk() (*C1ApiTaskV1TaskType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *C1ApiTaskV1Task) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given C1ApiTaskV1TaskType and assigns it to the Type field.
func (o *C1ApiTaskV1Task) SetType(v C1ApiTaskV1TaskType) {
	o.Type = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *C1ApiTaskV1Task) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1Task) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *C1ApiTaskV1Task) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *C1ApiTaskV1Task) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *C1ApiTaskV1Task) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1Task) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *C1ApiTaskV1Task) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *C1ApiTaskV1Task) SetUserId(v string) {
	o.UserId = &v
}

func (o C1ApiTaskV1Task) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o C1ApiTaskV1Task) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Actions != nil {
		toSerialize["actions"] = o.Actions
	}
	if !IsNil(o.AnalysisId) {
		toSerialize["analysisId"] = o.AnalysisId
	}
	if o.Annotations != nil {
		toSerialize["annotations"] = o.Annotations
	}
	if !IsNil(o.CommentCount) {
		toSerialize["commentCount"] = o.CommentCount
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.CreatedByUserId) {
		toSerialize["createdByUserId"] = o.CreatedByUserId
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deletedAt"] = o.DeletedAt
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.ExternalRefs != nil {
		toSerialize["externalRefs"] = o.ExternalRefs
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.NumericId) {
		toSerialize["numericId"] = o.NumericId
	}
	if !IsNil(o.Policy) {
		toSerialize["policy"] = o.Policy
	}
	if !IsNil(o.Processing) {
		toSerialize["processing"] = o.Processing
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if o.StepApproverIds != nil {
		toSerialize["stepApproverIds"] = o.StepApproverIds
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *C1ApiTaskV1Task) UnmarshalJSON(bytes []byte) (err error) {
	varC1ApiTaskV1Task := _C1ApiTaskV1Task{}

	if err = json.Unmarshal(bytes, &varC1ApiTaskV1Task); err == nil {
		*o = C1ApiTaskV1Task(varC1ApiTaskV1Task)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "actions")
		delete(additionalProperties, "analysisId")
		delete(additionalProperties, "annotations")
		delete(additionalProperties, "commentCount")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "createdByUserId")
		delete(additionalProperties, "deletedAt")
		delete(additionalProperties, "description")
		delete(additionalProperties, "displayName")
		delete(additionalProperties, "externalRefs")
		delete(additionalProperties, "id")
		delete(additionalProperties, "numericId")
		delete(additionalProperties, "policy")
		delete(additionalProperties, "processing")
		delete(additionalProperties, "state")
		delete(additionalProperties, "stepApproverIds")
		delete(additionalProperties, "type")
		delete(additionalProperties, "updatedAt")
		delete(additionalProperties, "userId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableC1ApiTaskV1Task struct {
	value *C1ApiTaskV1Task
	isSet bool
}

func (v NullableC1ApiTaskV1Task) Get() *C1ApiTaskV1Task {
	return v.value
}

func (v *NullableC1ApiTaskV1Task) Set(val *C1ApiTaskV1Task) {
	v.value = val
	v.isSet = true
}

func (v NullableC1ApiTaskV1Task) IsSet() bool {
	return v.isSet
}

func (v *NullableC1ApiTaskV1Task) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableC1ApiTaskV1Task(val *C1ApiTaskV1Task) *NullableC1ApiTaskV1Task {
	return &NullableC1ApiTaskV1Task{value: val, isSet: true}
}

func (v NullableC1ApiTaskV1Task) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableC1ApiTaskV1Task) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


