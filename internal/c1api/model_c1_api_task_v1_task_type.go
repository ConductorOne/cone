/*
ConductorOne API

The ConductorOne API is a HTTP API for managing ConductorOne resources.

API version: 0.1.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c1api

import (
	"encoding/json"
)

// checks if the C1ApiTaskV1TaskType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &C1ApiTaskV1TaskType{}

// C1ApiTaskV1TaskType The TaskType message.  This message contains a oneof named task_type. Only a single field of the following list may be set at a time:   - grant   - revoke   - certify   - accessRequest 
type C1ApiTaskV1TaskType struct {
	AccessRequest NullableC1ApiTaskV1TaskTypeAccessRequest `json:"accessRequest,omitempty"`
	Certify NullableC1ApiTaskV1TaskTypeCertify `json:"certify,omitempty"`
	Grant NullableC1ApiTaskV1TaskTypeGrant `json:"grant,omitempty"`
	Revoke NullableC1ApiTaskV1TaskTypeRevoke `json:"revoke,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _C1ApiTaskV1TaskType C1ApiTaskV1TaskType

// NewC1ApiTaskV1TaskType instantiates a new C1ApiTaskV1TaskType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewC1ApiTaskV1TaskType() *C1ApiTaskV1TaskType {
	this := C1ApiTaskV1TaskType{}
	return &this
}

// NewC1ApiTaskV1TaskTypeWithDefaults instantiates a new C1ApiTaskV1TaskType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewC1ApiTaskV1TaskTypeWithDefaults() *C1ApiTaskV1TaskType {
	this := C1ApiTaskV1TaskType{}
	return &this
}

// GetAccessRequest returns the AccessRequest field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiTaskV1TaskType) GetAccessRequest() C1ApiTaskV1TaskTypeAccessRequest {
	if o == nil || IsNil(o.AccessRequest.Get()) {
		var ret C1ApiTaskV1TaskTypeAccessRequest
		return ret
	}
	return *o.AccessRequest.Get()
}

// GetAccessRequestOk returns a tuple with the AccessRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiTaskV1TaskType) GetAccessRequestOk() (*C1ApiTaskV1TaskTypeAccessRequest, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccessRequest.Get(), o.AccessRequest.IsSet()
}

// HasAccessRequest returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskType) HasAccessRequest() bool {
	if o != nil && o.AccessRequest.IsSet() {
		return true
	}

	return false
}

// SetAccessRequest gets a reference to the given NullableC1ApiTaskV1TaskTypeAccessRequest and assigns it to the AccessRequest field.
func (o *C1ApiTaskV1TaskType) SetAccessRequest(v C1ApiTaskV1TaskTypeAccessRequest) {
	o.AccessRequest.Set(&v)
}
// SetAccessRequestNil sets the value for AccessRequest to be an explicit nil
func (o *C1ApiTaskV1TaskType) SetAccessRequestNil() {
	o.AccessRequest.Set(nil)
}

// UnsetAccessRequest ensures that no value is present for AccessRequest, not even an explicit nil
func (o *C1ApiTaskV1TaskType) UnsetAccessRequest() {
	o.AccessRequest.Unset()
}

// GetCertify returns the Certify field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiTaskV1TaskType) GetCertify() C1ApiTaskV1TaskTypeCertify {
	if o == nil || IsNil(o.Certify.Get()) {
		var ret C1ApiTaskV1TaskTypeCertify
		return ret
	}
	return *o.Certify.Get()
}

// GetCertifyOk returns a tuple with the Certify field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiTaskV1TaskType) GetCertifyOk() (*C1ApiTaskV1TaskTypeCertify, bool) {
	if o == nil {
		return nil, false
	}
	return o.Certify.Get(), o.Certify.IsSet()
}

// HasCertify returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskType) HasCertify() bool {
	if o != nil && o.Certify.IsSet() {
		return true
	}

	return false
}

// SetCertify gets a reference to the given NullableC1ApiTaskV1TaskTypeCertify and assigns it to the Certify field.
func (o *C1ApiTaskV1TaskType) SetCertify(v C1ApiTaskV1TaskTypeCertify) {
	o.Certify.Set(&v)
}
// SetCertifyNil sets the value for Certify to be an explicit nil
func (o *C1ApiTaskV1TaskType) SetCertifyNil() {
	o.Certify.Set(nil)
}

// UnsetCertify ensures that no value is present for Certify, not even an explicit nil
func (o *C1ApiTaskV1TaskType) UnsetCertify() {
	o.Certify.Unset()
}

// GetGrant returns the Grant field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiTaskV1TaskType) GetGrant() C1ApiTaskV1TaskTypeGrant {
	if o == nil || IsNil(o.Grant.Get()) {
		var ret C1ApiTaskV1TaskTypeGrant
		return ret
	}
	return *o.Grant.Get()
}

// GetGrantOk returns a tuple with the Grant field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiTaskV1TaskType) GetGrantOk() (*C1ApiTaskV1TaskTypeGrant, bool) {
	if o == nil {
		return nil, false
	}
	return o.Grant.Get(), o.Grant.IsSet()
}

// HasGrant returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskType) HasGrant() bool {
	if o != nil && o.Grant.IsSet() {
		return true
	}

	return false
}

// SetGrant gets a reference to the given NullableC1ApiTaskV1TaskTypeGrant and assigns it to the Grant field.
func (o *C1ApiTaskV1TaskType) SetGrant(v C1ApiTaskV1TaskTypeGrant) {
	o.Grant.Set(&v)
}
// SetGrantNil sets the value for Grant to be an explicit nil
func (o *C1ApiTaskV1TaskType) SetGrantNil() {
	o.Grant.Set(nil)
}

// UnsetGrant ensures that no value is present for Grant, not even an explicit nil
func (o *C1ApiTaskV1TaskType) UnsetGrant() {
	o.Grant.Unset()
}

// GetRevoke returns the Revoke field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiTaskV1TaskType) GetRevoke() C1ApiTaskV1TaskTypeRevoke {
	if o == nil || IsNil(o.Revoke.Get()) {
		var ret C1ApiTaskV1TaskTypeRevoke
		return ret
	}
	return *o.Revoke.Get()
}

// GetRevokeOk returns a tuple with the Revoke field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiTaskV1TaskType) GetRevokeOk() (*C1ApiTaskV1TaskTypeRevoke, bool) {
	if o == nil {
		return nil, false
	}
	return o.Revoke.Get(), o.Revoke.IsSet()
}

// HasRevoke returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskType) HasRevoke() bool {
	if o != nil && o.Revoke.IsSet() {
		return true
	}

	return false
}

// SetRevoke gets a reference to the given NullableC1ApiTaskV1TaskTypeRevoke and assigns it to the Revoke field.
func (o *C1ApiTaskV1TaskType) SetRevoke(v C1ApiTaskV1TaskTypeRevoke) {
	o.Revoke.Set(&v)
}
// SetRevokeNil sets the value for Revoke to be an explicit nil
func (o *C1ApiTaskV1TaskType) SetRevokeNil() {
	o.Revoke.Set(nil)
}

// UnsetRevoke ensures that no value is present for Revoke, not even an explicit nil
func (o *C1ApiTaskV1TaskType) UnsetRevoke() {
	o.Revoke.Unset()
}

func (o C1ApiTaskV1TaskType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o C1ApiTaskV1TaskType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessRequest.IsSet() {
		toSerialize["accessRequest"] = o.AccessRequest.Get()
	}
	if o.Certify.IsSet() {
		toSerialize["certify"] = o.Certify.Get()
	}
	if o.Grant.IsSet() {
		toSerialize["grant"] = o.Grant.Get()
	}
	if o.Revoke.IsSet() {
		toSerialize["revoke"] = o.Revoke.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *C1ApiTaskV1TaskType) UnmarshalJSON(bytes []byte) (err error) {
	varC1ApiTaskV1TaskType := _C1ApiTaskV1TaskType{}

	if err = json.Unmarshal(bytes, &varC1ApiTaskV1TaskType); err == nil {
		*o = C1ApiTaskV1TaskType(varC1ApiTaskV1TaskType)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "accessRequest")
		delete(additionalProperties, "certify")
		delete(additionalProperties, "grant")
		delete(additionalProperties, "revoke")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableC1ApiTaskV1TaskType struct {
	value *C1ApiTaskV1TaskType
	isSet bool
}

func (v NullableC1ApiTaskV1TaskType) Get() *C1ApiTaskV1TaskType {
	return v.value
}

func (v *NullableC1ApiTaskV1TaskType) Set(val *C1ApiTaskV1TaskType) {
	v.value = val
	v.isSet = true
}

func (v NullableC1ApiTaskV1TaskType) IsSet() bool {
	return v.isSet
}

func (v *NullableC1ApiTaskV1TaskType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableC1ApiTaskV1TaskType(val *C1ApiTaskV1TaskType) *NullableC1ApiTaskV1TaskType {
	return &NullableC1ApiTaskV1TaskType{value: val, isSet: true}
}

func (v NullableC1ApiTaskV1TaskType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableC1ApiTaskV1TaskType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


