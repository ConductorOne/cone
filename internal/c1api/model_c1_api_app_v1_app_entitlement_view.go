/*
ConductorOne API

The ConductorOne API is a HTTP API for managing ConductorOne resources.

API version: 0.1.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c1api

import (
	"encoding/json"
)

// checks if the C1ApiAppV1AppEntitlementView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &C1ApiAppV1AppEntitlementView{}

// C1ApiAppV1AppEntitlementView The AppEntitlementView message.
type C1ApiAppV1AppEntitlementView struct {
	AppEntitlement *C1ApiAppV1AppEntitlement `json:"appEntitlement,omitempty"`
	// The appPath field.
	AppPath *string `json:"appPath,omitempty"`
	// The appResourcePath field.
	AppResourcePath *string `json:"appResourcePath,omitempty"`
	// The appResourceTypePath field.
	AppResourceTypePath *string `json:"appResourceTypePath,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _C1ApiAppV1AppEntitlementView C1ApiAppV1AppEntitlementView

// NewC1ApiAppV1AppEntitlementView instantiates a new C1ApiAppV1AppEntitlementView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewC1ApiAppV1AppEntitlementView() *C1ApiAppV1AppEntitlementView {
	this := C1ApiAppV1AppEntitlementView{}
	return &this
}

// NewC1ApiAppV1AppEntitlementViewWithDefaults instantiates a new C1ApiAppV1AppEntitlementView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewC1ApiAppV1AppEntitlementViewWithDefaults() *C1ApiAppV1AppEntitlementView {
	this := C1ApiAppV1AppEntitlementView{}
	return &this
}

// GetAppEntitlement returns the AppEntitlement field value if set, zero value otherwise.
func (o *C1ApiAppV1AppEntitlementView) GetAppEntitlement() C1ApiAppV1AppEntitlement {
	if o == nil || IsNil(o.AppEntitlement) {
		var ret C1ApiAppV1AppEntitlement
		return ret
	}
	return *o.AppEntitlement
}

// GetAppEntitlementOk returns a tuple with the AppEntitlement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiAppV1AppEntitlementView) GetAppEntitlementOk() (*C1ApiAppV1AppEntitlement, bool) {
	if o == nil || IsNil(o.AppEntitlement) {
		return nil, false
	}
	return o.AppEntitlement, true
}

// HasAppEntitlement returns a boolean if a field has been set.
func (o *C1ApiAppV1AppEntitlementView) HasAppEntitlement() bool {
	if o != nil && !IsNil(o.AppEntitlement) {
		return true
	}

	return false
}

// SetAppEntitlement gets a reference to the given C1ApiAppV1AppEntitlement and assigns it to the AppEntitlement field.
func (o *C1ApiAppV1AppEntitlementView) SetAppEntitlement(v C1ApiAppV1AppEntitlement) {
	o.AppEntitlement = &v
}

// GetAppPath returns the AppPath field value if set, zero value otherwise.
func (o *C1ApiAppV1AppEntitlementView) GetAppPath() string {
	if o == nil || IsNil(o.AppPath) {
		var ret string
		return ret
	}
	return *o.AppPath
}

// GetAppPathOk returns a tuple with the AppPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiAppV1AppEntitlementView) GetAppPathOk() (*string, bool) {
	if o == nil || IsNil(o.AppPath) {
		return nil, false
	}
	return o.AppPath, true
}

// HasAppPath returns a boolean if a field has been set.
func (o *C1ApiAppV1AppEntitlementView) HasAppPath() bool {
	if o != nil && !IsNil(o.AppPath) {
		return true
	}

	return false
}

// SetAppPath gets a reference to the given string and assigns it to the AppPath field.
func (o *C1ApiAppV1AppEntitlementView) SetAppPath(v string) {
	o.AppPath = &v
}

// GetAppResourcePath returns the AppResourcePath field value if set, zero value otherwise.
func (o *C1ApiAppV1AppEntitlementView) GetAppResourcePath() string {
	if o == nil || IsNil(o.AppResourcePath) {
		var ret string
		return ret
	}
	return *o.AppResourcePath
}

// GetAppResourcePathOk returns a tuple with the AppResourcePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiAppV1AppEntitlementView) GetAppResourcePathOk() (*string, bool) {
	if o == nil || IsNil(o.AppResourcePath) {
		return nil, false
	}
	return o.AppResourcePath, true
}

// HasAppResourcePath returns a boolean if a field has been set.
func (o *C1ApiAppV1AppEntitlementView) HasAppResourcePath() bool {
	if o != nil && !IsNil(o.AppResourcePath) {
		return true
	}

	return false
}

// SetAppResourcePath gets a reference to the given string and assigns it to the AppResourcePath field.
func (o *C1ApiAppV1AppEntitlementView) SetAppResourcePath(v string) {
	o.AppResourcePath = &v
}

// GetAppResourceTypePath returns the AppResourceTypePath field value if set, zero value otherwise.
func (o *C1ApiAppV1AppEntitlementView) GetAppResourceTypePath() string {
	if o == nil || IsNil(o.AppResourceTypePath) {
		var ret string
		return ret
	}
	return *o.AppResourceTypePath
}

// GetAppResourceTypePathOk returns a tuple with the AppResourceTypePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiAppV1AppEntitlementView) GetAppResourceTypePathOk() (*string, bool) {
	if o == nil || IsNil(o.AppResourceTypePath) {
		return nil, false
	}
	return o.AppResourceTypePath, true
}

// HasAppResourceTypePath returns a boolean if a field has been set.
func (o *C1ApiAppV1AppEntitlementView) HasAppResourceTypePath() bool {
	if o != nil && !IsNil(o.AppResourceTypePath) {
		return true
	}

	return false
}

// SetAppResourceTypePath gets a reference to the given string and assigns it to the AppResourceTypePath field.
func (o *C1ApiAppV1AppEntitlementView) SetAppResourceTypePath(v string) {
	o.AppResourceTypePath = &v
}

func (o C1ApiAppV1AppEntitlementView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o C1ApiAppV1AppEntitlementView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AppEntitlement) {
		toSerialize["appEntitlement"] = o.AppEntitlement
	}
	if !IsNil(o.AppPath) {
		toSerialize["appPath"] = o.AppPath
	}
	if !IsNil(o.AppResourcePath) {
		toSerialize["appResourcePath"] = o.AppResourcePath
	}
	if !IsNil(o.AppResourceTypePath) {
		toSerialize["appResourceTypePath"] = o.AppResourceTypePath
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *C1ApiAppV1AppEntitlementView) UnmarshalJSON(bytes []byte) (err error) {
	varC1ApiAppV1AppEntitlementView := _C1ApiAppV1AppEntitlementView{}

	if err = json.Unmarshal(bytes, &varC1ApiAppV1AppEntitlementView); err == nil {
		*o = C1ApiAppV1AppEntitlementView(varC1ApiAppV1AppEntitlementView)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "appEntitlement")
		delete(additionalProperties, "appPath")
		delete(additionalProperties, "appResourcePath")
		delete(additionalProperties, "appResourceTypePath")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableC1ApiAppV1AppEntitlementView struct {
	value *C1ApiAppV1AppEntitlementView
	isSet bool
}

func (v NullableC1ApiAppV1AppEntitlementView) Get() *C1ApiAppV1AppEntitlementView {
	return v.value
}

func (v *NullableC1ApiAppV1AppEntitlementView) Set(val *C1ApiAppV1AppEntitlementView) {
	v.value = val
	v.isSet = true
}

func (v NullableC1ApiAppV1AppEntitlementView) IsSet() bool {
	return v.isSet
}

func (v *NullableC1ApiAppV1AppEntitlementView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableC1ApiAppV1AppEntitlementView(val *C1ApiAppV1AppEntitlementView) *NullableC1ApiAppV1AppEntitlementView {
	return &NullableC1ApiAppV1AppEntitlementView{value: val, isSet: true}
}

func (v NullableC1ApiAppV1AppEntitlementView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableC1ApiAppV1AppEntitlementView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


