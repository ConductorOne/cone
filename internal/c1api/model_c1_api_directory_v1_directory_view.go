/*
ConductorOne API

The ConductorOne API is a HTTP API for managing ConductorOne resources.

API version: 0.1.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c1api

import (
	"encoding/json"
)

// checks if the C1ApiDirectoryV1DirectoryView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &C1ApiDirectoryV1DirectoryView{}

// C1ApiDirectoryV1DirectoryView The DirectoryView message.
type C1ApiDirectoryV1DirectoryView struct {
	// The appPath field.
	AppPath *string `json:"appPath,omitempty"`
	Directory *C1ApiDirectoryV1Directory `json:"directory,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _C1ApiDirectoryV1DirectoryView C1ApiDirectoryV1DirectoryView

// NewC1ApiDirectoryV1DirectoryView instantiates a new C1ApiDirectoryV1DirectoryView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewC1ApiDirectoryV1DirectoryView() *C1ApiDirectoryV1DirectoryView {
	this := C1ApiDirectoryV1DirectoryView{}
	return &this
}

// NewC1ApiDirectoryV1DirectoryViewWithDefaults instantiates a new C1ApiDirectoryV1DirectoryView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewC1ApiDirectoryV1DirectoryViewWithDefaults() *C1ApiDirectoryV1DirectoryView {
	this := C1ApiDirectoryV1DirectoryView{}
	return &this
}

// GetAppPath returns the AppPath field value if set, zero value otherwise.
func (o *C1ApiDirectoryV1DirectoryView) GetAppPath() string {
	if o == nil || IsNil(o.AppPath) {
		var ret string
		return ret
	}
	return *o.AppPath
}

// GetAppPathOk returns a tuple with the AppPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiDirectoryV1DirectoryView) GetAppPathOk() (*string, bool) {
	if o == nil || IsNil(o.AppPath) {
		return nil, false
	}
	return o.AppPath, true
}

// HasAppPath returns a boolean if a field has been set.
func (o *C1ApiDirectoryV1DirectoryView) HasAppPath() bool {
	if o != nil && !IsNil(o.AppPath) {
		return true
	}

	return false
}

// SetAppPath gets a reference to the given string and assigns it to the AppPath field.
func (o *C1ApiDirectoryV1DirectoryView) SetAppPath(v string) {
	o.AppPath = &v
}

// GetDirectory returns the Directory field value if set, zero value otherwise.
func (o *C1ApiDirectoryV1DirectoryView) GetDirectory() C1ApiDirectoryV1Directory {
	if o == nil || IsNil(o.Directory) {
		var ret C1ApiDirectoryV1Directory
		return ret
	}
	return *o.Directory
}

// GetDirectoryOk returns a tuple with the Directory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiDirectoryV1DirectoryView) GetDirectoryOk() (*C1ApiDirectoryV1Directory, bool) {
	if o == nil || IsNil(o.Directory) {
		return nil, false
	}
	return o.Directory, true
}

// HasDirectory returns a boolean if a field has been set.
func (o *C1ApiDirectoryV1DirectoryView) HasDirectory() bool {
	if o != nil && !IsNil(o.Directory) {
		return true
	}

	return false
}

// SetDirectory gets a reference to the given C1ApiDirectoryV1Directory and assigns it to the Directory field.
func (o *C1ApiDirectoryV1DirectoryView) SetDirectory(v C1ApiDirectoryV1Directory) {
	o.Directory = &v
}

func (o C1ApiDirectoryV1DirectoryView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o C1ApiDirectoryV1DirectoryView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AppPath) {
		toSerialize["appPath"] = o.AppPath
	}
	if !IsNil(o.Directory) {
		toSerialize["directory"] = o.Directory
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *C1ApiDirectoryV1DirectoryView) UnmarshalJSON(bytes []byte) (err error) {
	varC1ApiDirectoryV1DirectoryView := _C1ApiDirectoryV1DirectoryView{}

	if err = json.Unmarshal(bytes, &varC1ApiDirectoryV1DirectoryView); err == nil {
		*o = C1ApiDirectoryV1DirectoryView(varC1ApiDirectoryV1DirectoryView)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "appPath")
		delete(additionalProperties, "directory")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableC1ApiDirectoryV1DirectoryView struct {
	value *C1ApiDirectoryV1DirectoryView
	isSet bool
}

func (v NullableC1ApiDirectoryV1DirectoryView) Get() *C1ApiDirectoryV1DirectoryView {
	return v.value
}

func (v *NullableC1ApiDirectoryV1DirectoryView) Set(val *C1ApiDirectoryV1DirectoryView) {
	v.value = val
	v.isSet = true
}

func (v NullableC1ApiDirectoryV1DirectoryView) IsSet() bool {
	return v.isSet
}

func (v *NullableC1ApiDirectoryV1DirectoryView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableC1ApiDirectoryV1DirectoryView(val *C1ApiDirectoryV1DirectoryView) *NullableC1ApiDirectoryV1DirectoryView {
	return &NullableC1ApiDirectoryV1DirectoryView{value: val, isSet: true}
}

func (v NullableC1ApiDirectoryV1DirectoryView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableC1ApiDirectoryV1DirectoryView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


