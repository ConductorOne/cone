/*
ConductorOne API

The ConductorOne API is a HTTP API for managing ConductorOne resources.

API version: 0.1.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c1api

import (
	"encoding/json"
	"time"
)

// checks if the C1ApiTaskV1TaskRevokeSourceExpired type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &C1ApiTaskV1TaskRevokeSourceExpired{}

// C1ApiTaskV1TaskRevokeSourceExpired The TaskRevokeSourceExpired message.
type C1ApiTaskV1TaskRevokeSourceExpired struct {
	ExpiredAt *time.Time `json:"expiredAt,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _C1ApiTaskV1TaskRevokeSourceExpired C1ApiTaskV1TaskRevokeSourceExpired

// NewC1ApiTaskV1TaskRevokeSourceExpired instantiates a new C1ApiTaskV1TaskRevokeSourceExpired object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewC1ApiTaskV1TaskRevokeSourceExpired() *C1ApiTaskV1TaskRevokeSourceExpired {
	this := C1ApiTaskV1TaskRevokeSourceExpired{}
	return &this
}

// NewC1ApiTaskV1TaskRevokeSourceExpiredWithDefaults instantiates a new C1ApiTaskV1TaskRevokeSourceExpired object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewC1ApiTaskV1TaskRevokeSourceExpiredWithDefaults() *C1ApiTaskV1TaskRevokeSourceExpired {
	this := C1ApiTaskV1TaskRevokeSourceExpired{}
	return &this
}

// GetExpiredAt returns the ExpiredAt field value if set, zero value otherwise.
func (o *C1ApiTaskV1TaskRevokeSourceExpired) GetExpiredAt() time.Time {
	if o == nil || IsNil(o.ExpiredAt) {
		var ret time.Time
		return ret
	}
	return *o.ExpiredAt
}

// GetExpiredAtOk returns a tuple with the ExpiredAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1TaskRevokeSourceExpired) GetExpiredAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpiredAt) {
		return nil, false
	}
	return o.ExpiredAt, true
}

// HasExpiredAt returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskRevokeSourceExpired) HasExpiredAt() bool {
	if o != nil && !IsNil(o.ExpiredAt) {
		return true
	}

	return false
}

// SetExpiredAt gets a reference to the given time.Time and assigns it to the ExpiredAt field.
func (o *C1ApiTaskV1TaskRevokeSourceExpired) SetExpiredAt(v time.Time) {
	o.ExpiredAt = &v
}

func (o C1ApiTaskV1TaskRevokeSourceExpired) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o C1ApiTaskV1TaskRevokeSourceExpired) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExpiredAt) {
		toSerialize["expiredAt"] = o.ExpiredAt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *C1ApiTaskV1TaskRevokeSourceExpired) UnmarshalJSON(bytes []byte) (err error) {
	varC1ApiTaskV1TaskRevokeSourceExpired := _C1ApiTaskV1TaskRevokeSourceExpired{}

	if err = json.Unmarshal(bytes, &varC1ApiTaskV1TaskRevokeSourceExpired); err == nil {
		*o = C1ApiTaskV1TaskRevokeSourceExpired(varC1ApiTaskV1TaskRevokeSourceExpired)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "expiredAt")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableC1ApiTaskV1TaskRevokeSourceExpired struct {
	value *C1ApiTaskV1TaskRevokeSourceExpired
	isSet bool
}

func (v NullableC1ApiTaskV1TaskRevokeSourceExpired) Get() *C1ApiTaskV1TaskRevokeSourceExpired {
	return v.value
}

func (v *NullableC1ApiTaskV1TaskRevokeSourceExpired) Set(val *C1ApiTaskV1TaskRevokeSourceExpired) {
	v.value = val
	v.isSet = true
}

func (v NullableC1ApiTaskV1TaskRevokeSourceExpired) IsSet() bool {
	return v.isSet
}

func (v *NullableC1ApiTaskV1TaskRevokeSourceExpired) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableC1ApiTaskV1TaskRevokeSourceExpired(val *C1ApiTaskV1TaskRevokeSourceExpired) *NullableC1ApiTaskV1TaskRevokeSourceExpired {
	return &NullableC1ApiTaskV1TaskRevokeSourceExpired{value: val, isSet: true}
}

func (v NullableC1ApiTaskV1TaskRevokeSourceExpired) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableC1ApiTaskV1TaskRevokeSourceExpired) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


