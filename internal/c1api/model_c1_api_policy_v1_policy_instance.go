/*
ConductorOne API

The ConductorOne API is a HTTP API for managing ConductorOne resources.

API version: 0.1.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c1api

import (
	"encoding/json"
)

// checks if the C1ApiPolicyV1PolicyInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &C1ApiPolicyV1PolicyInstance{}

// C1ApiPolicyV1PolicyInstance The PolicyInstance message.
type C1ApiPolicyV1PolicyInstance struct {
	Current *C1ApiPolicyV1PolicyStepInstance `json:"current,omitempty"`
	// The history field.
	History []C1ApiPolicyV1PolicyStepInstance `json:"history,omitempty"`
	// The next field.
	Next []C1ApiPolicyV1PolicyStep `json:"next,omitempty"`
	Policy *C1ApiPolicyV1Policy `json:"policy,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _C1ApiPolicyV1PolicyInstance C1ApiPolicyV1PolicyInstance

// NewC1ApiPolicyV1PolicyInstance instantiates a new C1ApiPolicyV1PolicyInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewC1ApiPolicyV1PolicyInstance() *C1ApiPolicyV1PolicyInstance {
	this := C1ApiPolicyV1PolicyInstance{}
	return &this
}

// NewC1ApiPolicyV1PolicyInstanceWithDefaults instantiates a new C1ApiPolicyV1PolicyInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewC1ApiPolicyV1PolicyInstanceWithDefaults() *C1ApiPolicyV1PolicyInstance {
	this := C1ApiPolicyV1PolicyInstance{}
	return &this
}

// GetCurrent returns the Current field value if set, zero value otherwise.
func (o *C1ApiPolicyV1PolicyInstance) GetCurrent() C1ApiPolicyV1PolicyStepInstance {
	if o == nil || IsNil(o.Current) {
		var ret C1ApiPolicyV1PolicyStepInstance
		return ret
	}
	return *o.Current
}

// GetCurrentOk returns a tuple with the Current field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiPolicyV1PolicyInstance) GetCurrentOk() (*C1ApiPolicyV1PolicyStepInstance, bool) {
	if o == nil || IsNil(o.Current) {
		return nil, false
	}
	return o.Current, true
}

// HasCurrent returns a boolean if a field has been set.
func (o *C1ApiPolicyV1PolicyInstance) HasCurrent() bool {
	if o != nil && !IsNil(o.Current) {
		return true
	}

	return false
}

// SetCurrent gets a reference to the given C1ApiPolicyV1PolicyStepInstance and assigns it to the Current field.
func (o *C1ApiPolicyV1PolicyInstance) SetCurrent(v C1ApiPolicyV1PolicyStepInstance) {
	o.Current = &v
}

// GetHistory returns the History field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiPolicyV1PolicyInstance) GetHistory() []C1ApiPolicyV1PolicyStepInstance {
	if o == nil {
		var ret []C1ApiPolicyV1PolicyStepInstance
		return ret
	}
	return o.History
}

// GetHistoryOk returns a tuple with the History field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiPolicyV1PolicyInstance) GetHistoryOk() ([]C1ApiPolicyV1PolicyStepInstance, bool) {
	if o == nil || IsNil(o.History) {
		return nil, false
	}
	return o.History, true
}

// HasHistory returns a boolean if a field has been set.
func (o *C1ApiPolicyV1PolicyInstance) HasHistory() bool {
	if o != nil && IsNil(o.History) {
		return true
	}

	return false
}

// SetHistory gets a reference to the given []C1ApiPolicyV1PolicyStepInstance and assigns it to the History field.
func (o *C1ApiPolicyV1PolicyInstance) SetHistory(v []C1ApiPolicyV1PolicyStepInstance) {
	o.History = v
}

// GetNext returns the Next field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiPolicyV1PolicyInstance) GetNext() []C1ApiPolicyV1PolicyStep {
	if o == nil {
		var ret []C1ApiPolicyV1PolicyStep
		return ret
	}
	return o.Next
}

// GetNextOk returns a tuple with the Next field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiPolicyV1PolicyInstance) GetNextOk() ([]C1ApiPolicyV1PolicyStep, bool) {
	if o == nil || IsNil(o.Next) {
		return nil, false
	}
	return o.Next, true
}

// HasNext returns a boolean if a field has been set.
func (o *C1ApiPolicyV1PolicyInstance) HasNext() bool {
	if o != nil && IsNil(o.Next) {
		return true
	}

	return false
}

// SetNext gets a reference to the given []C1ApiPolicyV1PolicyStep and assigns it to the Next field.
func (o *C1ApiPolicyV1PolicyInstance) SetNext(v []C1ApiPolicyV1PolicyStep) {
	o.Next = v
}

// GetPolicy returns the Policy field value if set, zero value otherwise.
func (o *C1ApiPolicyV1PolicyInstance) GetPolicy() C1ApiPolicyV1Policy {
	if o == nil || IsNil(o.Policy) {
		var ret C1ApiPolicyV1Policy
		return ret
	}
	return *o.Policy
}

// GetPolicyOk returns a tuple with the Policy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiPolicyV1PolicyInstance) GetPolicyOk() (*C1ApiPolicyV1Policy, bool) {
	if o == nil || IsNil(o.Policy) {
		return nil, false
	}
	return o.Policy, true
}

// HasPolicy returns a boolean if a field has been set.
func (o *C1ApiPolicyV1PolicyInstance) HasPolicy() bool {
	if o != nil && !IsNil(o.Policy) {
		return true
	}

	return false
}

// SetPolicy gets a reference to the given C1ApiPolicyV1Policy and assigns it to the Policy field.
func (o *C1ApiPolicyV1PolicyInstance) SetPolicy(v C1ApiPolicyV1Policy) {
	o.Policy = &v
}

func (o C1ApiPolicyV1PolicyInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o C1ApiPolicyV1PolicyInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Current) {
		toSerialize["current"] = o.Current
	}
	if o.History != nil {
		toSerialize["history"] = o.History
	}
	if o.Next != nil {
		toSerialize["next"] = o.Next
	}
	if !IsNil(o.Policy) {
		toSerialize["policy"] = o.Policy
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *C1ApiPolicyV1PolicyInstance) UnmarshalJSON(bytes []byte) (err error) {
	varC1ApiPolicyV1PolicyInstance := _C1ApiPolicyV1PolicyInstance{}

	if err = json.Unmarshal(bytes, &varC1ApiPolicyV1PolicyInstance); err == nil {
		*o = C1ApiPolicyV1PolicyInstance(varC1ApiPolicyV1PolicyInstance)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "current")
		delete(additionalProperties, "history")
		delete(additionalProperties, "next")
		delete(additionalProperties, "policy")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableC1ApiPolicyV1PolicyInstance struct {
	value *C1ApiPolicyV1PolicyInstance
	isSet bool
}

func (v NullableC1ApiPolicyV1PolicyInstance) Get() *C1ApiPolicyV1PolicyInstance {
	return v.value
}

func (v *NullableC1ApiPolicyV1PolicyInstance) Set(val *C1ApiPolicyV1PolicyInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableC1ApiPolicyV1PolicyInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableC1ApiPolicyV1PolicyInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableC1ApiPolicyV1PolicyInstance(val *C1ApiPolicyV1PolicyInstance) *NullableC1ApiPolicyV1PolicyInstance {
	return &NullableC1ApiPolicyV1PolicyInstance{value: val, isSet: true}
}

func (v NullableC1ApiPolicyV1PolicyInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableC1ApiPolicyV1PolicyInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


