/*
ConductorOne API

The ConductorOne API is a HTTP API for managing ConductorOne resources.

API version: 0.1.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c1api

import (
	"encoding/json"
)

// checks if the C1ApiUserV1SearchUsersRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &C1ApiUserV1SearchUsersRequest{}

// C1ApiUserV1SearchUsersRequest The SearchUsersRequest message.
type C1ApiUserV1SearchUsersRequest struct {
	// The excludeIds field.
	ExcludeIds []string `json:"excludeIds,omitempty"`
	ExpandMask *C1ApiUserV1UserExpandMask `json:"expandMask,omitempty"`
	// The ids field.
	Ids []string `json:"ids,omitempty"`
	// The pageSize field.
	PageSize *float32 `json:"pageSize,omitempty"`
	// The pageToken field.
	PageToken *string `json:"pageToken,omitempty"`
	// The query field.
	Query *string `json:"query,omitempty"`
	// The refs field.
	Refs []C1ApiUserV1UserRef `json:"refs,omitempty"`
	// The roleIds field.
	RoleIds []string `json:"roleIds,omitempty"`
	// The userStatuses field.
	UserStatuses []string `json:"userStatuses,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _C1ApiUserV1SearchUsersRequest C1ApiUserV1SearchUsersRequest

// NewC1ApiUserV1SearchUsersRequest instantiates a new C1ApiUserV1SearchUsersRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewC1ApiUserV1SearchUsersRequest() *C1ApiUserV1SearchUsersRequest {
	this := C1ApiUserV1SearchUsersRequest{}
	return &this
}

// NewC1ApiUserV1SearchUsersRequestWithDefaults instantiates a new C1ApiUserV1SearchUsersRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewC1ApiUserV1SearchUsersRequestWithDefaults() *C1ApiUserV1SearchUsersRequest {
	this := C1ApiUserV1SearchUsersRequest{}
	return &this
}

// GetExcludeIds returns the ExcludeIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiUserV1SearchUsersRequest) GetExcludeIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ExcludeIds
}

// GetExcludeIdsOk returns a tuple with the ExcludeIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiUserV1SearchUsersRequest) GetExcludeIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ExcludeIds) {
		return nil, false
	}
	return o.ExcludeIds, true
}

// HasExcludeIds returns a boolean if a field has been set.
func (o *C1ApiUserV1SearchUsersRequest) HasExcludeIds() bool {
	if o != nil && IsNil(o.ExcludeIds) {
		return true
	}

	return false
}

// SetExcludeIds gets a reference to the given []string and assigns it to the ExcludeIds field.
func (o *C1ApiUserV1SearchUsersRequest) SetExcludeIds(v []string) {
	o.ExcludeIds = v
}

// GetExpandMask returns the ExpandMask field value if set, zero value otherwise.
func (o *C1ApiUserV1SearchUsersRequest) GetExpandMask() C1ApiUserV1UserExpandMask {
	if o == nil || IsNil(o.ExpandMask) {
		var ret C1ApiUserV1UserExpandMask
		return ret
	}
	return *o.ExpandMask
}

// GetExpandMaskOk returns a tuple with the ExpandMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiUserV1SearchUsersRequest) GetExpandMaskOk() (*C1ApiUserV1UserExpandMask, bool) {
	if o == nil || IsNil(o.ExpandMask) {
		return nil, false
	}
	return o.ExpandMask, true
}

// HasExpandMask returns a boolean if a field has been set.
func (o *C1ApiUserV1SearchUsersRequest) HasExpandMask() bool {
	if o != nil && !IsNil(o.ExpandMask) {
		return true
	}

	return false
}

// SetExpandMask gets a reference to the given C1ApiUserV1UserExpandMask and assigns it to the ExpandMask field.
func (o *C1ApiUserV1SearchUsersRequest) SetExpandMask(v C1ApiUserV1UserExpandMask) {
	o.ExpandMask = &v
}

// GetIds returns the Ids field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiUserV1SearchUsersRequest) GetIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiUserV1SearchUsersRequest) GetIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.Ids) {
		return nil, false
	}
	return o.Ids, true
}

// HasIds returns a boolean if a field has been set.
func (o *C1ApiUserV1SearchUsersRequest) HasIds() bool {
	if o != nil && IsNil(o.Ids) {
		return true
	}

	return false
}

// SetIds gets a reference to the given []string and assigns it to the Ids field.
func (o *C1ApiUserV1SearchUsersRequest) SetIds(v []string) {
	o.Ids = v
}

// GetPageSize returns the PageSize field value if set, zero value otherwise.
func (o *C1ApiUserV1SearchUsersRequest) GetPageSize() float32 {
	if o == nil || IsNil(o.PageSize) {
		var ret float32
		return ret
	}
	return *o.PageSize
}

// GetPageSizeOk returns a tuple with the PageSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiUserV1SearchUsersRequest) GetPageSizeOk() (*float32, bool) {
	if o == nil || IsNil(o.PageSize) {
		return nil, false
	}
	return o.PageSize, true
}

// HasPageSize returns a boolean if a field has been set.
func (o *C1ApiUserV1SearchUsersRequest) HasPageSize() bool {
	if o != nil && !IsNil(o.PageSize) {
		return true
	}

	return false
}

// SetPageSize gets a reference to the given float32 and assigns it to the PageSize field.
func (o *C1ApiUserV1SearchUsersRequest) SetPageSize(v float32) {
	o.PageSize = &v
}

// GetPageToken returns the PageToken field value if set, zero value otherwise.
func (o *C1ApiUserV1SearchUsersRequest) GetPageToken() string {
	if o == nil || IsNil(o.PageToken) {
		var ret string
		return ret
	}
	return *o.PageToken
}

// GetPageTokenOk returns a tuple with the PageToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiUserV1SearchUsersRequest) GetPageTokenOk() (*string, bool) {
	if o == nil || IsNil(o.PageToken) {
		return nil, false
	}
	return o.PageToken, true
}

// HasPageToken returns a boolean if a field has been set.
func (o *C1ApiUserV1SearchUsersRequest) HasPageToken() bool {
	if o != nil && !IsNil(o.PageToken) {
		return true
	}

	return false
}

// SetPageToken gets a reference to the given string and assigns it to the PageToken field.
func (o *C1ApiUserV1SearchUsersRequest) SetPageToken(v string) {
	o.PageToken = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *C1ApiUserV1SearchUsersRequest) GetQuery() string {
	if o == nil || IsNil(o.Query) {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiUserV1SearchUsersRequest) GetQueryOk() (*string, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *C1ApiUserV1SearchUsersRequest) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *C1ApiUserV1SearchUsersRequest) SetQuery(v string) {
	o.Query = &v
}

// GetRefs returns the Refs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiUserV1SearchUsersRequest) GetRefs() []C1ApiUserV1UserRef {
	if o == nil {
		var ret []C1ApiUserV1UserRef
		return ret
	}
	return o.Refs
}

// GetRefsOk returns a tuple with the Refs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiUserV1SearchUsersRequest) GetRefsOk() ([]C1ApiUserV1UserRef, bool) {
	if o == nil || IsNil(o.Refs) {
		return nil, false
	}
	return o.Refs, true
}

// HasRefs returns a boolean if a field has been set.
func (o *C1ApiUserV1SearchUsersRequest) HasRefs() bool {
	if o != nil && IsNil(o.Refs) {
		return true
	}

	return false
}

// SetRefs gets a reference to the given []C1ApiUserV1UserRef and assigns it to the Refs field.
func (o *C1ApiUserV1SearchUsersRequest) SetRefs(v []C1ApiUserV1UserRef) {
	o.Refs = v
}

// GetRoleIds returns the RoleIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiUserV1SearchUsersRequest) GetRoleIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.RoleIds
}

// GetRoleIdsOk returns a tuple with the RoleIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiUserV1SearchUsersRequest) GetRoleIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.RoleIds) {
		return nil, false
	}
	return o.RoleIds, true
}

// HasRoleIds returns a boolean if a field has been set.
func (o *C1ApiUserV1SearchUsersRequest) HasRoleIds() bool {
	if o != nil && IsNil(o.RoleIds) {
		return true
	}

	return false
}

// SetRoleIds gets a reference to the given []string and assigns it to the RoleIds field.
func (o *C1ApiUserV1SearchUsersRequest) SetRoleIds(v []string) {
	o.RoleIds = v
}

// GetUserStatuses returns the UserStatuses field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiUserV1SearchUsersRequest) GetUserStatuses() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.UserStatuses
}

// GetUserStatusesOk returns a tuple with the UserStatuses field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiUserV1SearchUsersRequest) GetUserStatusesOk() ([]string, bool) {
	if o == nil || IsNil(o.UserStatuses) {
		return nil, false
	}
	return o.UserStatuses, true
}

// HasUserStatuses returns a boolean if a field has been set.
func (o *C1ApiUserV1SearchUsersRequest) HasUserStatuses() bool {
	if o != nil && IsNil(o.UserStatuses) {
		return true
	}

	return false
}

// SetUserStatuses gets a reference to the given []string and assigns it to the UserStatuses field.
func (o *C1ApiUserV1SearchUsersRequest) SetUserStatuses(v []string) {
	o.UserStatuses = v
}

func (o C1ApiUserV1SearchUsersRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o C1ApiUserV1SearchUsersRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ExcludeIds != nil {
		toSerialize["excludeIds"] = o.ExcludeIds
	}
	if !IsNil(o.ExpandMask) {
		toSerialize["expandMask"] = o.ExpandMask
	}
	if o.Ids != nil {
		toSerialize["ids"] = o.Ids
	}
	if !IsNil(o.PageSize) {
		toSerialize["pageSize"] = o.PageSize
	}
	if !IsNil(o.PageToken) {
		toSerialize["pageToken"] = o.PageToken
	}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	if o.Refs != nil {
		toSerialize["refs"] = o.Refs
	}
	if o.RoleIds != nil {
		toSerialize["roleIds"] = o.RoleIds
	}
	if o.UserStatuses != nil {
		toSerialize["userStatuses"] = o.UserStatuses
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *C1ApiUserV1SearchUsersRequest) UnmarshalJSON(bytes []byte) (err error) {
	varC1ApiUserV1SearchUsersRequest := _C1ApiUserV1SearchUsersRequest{}

	if err = json.Unmarshal(bytes, &varC1ApiUserV1SearchUsersRequest); err == nil {
		*o = C1ApiUserV1SearchUsersRequest(varC1ApiUserV1SearchUsersRequest)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "excludeIds")
		delete(additionalProperties, "expandMask")
		delete(additionalProperties, "ids")
		delete(additionalProperties, "pageSize")
		delete(additionalProperties, "pageToken")
		delete(additionalProperties, "query")
		delete(additionalProperties, "refs")
		delete(additionalProperties, "roleIds")
		delete(additionalProperties, "userStatuses")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableC1ApiUserV1SearchUsersRequest struct {
	value *C1ApiUserV1SearchUsersRequest
	isSet bool
}

func (v NullableC1ApiUserV1SearchUsersRequest) Get() *C1ApiUserV1SearchUsersRequest {
	return v.value
}

func (v *NullableC1ApiUserV1SearchUsersRequest) Set(val *C1ApiUserV1SearchUsersRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableC1ApiUserV1SearchUsersRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableC1ApiUserV1SearchUsersRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableC1ApiUserV1SearchUsersRequest(val *C1ApiUserV1SearchUsersRequest) *NullableC1ApiUserV1SearchUsersRequest {
	return &NullableC1ApiUserV1SearchUsersRequest{value: val, isSet: true}
}

func (v NullableC1ApiUserV1SearchUsersRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableC1ApiUserV1SearchUsersRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


