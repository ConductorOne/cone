/*
ConductorOne API

The ConductorOne API is a HTTP API for managing ConductorOne resources.

API version: 0.1.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c1api

import (
	"encoding/json"
)

// checks if the C1ApiPolicyV1ProvisionInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &C1ApiPolicyV1ProvisionInstance{}

// C1ApiPolicyV1ProvisionInstance The ProvisionInstance message.  This message contains a oneof named outcome. Only a single field of the following list may be set at a time:   - completed   - cancelled   - errored   - reassignedByError 
type C1ApiPolicyV1ProvisionInstance struct {
	Cancelled NullableC1ApiPolicyV1CancelledAction `json:"cancelled,omitempty"`
	Completed NullableC1ApiPolicyV1CompletedAction `json:"completed,omitempty"`
	Errored NullableC1ApiPolicyV1ErroredAction `json:"errored,omitempty"`
	// The notificationId field.
	NotificationId *string `json:"notificationId,omitempty"`
	Provision NullableC1ApiPolicyV1Provision `json:"provision,omitempty"`
	ReassignedByError NullableC1ApiPolicyV1ReassignedByErrorAction `json:"reassignedByError,omitempty"`
	// The state field.
	State *string `json:"state,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _C1ApiPolicyV1ProvisionInstance C1ApiPolicyV1ProvisionInstance

// NewC1ApiPolicyV1ProvisionInstance instantiates a new C1ApiPolicyV1ProvisionInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewC1ApiPolicyV1ProvisionInstance() *C1ApiPolicyV1ProvisionInstance {
	this := C1ApiPolicyV1ProvisionInstance{}
	return &this
}

// NewC1ApiPolicyV1ProvisionInstanceWithDefaults instantiates a new C1ApiPolicyV1ProvisionInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewC1ApiPolicyV1ProvisionInstanceWithDefaults() *C1ApiPolicyV1ProvisionInstance {
	this := C1ApiPolicyV1ProvisionInstance{}
	return &this
}

// GetCancelled returns the Cancelled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiPolicyV1ProvisionInstance) GetCancelled() C1ApiPolicyV1CancelledAction {
	if o == nil || IsNil(o.Cancelled.Get()) {
		var ret C1ApiPolicyV1CancelledAction
		return ret
	}
	return *o.Cancelled.Get()
}

// GetCancelledOk returns a tuple with the Cancelled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiPolicyV1ProvisionInstance) GetCancelledOk() (*C1ApiPolicyV1CancelledAction, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cancelled.Get(), o.Cancelled.IsSet()
}

// HasCancelled returns a boolean if a field has been set.
func (o *C1ApiPolicyV1ProvisionInstance) HasCancelled() bool {
	if o != nil && o.Cancelled.IsSet() {
		return true
	}

	return false
}

// SetCancelled gets a reference to the given NullableC1ApiPolicyV1CancelledAction and assigns it to the Cancelled field.
func (o *C1ApiPolicyV1ProvisionInstance) SetCancelled(v C1ApiPolicyV1CancelledAction) {
	o.Cancelled.Set(&v)
}
// SetCancelledNil sets the value for Cancelled to be an explicit nil
func (o *C1ApiPolicyV1ProvisionInstance) SetCancelledNil() {
	o.Cancelled.Set(nil)
}

// UnsetCancelled ensures that no value is present for Cancelled, not even an explicit nil
func (o *C1ApiPolicyV1ProvisionInstance) UnsetCancelled() {
	o.Cancelled.Unset()
}

// GetCompleted returns the Completed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiPolicyV1ProvisionInstance) GetCompleted() C1ApiPolicyV1CompletedAction {
	if o == nil || IsNil(o.Completed.Get()) {
		var ret C1ApiPolicyV1CompletedAction
		return ret
	}
	return *o.Completed.Get()
}

// GetCompletedOk returns a tuple with the Completed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiPolicyV1ProvisionInstance) GetCompletedOk() (*C1ApiPolicyV1CompletedAction, bool) {
	if o == nil {
		return nil, false
	}
	return o.Completed.Get(), o.Completed.IsSet()
}

// HasCompleted returns a boolean if a field has been set.
func (o *C1ApiPolicyV1ProvisionInstance) HasCompleted() bool {
	if o != nil && o.Completed.IsSet() {
		return true
	}

	return false
}

// SetCompleted gets a reference to the given NullableC1ApiPolicyV1CompletedAction and assigns it to the Completed field.
func (o *C1ApiPolicyV1ProvisionInstance) SetCompleted(v C1ApiPolicyV1CompletedAction) {
	o.Completed.Set(&v)
}
// SetCompletedNil sets the value for Completed to be an explicit nil
func (o *C1ApiPolicyV1ProvisionInstance) SetCompletedNil() {
	o.Completed.Set(nil)
}

// UnsetCompleted ensures that no value is present for Completed, not even an explicit nil
func (o *C1ApiPolicyV1ProvisionInstance) UnsetCompleted() {
	o.Completed.Unset()
}

// GetErrored returns the Errored field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiPolicyV1ProvisionInstance) GetErrored() C1ApiPolicyV1ErroredAction {
	if o == nil || IsNil(o.Errored.Get()) {
		var ret C1ApiPolicyV1ErroredAction
		return ret
	}
	return *o.Errored.Get()
}

// GetErroredOk returns a tuple with the Errored field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiPolicyV1ProvisionInstance) GetErroredOk() (*C1ApiPolicyV1ErroredAction, bool) {
	if o == nil {
		return nil, false
	}
	return o.Errored.Get(), o.Errored.IsSet()
}

// HasErrored returns a boolean if a field has been set.
func (o *C1ApiPolicyV1ProvisionInstance) HasErrored() bool {
	if o != nil && o.Errored.IsSet() {
		return true
	}

	return false
}

// SetErrored gets a reference to the given NullableC1ApiPolicyV1ErroredAction and assigns it to the Errored field.
func (o *C1ApiPolicyV1ProvisionInstance) SetErrored(v C1ApiPolicyV1ErroredAction) {
	o.Errored.Set(&v)
}
// SetErroredNil sets the value for Errored to be an explicit nil
func (o *C1ApiPolicyV1ProvisionInstance) SetErroredNil() {
	o.Errored.Set(nil)
}

// UnsetErrored ensures that no value is present for Errored, not even an explicit nil
func (o *C1ApiPolicyV1ProvisionInstance) UnsetErrored() {
	o.Errored.Unset()
}

// GetNotificationId returns the NotificationId field value if set, zero value otherwise.
func (o *C1ApiPolicyV1ProvisionInstance) GetNotificationId() string {
	if o == nil || IsNil(o.NotificationId) {
		var ret string
		return ret
	}
	return *o.NotificationId
}

// GetNotificationIdOk returns a tuple with the NotificationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiPolicyV1ProvisionInstance) GetNotificationIdOk() (*string, bool) {
	if o == nil || IsNil(o.NotificationId) {
		return nil, false
	}
	return o.NotificationId, true
}

// HasNotificationId returns a boolean if a field has been set.
func (o *C1ApiPolicyV1ProvisionInstance) HasNotificationId() bool {
	if o != nil && !IsNil(o.NotificationId) {
		return true
	}

	return false
}

// SetNotificationId gets a reference to the given string and assigns it to the NotificationId field.
func (o *C1ApiPolicyV1ProvisionInstance) SetNotificationId(v string) {
	o.NotificationId = &v
}

// GetProvision returns the Provision field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiPolicyV1ProvisionInstance) GetProvision() C1ApiPolicyV1Provision {
	if o == nil || IsNil(o.Provision.Get()) {
		var ret C1ApiPolicyV1Provision
		return ret
	}
	return *o.Provision.Get()
}

// GetProvisionOk returns a tuple with the Provision field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiPolicyV1ProvisionInstance) GetProvisionOk() (*C1ApiPolicyV1Provision, bool) {
	if o == nil {
		return nil, false
	}
	return o.Provision.Get(), o.Provision.IsSet()
}

// HasProvision returns a boolean if a field has been set.
func (o *C1ApiPolicyV1ProvisionInstance) HasProvision() bool {
	if o != nil && o.Provision.IsSet() {
		return true
	}

	return false
}

// SetProvision gets a reference to the given NullableC1ApiPolicyV1Provision and assigns it to the Provision field.
func (o *C1ApiPolicyV1ProvisionInstance) SetProvision(v C1ApiPolicyV1Provision) {
	o.Provision.Set(&v)
}
// SetProvisionNil sets the value for Provision to be an explicit nil
func (o *C1ApiPolicyV1ProvisionInstance) SetProvisionNil() {
	o.Provision.Set(nil)
}

// UnsetProvision ensures that no value is present for Provision, not even an explicit nil
func (o *C1ApiPolicyV1ProvisionInstance) UnsetProvision() {
	o.Provision.Unset()
}

// GetReassignedByError returns the ReassignedByError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiPolicyV1ProvisionInstance) GetReassignedByError() C1ApiPolicyV1ReassignedByErrorAction {
	if o == nil || IsNil(o.ReassignedByError.Get()) {
		var ret C1ApiPolicyV1ReassignedByErrorAction
		return ret
	}
	return *o.ReassignedByError.Get()
}

// GetReassignedByErrorOk returns a tuple with the ReassignedByError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiPolicyV1ProvisionInstance) GetReassignedByErrorOk() (*C1ApiPolicyV1ReassignedByErrorAction, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReassignedByError.Get(), o.ReassignedByError.IsSet()
}

// HasReassignedByError returns a boolean if a field has been set.
func (o *C1ApiPolicyV1ProvisionInstance) HasReassignedByError() bool {
	if o != nil && o.ReassignedByError.IsSet() {
		return true
	}

	return false
}

// SetReassignedByError gets a reference to the given NullableC1ApiPolicyV1ReassignedByErrorAction and assigns it to the ReassignedByError field.
func (o *C1ApiPolicyV1ProvisionInstance) SetReassignedByError(v C1ApiPolicyV1ReassignedByErrorAction) {
	o.ReassignedByError.Set(&v)
}
// SetReassignedByErrorNil sets the value for ReassignedByError to be an explicit nil
func (o *C1ApiPolicyV1ProvisionInstance) SetReassignedByErrorNil() {
	o.ReassignedByError.Set(nil)
}

// UnsetReassignedByError ensures that no value is present for ReassignedByError, not even an explicit nil
func (o *C1ApiPolicyV1ProvisionInstance) UnsetReassignedByError() {
	o.ReassignedByError.Unset()
}

// GetState returns the State field value if set, zero value otherwise.
func (o *C1ApiPolicyV1ProvisionInstance) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiPolicyV1ProvisionInstance) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *C1ApiPolicyV1ProvisionInstance) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *C1ApiPolicyV1ProvisionInstance) SetState(v string) {
	o.State = &v
}

func (o C1ApiPolicyV1ProvisionInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o C1ApiPolicyV1ProvisionInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Cancelled.IsSet() {
		toSerialize["cancelled"] = o.Cancelled.Get()
	}
	if o.Completed.IsSet() {
		toSerialize["completed"] = o.Completed.Get()
	}
	if o.Errored.IsSet() {
		toSerialize["errored"] = o.Errored.Get()
	}
	if !IsNil(o.NotificationId) {
		toSerialize["notificationId"] = o.NotificationId
	}
	if o.Provision.IsSet() {
		toSerialize["provision"] = o.Provision.Get()
	}
	if o.ReassignedByError.IsSet() {
		toSerialize["reassignedByError"] = o.ReassignedByError.Get()
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *C1ApiPolicyV1ProvisionInstance) UnmarshalJSON(bytes []byte) (err error) {
	varC1ApiPolicyV1ProvisionInstance := _C1ApiPolicyV1ProvisionInstance{}

	if err = json.Unmarshal(bytes, &varC1ApiPolicyV1ProvisionInstance); err == nil {
		*o = C1ApiPolicyV1ProvisionInstance(varC1ApiPolicyV1ProvisionInstance)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "cancelled")
		delete(additionalProperties, "completed")
		delete(additionalProperties, "errored")
		delete(additionalProperties, "notificationId")
		delete(additionalProperties, "provision")
		delete(additionalProperties, "reassignedByError")
		delete(additionalProperties, "state")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableC1ApiPolicyV1ProvisionInstance struct {
	value *C1ApiPolicyV1ProvisionInstance
	isSet bool
}

func (v NullableC1ApiPolicyV1ProvisionInstance) Get() *C1ApiPolicyV1ProvisionInstance {
	return v.value
}

func (v *NullableC1ApiPolicyV1ProvisionInstance) Set(val *C1ApiPolicyV1ProvisionInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableC1ApiPolicyV1ProvisionInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableC1ApiPolicyV1ProvisionInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableC1ApiPolicyV1ProvisionInstance(val *C1ApiPolicyV1ProvisionInstance) *NullableC1ApiPolicyV1ProvisionInstance {
	return &NullableC1ApiPolicyV1ProvisionInstance{value: val, isSet: true}
}

func (v NullableC1ApiPolicyV1ProvisionInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableC1ApiPolicyV1ProvisionInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


