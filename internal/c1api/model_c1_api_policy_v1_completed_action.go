/*
ConductorOne API

The ConductorOne API is a HTTP API for managing ConductorOne resources.

API version: 0.1.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c1api

import (
	"encoding/json"
	"time"
)

// checks if the C1ApiPolicyV1CompletedAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &C1ApiPolicyV1CompletedAction{}

// C1ApiPolicyV1CompletedAction The CompletedAction message.
type C1ApiPolicyV1CompletedAction struct {
	CompletedAt *time.Time `json:"completedAt,omitempty"`
	// The entitlements field.
	Entitlements []C1ApiPolicyV1AppEntitlementReference `json:"entitlements,omitempty"`
	// The userId field.
	UserId *string `json:"userId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _C1ApiPolicyV1CompletedAction C1ApiPolicyV1CompletedAction

// NewC1ApiPolicyV1CompletedAction instantiates a new C1ApiPolicyV1CompletedAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewC1ApiPolicyV1CompletedAction() *C1ApiPolicyV1CompletedAction {
	this := C1ApiPolicyV1CompletedAction{}
	return &this
}

// NewC1ApiPolicyV1CompletedActionWithDefaults instantiates a new C1ApiPolicyV1CompletedAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewC1ApiPolicyV1CompletedActionWithDefaults() *C1ApiPolicyV1CompletedAction {
	this := C1ApiPolicyV1CompletedAction{}
	return &this
}

// GetCompletedAt returns the CompletedAt field value if set, zero value otherwise.
func (o *C1ApiPolicyV1CompletedAction) GetCompletedAt() time.Time {
	if o == nil || IsNil(o.CompletedAt) {
		var ret time.Time
		return ret
	}
	return *o.CompletedAt
}

// GetCompletedAtOk returns a tuple with the CompletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiPolicyV1CompletedAction) GetCompletedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CompletedAt) {
		return nil, false
	}
	return o.CompletedAt, true
}

// HasCompletedAt returns a boolean if a field has been set.
func (o *C1ApiPolicyV1CompletedAction) HasCompletedAt() bool {
	if o != nil && !IsNil(o.CompletedAt) {
		return true
	}

	return false
}

// SetCompletedAt gets a reference to the given time.Time and assigns it to the CompletedAt field.
func (o *C1ApiPolicyV1CompletedAction) SetCompletedAt(v time.Time) {
	o.CompletedAt = &v
}

// GetEntitlements returns the Entitlements field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiPolicyV1CompletedAction) GetEntitlements() []C1ApiPolicyV1AppEntitlementReference {
	if o == nil {
		var ret []C1ApiPolicyV1AppEntitlementReference
		return ret
	}
	return o.Entitlements
}

// GetEntitlementsOk returns a tuple with the Entitlements field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiPolicyV1CompletedAction) GetEntitlementsOk() ([]C1ApiPolicyV1AppEntitlementReference, bool) {
	if o == nil || IsNil(o.Entitlements) {
		return nil, false
	}
	return o.Entitlements, true
}

// HasEntitlements returns a boolean if a field has been set.
func (o *C1ApiPolicyV1CompletedAction) HasEntitlements() bool {
	if o != nil && IsNil(o.Entitlements) {
		return true
	}

	return false
}

// SetEntitlements gets a reference to the given []C1ApiPolicyV1AppEntitlementReference and assigns it to the Entitlements field.
func (o *C1ApiPolicyV1CompletedAction) SetEntitlements(v []C1ApiPolicyV1AppEntitlementReference) {
	o.Entitlements = v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *C1ApiPolicyV1CompletedAction) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiPolicyV1CompletedAction) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *C1ApiPolicyV1CompletedAction) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *C1ApiPolicyV1CompletedAction) SetUserId(v string) {
	o.UserId = &v
}

func (o C1ApiPolicyV1CompletedAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o C1ApiPolicyV1CompletedAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CompletedAt) {
		toSerialize["completedAt"] = o.CompletedAt
	}
	if o.Entitlements != nil {
		toSerialize["entitlements"] = o.Entitlements
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *C1ApiPolicyV1CompletedAction) UnmarshalJSON(bytes []byte) (err error) {
	varC1ApiPolicyV1CompletedAction := _C1ApiPolicyV1CompletedAction{}

	if err = json.Unmarshal(bytes, &varC1ApiPolicyV1CompletedAction); err == nil {
		*o = C1ApiPolicyV1CompletedAction(varC1ApiPolicyV1CompletedAction)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "completedAt")
		delete(additionalProperties, "entitlements")
		delete(additionalProperties, "userId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableC1ApiPolicyV1CompletedAction struct {
	value *C1ApiPolicyV1CompletedAction
	isSet bool
}

func (v NullableC1ApiPolicyV1CompletedAction) Get() *C1ApiPolicyV1CompletedAction {
	return v.value
}

func (v *NullableC1ApiPolicyV1CompletedAction) Set(val *C1ApiPolicyV1CompletedAction) {
	v.value = val
	v.isSet = true
}

func (v NullableC1ApiPolicyV1CompletedAction) IsSet() bool {
	return v.isSet
}

func (v *NullableC1ApiPolicyV1CompletedAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableC1ApiPolicyV1CompletedAction(val *C1ApiPolicyV1CompletedAction) *NullableC1ApiPolicyV1CompletedAction {
	return &NullableC1ApiPolicyV1CompletedAction{value: val, isSet: true}
}

func (v NullableC1ApiPolicyV1CompletedAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableC1ApiPolicyV1CompletedAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


