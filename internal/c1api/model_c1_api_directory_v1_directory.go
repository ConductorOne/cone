/*
ConductorOne API

The ConductorOne API is a HTTP API for managing ConductorOne resources.

API version: 0.1.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c1api

import (
	"encoding/json"
	"time"
)

// checks if the C1ApiDirectoryV1Directory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &C1ApiDirectoryV1Directory{}

// C1ApiDirectoryV1Directory The Directory message.
type C1ApiDirectoryV1Directory struct {
	// The appId field.
	AppId *string `json:"appId,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _C1ApiDirectoryV1Directory C1ApiDirectoryV1Directory

// NewC1ApiDirectoryV1Directory instantiates a new C1ApiDirectoryV1Directory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewC1ApiDirectoryV1Directory() *C1ApiDirectoryV1Directory {
	this := C1ApiDirectoryV1Directory{}
	return &this
}

// NewC1ApiDirectoryV1DirectoryWithDefaults instantiates a new C1ApiDirectoryV1Directory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewC1ApiDirectoryV1DirectoryWithDefaults() *C1ApiDirectoryV1Directory {
	this := C1ApiDirectoryV1Directory{}
	return &this
}

// GetAppId returns the AppId field value if set, zero value otherwise.
func (o *C1ApiDirectoryV1Directory) GetAppId() string {
	if o == nil || IsNil(o.AppId) {
		var ret string
		return ret
	}
	return *o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiDirectoryV1Directory) GetAppIdOk() (*string, bool) {
	if o == nil || IsNil(o.AppId) {
		return nil, false
	}
	return o.AppId, true
}

// HasAppId returns a boolean if a field has been set.
func (o *C1ApiDirectoryV1Directory) HasAppId() bool {
	if o != nil && !IsNil(o.AppId) {
		return true
	}

	return false
}

// SetAppId gets a reference to the given string and assigns it to the AppId field.
func (o *C1ApiDirectoryV1Directory) SetAppId(v string) {
	o.AppId = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *C1ApiDirectoryV1Directory) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiDirectoryV1Directory) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *C1ApiDirectoryV1Directory) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *C1ApiDirectoryV1Directory) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *C1ApiDirectoryV1Directory) GetDeletedAt() time.Time {
	if o == nil || IsNil(o.DeletedAt) {
		var ret time.Time
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiDirectoryV1Directory) GetDeletedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *C1ApiDirectoryV1Directory) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given time.Time and assigns it to the DeletedAt field.
func (o *C1ApiDirectoryV1Directory) SetDeletedAt(v time.Time) {
	o.DeletedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *C1ApiDirectoryV1Directory) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiDirectoryV1Directory) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *C1ApiDirectoryV1Directory) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *C1ApiDirectoryV1Directory) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o C1ApiDirectoryV1Directory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o C1ApiDirectoryV1Directory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AppId) {
		toSerialize["appId"] = o.AppId
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deletedAt"] = o.DeletedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *C1ApiDirectoryV1Directory) UnmarshalJSON(bytes []byte) (err error) {
	varC1ApiDirectoryV1Directory := _C1ApiDirectoryV1Directory{}

	if err = json.Unmarshal(bytes, &varC1ApiDirectoryV1Directory); err == nil {
		*o = C1ApiDirectoryV1Directory(varC1ApiDirectoryV1Directory)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "appId")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "deletedAt")
		delete(additionalProperties, "updatedAt")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableC1ApiDirectoryV1Directory struct {
	value *C1ApiDirectoryV1Directory
	isSet bool
}

func (v NullableC1ApiDirectoryV1Directory) Get() *C1ApiDirectoryV1Directory {
	return v.value
}

func (v *NullableC1ApiDirectoryV1Directory) Set(val *C1ApiDirectoryV1Directory) {
	v.value = val
	v.isSet = true
}

func (v NullableC1ApiDirectoryV1Directory) IsSet() bool {
	return v.isSet
}

func (v *NullableC1ApiDirectoryV1Directory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableC1ApiDirectoryV1Directory(val *C1ApiDirectoryV1Directory) *NullableC1ApiDirectoryV1Directory {
	return &NullableC1ApiDirectoryV1Directory{value: val, isSet: true}
}

func (v NullableC1ApiDirectoryV1Directory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableC1ApiDirectoryV1Directory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


