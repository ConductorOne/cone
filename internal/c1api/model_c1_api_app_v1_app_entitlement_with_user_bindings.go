/*
ConductorOne API

The ConductorOne API is a HTTP API for managing ConductorOne resources.

API version: 0.1.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c1api

import (
	"encoding/json"
)

// checks if the C1ApiAppV1AppEntitlementWithUserBindings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &C1ApiAppV1AppEntitlementWithUserBindings{}

// C1ApiAppV1AppEntitlementWithUserBindings The AppEntitlementWithUserBindings message.
type C1ApiAppV1AppEntitlementWithUserBindings struct {
	// The appEntitlementUserBindings field.
	AppEntitlementUserBindings []C1ApiAppV1AppEntitlementUserBinding `json:"appEntitlementUserBindings,omitempty"`
	Entitlement *C1ApiAppV1AppEntitlementView `json:"entitlement,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _C1ApiAppV1AppEntitlementWithUserBindings C1ApiAppV1AppEntitlementWithUserBindings

// NewC1ApiAppV1AppEntitlementWithUserBindings instantiates a new C1ApiAppV1AppEntitlementWithUserBindings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewC1ApiAppV1AppEntitlementWithUserBindings() *C1ApiAppV1AppEntitlementWithUserBindings {
	this := C1ApiAppV1AppEntitlementWithUserBindings{}
	return &this
}

// NewC1ApiAppV1AppEntitlementWithUserBindingsWithDefaults instantiates a new C1ApiAppV1AppEntitlementWithUserBindings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewC1ApiAppV1AppEntitlementWithUserBindingsWithDefaults() *C1ApiAppV1AppEntitlementWithUserBindings {
	this := C1ApiAppV1AppEntitlementWithUserBindings{}
	return &this
}

// GetAppEntitlementUserBindings returns the AppEntitlementUserBindings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiAppV1AppEntitlementWithUserBindings) GetAppEntitlementUserBindings() []C1ApiAppV1AppEntitlementUserBinding {
	if o == nil {
		var ret []C1ApiAppV1AppEntitlementUserBinding
		return ret
	}
	return o.AppEntitlementUserBindings
}

// GetAppEntitlementUserBindingsOk returns a tuple with the AppEntitlementUserBindings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiAppV1AppEntitlementWithUserBindings) GetAppEntitlementUserBindingsOk() ([]C1ApiAppV1AppEntitlementUserBinding, bool) {
	if o == nil || IsNil(o.AppEntitlementUserBindings) {
		return nil, false
	}
	return o.AppEntitlementUserBindings, true
}

// HasAppEntitlementUserBindings returns a boolean if a field has been set.
func (o *C1ApiAppV1AppEntitlementWithUserBindings) HasAppEntitlementUserBindings() bool {
	if o != nil && IsNil(o.AppEntitlementUserBindings) {
		return true
	}

	return false
}

// SetAppEntitlementUserBindings gets a reference to the given []C1ApiAppV1AppEntitlementUserBinding and assigns it to the AppEntitlementUserBindings field.
func (o *C1ApiAppV1AppEntitlementWithUserBindings) SetAppEntitlementUserBindings(v []C1ApiAppV1AppEntitlementUserBinding) {
	o.AppEntitlementUserBindings = v
}

// GetEntitlement returns the Entitlement field value if set, zero value otherwise.
func (o *C1ApiAppV1AppEntitlementWithUserBindings) GetEntitlement() C1ApiAppV1AppEntitlementView {
	if o == nil || IsNil(o.Entitlement) {
		var ret C1ApiAppV1AppEntitlementView
		return ret
	}
	return *o.Entitlement
}

// GetEntitlementOk returns a tuple with the Entitlement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiAppV1AppEntitlementWithUserBindings) GetEntitlementOk() (*C1ApiAppV1AppEntitlementView, bool) {
	if o == nil || IsNil(o.Entitlement) {
		return nil, false
	}
	return o.Entitlement, true
}

// HasEntitlement returns a boolean if a field has been set.
func (o *C1ApiAppV1AppEntitlementWithUserBindings) HasEntitlement() bool {
	if o != nil && !IsNil(o.Entitlement) {
		return true
	}

	return false
}

// SetEntitlement gets a reference to the given C1ApiAppV1AppEntitlementView and assigns it to the Entitlement field.
func (o *C1ApiAppV1AppEntitlementWithUserBindings) SetEntitlement(v C1ApiAppV1AppEntitlementView) {
	o.Entitlement = &v
}

func (o C1ApiAppV1AppEntitlementWithUserBindings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o C1ApiAppV1AppEntitlementWithUserBindings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AppEntitlementUserBindings != nil {
		toSerialize["appEntitlementUserBindings"] = o.AppEntitlementUserBindings
	}
	if !IsNil(o.Entitlement) {
		toSerialize["entitlement"] = o.Entitlement
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *C1ApiAppV1AppEntitlementWithUserBindings) UnmarshalJSON(bytes []byte) (err error) {
	varC1ApiAppV1AppEntitlementWithUserBindings := _C1ApiAppV1AppEntitlementWithUserBindings{}

	if err = json.Unmarshal(bytes, &varC1ApiAppV1AppEntitlementWithUserBindings); err == nil {
		*o = C1ApiAppV1AppEntitlementWithUserBindings(varC1ApiAppV1AppEntitlementWithUserBindings)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "appEntitlementUserBindings")
		delete(additionalProperties, "entitlement")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableC1ApiAppV1AppEntitlementWithUserBindings struct {
	value *C1ApiAppV1AppEntitlementWithUserBindings
	isSet bool
}

func (v NullableC1ApiAppV1AppEntitlementWithUserBindings) Get() *C1ApiAppV1AppEntitlementWithUserBindings {
	return v.value
}

func (v *NullableC1ApiAppV1AppEntitlementWithUserBindings) Set(val *C1ApiAppV1AppEntitlementWithUserBindings) {
	v.value = val
	v.isSet = true
}

func (v NullableC1ApiAppV1AppEntitlementWithUserBindings) IsSet() bool {
	return v.isSet
}

func (v *NullableC1ApiAppV1AppEntitlementWithUserBindings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableC1ApiAppV1AppEntitlementWithUserBindings(val *C1ApiAppV1AppEntitlementWithUserBindings) *NullableC1ApiAppV1AppEntitlementWithUserBindings {
	return &NullableC1ApiAppV1AppEntitlementWithUserBindings{value: val, isSet: true}
}

func (v NullableC1ApiAppV1AppEntitlementWithUserBindings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableC1ApiAppV1AppEntitlementWithUserBindings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


