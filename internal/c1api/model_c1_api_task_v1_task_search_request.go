/*
ConductorOne API

The ConductorOne API is a HTTP API for managing ConductorOne resources.

API version: 0.1.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c1api

import (
	"encoding/json"
	"time"
)

// checks if the C1ApiTaskV1TaskSearchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &C1ApiTaskV1TaskSearchRequest{}

// C1ApiTaskV1TaskSearchRequest The TaskSearchRequest message.
type C1ApiTaskV1TaskSearchRequest struct {
	// The accessReviewIds field.
	AccessReviewIds []string `json:"accessReviewIds,omitempty"`
	// The accountOwnerIds field.
	AccountOwnerIds []string `json:"accountOwnerIds,omitempty"`
	// The actorId field.
	ActorId *string `json:"actorId,omitempty"`
	// The appEntitlementIds field.
	AppEntitlementIds []string `json:"appEntitlementIds,omitempty"`
	// The appResourceIds field.
	AppResourceIds []string `json:"appResourceIds,omitempty"`
	// The appResourceTypeIds field.
	AppResourceTypeIds []string `json:"appResourceTypeIds,omitempty"`
	//  Find Tasks which are referncing a Set of AppUserIDs 
	AppUserSubjectIds []string `json:"appUserSubjectIds,omitempty"`
	// The applicationIds field.
	ApplicationIds []string `json:"applicationIds,omitempty"`
	//  Search tasks by  List of UserIDs which are currently assigned these Tasks 
	AssigneesInIds []string `json:"assigneesInIds,omitempty"`
	CreatedAfter *time.Time `json:"createdAfter,omitempty"`
	CreatedBefore *time.Time `json:"createdBefore,omitempty"`
	// The currentStep field.
	CurrentStep *string `json:"currentStep,omitempty"`
	// The excludeAppEntitlementIds field.
	ExcludeAppEntitlementIds []string `json:"excludeAppEntitlementIds,omitempty"`
	//  Exclude Specific TaskIDs from this serach result. 
	ExcludeIds []string `json:"excludeIds,omitempty"`
	ExpandMask *C1ApiTaskV1TaskExpandMask `json:"expandMask,omitempty"`
	// The includeDeleted field.
	IncludeDeleted *bool `json:"includeDeleted,omitempty"`
	//  Search tasks by a List of UserIDs which are currently assigned to OR have previously acted upon this Task 
	MyWorkUserIds []string `json:"myWorkUserIds,omitempty"`
	//  Find a Task which was opened by UserIDs 
	OpenerIds []string `json:"openerIds,omitempty"`
	// The pageSize field.
	PageSize *float32 `json:"pageSize,omitempty"`
	// The pageToken field.
	PageToken *string `json:"pageToken,omitempty"`
	//  Search tasks by a  List of UserIDs which have previously approved or otherwise acted upon this Task 
	PreviouslyActedOnIds []string `json:"previouslyActedOnIds,omitempty"`
	// The query field.
	Query *string `json:"query,omitempty"`
	// The refs field.
	Refs []C1ApiTaskV1TaskRef `json:"refs,omitempty"`
	// The sortBy field.
	SortBy *string `json:"sortBy,omitempty"`
	//  Find Tasks which are referncing this C1 UserID 
	SubjectIds []string `json:"subjectIds,omitempty"`
	// The taskStates field.
	TaskStates []string `json:"taskStates,omitempty"`
	//  TODO(pquerna): why is this a MESSAGE that only CONTAINS AN ENUM? 
	TaskTypes []C1ApiTaskV1TaskType `json:"taskTypes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _C1ApiTaskV1TaskSearchRequest C1ApiTaskV1TaskSearchRequest

// NewC1ApiTaskV1TaskSearchRequest instantiates a new C1ApiTaskV1TaskSearchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewC1ApiTaskV1TaskSearchRequest() *C1ApiTaskV1TaskSearchRequest {
	this := C1ApiTaskV1TaskSearchRequest{}
	return &this
}

// NewC1ApiTaskV1TaskSearchRequestWithDefaults instantiates a new C1ApiTaskV1TaskSearchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewC1ApiTaskV1TaskSearchRequestWithDefaults() *C1ApiTaskV1TaskSearchRequest {
	this := C1ApiTaskV1TaskSearchRequest{}
	return &this
}

// GetAccessReviewIds returns the AccessReviewIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiTaskV1TaskSearchRequest) GetAccessReviewIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.AccessReviewIds
}

// GetAccessReviewIdsOk returns a tuple with the AccessReviewIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiTaskV1TaskSearchRequest) GetAccessReviewIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.AccessReviewIds) {
		return nil, false
	}
	return o.AccessReviewIds, true
}

// HasAccessReviewIds returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskSearchRequest) HasAccessReviewIds() bool {
	if o != nil && IsNil(o.AccessReviewIds) {
		return true
	}

	return false
}

// SetAccessReviewIds gets a reference to the given []string and assigns it to the AccessReviewIds field.
func (o *C1ApiTaskV1TaskSearchRequest) SetAccessReviewIds(v []string) {
	o.AccessReviewIds = v
}

// GetAccountOwnerIds returns the AccountOwnerIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiTaskV1TaskSearchRequest) GetAccountOwnerIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.AccountOwnerIds
}

// GetAccountOwnerIdsOk returns a tuple with the AccountOwnerIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiTaskV1TaskSearchRequest) GetAccountOwnerIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.AccountOwnerIds) {
		return nil, false
	}
	return o.AccountOwnerIds, true
}

// HasAccountOwnerIds returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskSearchRequest) HasAccountOwnerIds() bool {
	if o != nil && IsNil(o.AccountOwnerIds) {
		return true
	}

	return false
}

// SetAccountOwnerIds gets a reference to the given []string and assigns it to the AccountOwnerIds field.
func (o *C1ApiTaskV1TaskSearchRequest) SetAccountOwnerIds(v []string) {
	o.AccountOwnerIds = v
}

// GetActorId returns the ActorId field value if set, zero value otherwise.
func (o *C1ApiTaskV1TaskSearchRequest) GetActorId() string {
	if o == nil || IsNil(o.ActorId) {
		var ret string
		return ret
	}
	return *o.ActorId
}

// GetActorIdOk returns a tuple with the ActorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1TaskSearchRequest) GetActorIdOk() (*string, bool) {
	if o == nil || IsNil(o.ActorId) {
		return nil, false
	}
	return o.ActorId, true
}

// HasActorId returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskSearchRequest) HasActorId() bool {
	if o != nil && !IsNil(o.ActorId) {
		return true
	}

	return false
}

// SetActorId gets a reference to the given string and assigns it to the ActorId field.
func (o *C1ApiTaskV1TaskSearchRequest) SetActorId(v string) {
	o.ActorId = &v
}

// GetAppEntitlementIds returns the AppEntitlementIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiTaskV1TaskSearchRequest) GetAppEntitlementIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.AppEntitlementIds
}

// GetAppEntitlementIdsOk returns a tuple with the AppEntitlementIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiTaskV1TaskSearchRequest) GetAppEntitlementIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.AppEntitlementIds) {
		return nil, false
	}
	return o.AppEntitlementIds, true
}

// HasAppEntitlementIds returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskSearchRequest) HasAppEntitlementIds() bool {
	if o != nil && IsNil(o.AppEntitlementIds) {
		return true
	}

	return false
}

// SetAppEntitlementIds gets a reference to the given []string and assigns it to the AppEntitlementIds field.
func (o *C1ApiTaskV1TaskSearchRequest) SetAppEntitlementIds(v []string) {
	o.AppEntitlementIds = v
}

// GetAppResourceIds returns the AppResourceIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiTaskV1TaskSearchRequest) GetAppResourceIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.AppResourceIds
}

// GetAppResourceIdsOk returns a tuple with the AppResourceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiTaskV1TaskSearchRequest) GetAppResourceIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.AppResourceIds) {
		return nil, false
	}
	return o.AppResourceIds, true
}

// HasAppResourceIds returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskSearchRequest) HasAppResourceIds() bool {
	if o != nil && IsNil(o.AppResourceIds) {
		return true
	}

	return false
}

// SetAppResourceIds gets a reference to the given []string and assigns it to the AppResourceIds field.
func (o *C1ApiTaskV1TaskSearchRequest) SetAppResourceIds(v []string) {
	o.AppResourceIds = v
}

// GetAppResourceTypeIds returns the AppResourceTypeIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiTaskV1TaskSearchRequest) GetAppResourceTypeIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.AppResourceTypeIds
}

// GetAppResourceTypeIdsOk returns a tuple with the AppResourceTypeIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiTaskV1TaskSearchRequest) GetAppResourceTypeIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.AppResourceTypeIds) {
		return nil, false
	}
	return o.AppResourceTypeIds, true
}

// HasAppResourceTypeIds returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskSearchRequest) HasAppResourceTypeIds() bool {
	if o != nil && IsNil(o.AppResourceTypeIds) {
		return true
	}

	return false
}

// SetAppResourceTypeIds gets a reference to the given []string and assigns it to the AppResourceTypeIds field.
func (o *C1ApiTaskV1TaskSearchRequest) SetAppResourceTypeIds(v []string) {
	o.AppResourceTypeIds = v
}

// GetAppUserSubjectIds returns the AppUserSubjectIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiTaskV1TaskSearchRequest) GetAppUserSubjectIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.AppUserSubjectIds
}

// GetAppUserSubjectIdsOk returns a tuple with the AppUserSubjectIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiTaskV1TaskSearchRequest) GetAppUserSubjectIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.AppUserSubjectIds) {
		return nil, false
	}
	return o.AppUserSubjectIds, true
}

// HasAppUserSubjectIds returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskSearchRequest) HasAppUserSubjectIds() bool {
	if o != nil && IsNil(o.AppUserSubjectIds) {
		return true
	}

	return false
}

// SetAppUserSubjectIds gets a reference to the given []string and assigns it to the AppUserSubjectIds field.
func (o *C1ApiTaskV1TaskSearchRequest) SetAppUserSubjectIds(v []string) {
	o.AppUserSubjectIds = v
}

// GetApplicationIds returns the ApplicationIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiTaskV1TaskSearchRequest) GetApplicationIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ApplicationIds
}

// GetApplicationIdsOk returns a tuple with the ApplicationIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiTaskV1TaskSearchRequest) GetApplicationIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ApplicationIds) {
		return nil, false
	}
	return o.ApplicationIds, true
}

// HasApplicationIds returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskSearchRequest) HasApplicationIds() bool {
	if o != nil && IsNil(o.ApplicationIds) {
		return true
	}

	return false
}

// SetApplicationIds gets a reference to the given []string and assigns it to the ApplicationIds field.
func (o *C1ApiTaskV1TaskSearchRequest) SetApplicationIds(v []string) {
	o.ApplicationIds = v
}

// GetAssigneesInIds returns the AssigneesInIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiTaskV1TaskSearchRequest) GetAssigneesInIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.AssigneesInIds
}

// GetAssigneesInIdsOk returns a tuple with the AssigneesInIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiTaskV1TaskSearchRequest) GetAssigneesInIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.AssigneesInIds) {
		return nil, false
	}
	return o.AssigneesInIds, true
}

// HasAssigneesInIds returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskSearchRequest) HasAssigneesInIds() bool {
	if o != nil && IsNil(o.AssigneesInIds) {
		return true
	}

	return false
}

// SetAssigneesInIds gets a reference to the given []string and assigns it to the AssigneesInIds field.
func (o *C1ApiTaskV1TaskSearchRequest) SetAssigneesInIds(v []string) {
	o.AssigneesInIds = v
}

// GetCreatedAfter returns the CreatedAfter field value if set, zero value otherwise.
func (o *C1ApiTaskV1TaskSearchRequest) GetCreatedAfter() time.Time {
	if o == nil || IsNil(o.CreatedAfter) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAfter
}

// GetCreatedAfterOk returns a tuple with the CreatedAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1TaskSearchRequest) GetCreatedAfterOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAfter) {
		return nil, false
	}
	return o.CreatedAfter, true
}

// HasCreatedAfter returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskSearchRequest) HasCreatedAfter() bool {
	if o != nil && !IsNil(o.CreatedAfter) {
		return true
	}

	return false
}

// SetCreatedAfter gets a reference to the given time.Time and assigns it to the CreatedAfter field.
func (o *C1ApiTaskV1TaskSearchRequest) SetCreatedAfter(v time.Time) {
	o.CreatedAfter = &v
}

// GetCreatedBefore returns the CreatedBefore field value if set, zero value otherwise.
func (o *C1ApiTaskV1TaskSearchRequest) GetCreatedBefore() time.Time {
	if o == nil || IsNil(o.CreatedBefore) {
		var ret time.Time
		return ret
	}
	return *o.CreatedBefore
}

// GetCreatedBeforeOk returns a tuple with the CreatedBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1TaskSearchRequest) GetCreatedBeforeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedBefore) {
		return nil, false
	}
	return o.CreatedBefore, true
}

// HasCreatedBefore returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskSearchRequest) HasCreatedBefore() bool {
	if o != nil && !IsNil(o.CreatedBefore) {
		return true
	}

	return false
}

// SetCreatedBefore gets a reference to the given time.Time and assigns it to the CreatedBefore field.
func (o *C1ApiTaskV1TaskSearchRequest) SetCreatedBefore(v time.Time) {
	o.CreatedBefore = &v
}

// GetCurrentStep returns the CurrentStep field value if set, zero value otherwise.
func (o *C1ApiTaskV1TaskSearchRequest) GetCurrentStep() string {
	if o == nil || IsNil(o.CurrentStep) {
		var ret string
		return ret
	}
	return *o.CurrentStep
}

// GetCurrentStepOk returns a tuple with the CurrentStep field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1TaskSearchRequest) GetCurrentStepOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentStep) {
		return nil, false
	}
	return o.CurrentStep, true
}

// HasCurrentStep returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskSearchRequest) HasCurrentStep() bool {
	if o != nil && !IsNil(o.CurrentStep) {
		return true
	}

	return false
}

// SetCurrentStep gets a reference to the given string and assigns it to the CurrentStep field.
func (o *C1ApiTaskV1TaskSearchRequest) SetCurrentStep(v string) {
	o.CurrentStep = &v
}

// GetExcludeAppEntitlementIds returns the ExcludeAppEntitlementIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiTaskV1TaskSearchRequest) GetExcludeAppEntitlementIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ExcludeAppEntitlementIds
}

// GetExcludeAppEntitlementIdsOk returns a tuple with the ExcludeAppEntitlementIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiTaskV1TaskSearchRequest) GetExcludeAppEntitlementIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ExcludeAppEntitlementIds) {
		return nil, false
	}
	return o.ExcludeAppEntitlementIds, true
}

// HasExcludeAppEntitlementIds returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskSearchRequest) HasExcludeAppEntitlementIds() bool {
	if o != nil && IsNil(o.ExcludeAppEntitlementIds) {
		return true
	}

	return false
}

// SetExcludeAppEntitlementIds gets a reference to the given []string and assigns it to the ExcludeAppEntitlementIds field.
func (o *C1ApiTaskV1TaskSearchRequest) SetExcludeAppEntitlementIds(v []string) {
	o.ExcludeAppEntitlementIds = v
}

// GetExcludeIds returns the ExcludeIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiTaskV1TaskSearchRequest) GetExcludeIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ExcludeIds
}

// GetExcludeIdsOk returns a tuple with the ExcludeIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiTaskV1TaskSearchRequest) GetExcludeIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ExcludeIds) {
		return nil, false
	}
	return o.ExcludeIds, true
}

// HasExcludeIds returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskSearchRequest) HasExcludeIds() bool {
	if o != nil && IsNil(o.ExcludeIds) {
		return true
	}

	return false
}

// SetExcludeIds gets a reference to the given []string and assigns it to the ExcludeIds field.
func (o *C1ApiTaskV1TaskSearchRequest) SetExcludeIds(v []string) {
	o.ExcludeIds = v
}

// GetExpandMask returns the ExpandMask field value if set, zero value otherwise.
func (o *C1ApiTaskV1TaskSearchRequest) GetExpandMask() C1ApiTaskV1TaskExpandMask {
	if o == nil || IsNil(o.ExpandMask) {
		var ret C1ApiTaskV1TaskExpandMask
		return ret
	}
	return *o.ExpandMask
}

// GetExpandMaskOk returns a tuple with the ExpandMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1TaskSearchRequest) GetExpandMaskOk() (*C1ApiTaskV1TaskExpandMask, bool) {
	if o == nil || IsNil(o.ExpandMask) {
		return nil, false
	}
	return o.ExpandMask, true
}

// HasExpandMask returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskSearchRequest) HasExpandMask() bool {
	if o != nil && !IsNil(o.ExpandMask) {
		return true
	}

	return false
}

// SetExpandMask gets a reference to the given C1ApiTaskV1TaskExpandMask and assigns it to the ExpandMask field.
func (o *C1ApiTaskV1TaskSearchRequest) SetExpandMask(v C1ApiTaskV1TaskExpandMask) {
	o.ExpandMask = &v
}

// GetIncludeDeleted returns the IncludeDeleted field value if set, zero value otherwise.
func (o *C1ApiTaskV1TaskSearchRequest) GetIncludeDeleted() bool {
	if o == nil || IsNil(o.IncludeDeleted) {
		var ret bool
		return ret
	}
	return *o.IncludeDeleted
}

// GetIncludeDeletedOk returns a tuple with the IncludeDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1TaskSearchRequest) GetIncludeDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeDeleted) {
		return nil, false
	}
	return o.IncludeDeleted, true
}

// HasIncludeDeleted returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskSearchRequest) HasIncludeDeleted() bool {
	if o != nil && !IsNil(o.IncludeDeleted) {
		return true
	}

	return false
}

// SetIncludeDeleted gets a reference to the given bool and assigns it to the IncludeDeleted field.
func (o *C1ApiTaskV1TaskSearchRequest) SetIncludeDeleted(v bool) {
	o.IncludeDeleted = &v
}

// GetMyWorkUserIds returns the MyWorkUserIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiTaskV1TaskSearchRequest) GetMyWorkUserIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.MyWorkUserIds
}

// GetMyWorkUserIdsOk returns a tuple with the MyWorkUserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiTaskV1TaskSearchRequest) GetMyWorkUserIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.MyWorkUserIds) {
		return nil, false
	}
	return o.MyWorkUserIds, true
}

// HasMyWorkUserIds returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskSearchRequest) HasMyWorkUserIds() bool {
	if o != nil && IsNil(o.MyWorkUserIds) {
		return true
	}

	return false
}

// SetMyWorkUserIds gets a reference to the given []string and assigns it to the MyWorkUserIds field.
func (o *C1ApiTaskV1TaskSearchRequest) SetMyWorkUserIds(v []string) {
	o.MyWorkUserIds = v
}

// GetOpenerIds returns the OpenerIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiTaskV1TaskSearchRequest) GetOpenerIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.OpenerIds
}

// GetOpenerIdsOk returns a tuple with the OpenerIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiTaskV1TaskSearchRequest) GetOpenerIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.OpenerIds) {
		return nil, false
	}
	return o.OpenerIds, true
}

// HasOpenerIds returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskSearchRequest) HasOpenerIds() bool {
	if o != nil && IsNil(o.OpenerIds) {
		return true
	}

	return false
}

// SetOpenerIds gets a reference to the given []string and assigns it to the OpenerIds field.
func (o *C1ApiTaskV1TaskSearchRequest) SetOpenerIds(v []string) {
	o.OpenerIds = v
}

// GetPageSize returns the PageSize field value if set, zero value otherwise.
func (o *C1ApiTaskV1TaskSearchRequest) GetPageSize() float32 {
	if o == nil || IsNil(o.PageSize) {
		var ret float32
		return ret
	}
	return *o.PageSize
}

// GetPageSizeOk returns a tuple with the PageSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1TaskSearchRequest) GetPageSizeOk() (*float32, bool) {
	if o == nil || IsNil(o.PageSize) {
		return nil, false
	}
	return o.PageSize, true
}

// HasPageSize returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskSearchRequest) HasPageSize() bool {
	if o != nil && !IsNil(o.PageSize) {
		return true
	}

	return false
}

// SetPageSize gets a reference to the given float32 and assigns it to the PageSize field.
func (o *C1ApiTaskV1TaskSearchRequest) SetPageSize(v float32) {
	o.PageSize = &v
}

// GetPageToken returns the PageToken field value if set, zero value otherwise.
func (o *C1ApiTaskV1TaskSearchRequest) GetPageToken() string {
	if o == nil || IsNil(o.PageToken) {
		var ret string
		return ret
	}
	return *o.PageToken
}

// GetPageTokenOk returns a tuple with the PageToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1TaskSearchRequest) GetPageTokenOk() (*string, bool) {
	if o == nil || IsNil(o.PageToken) {
		return nil, false
	}
	return o.PageToken, true
}

// HasPageToken returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskSearchRequest) HasPageToken() bool {
	if o != nil && !IsNil(o.PageToken) {
		return true
	}

	return false
}

// SetPageToken gets a reference to the given string and assigns it to the PageToken field.
func (o *C1ApiTaskV1TaskSearchRequest) SetPageToken(v string) {
	o.PageToken = &v
}

// GetPreviouslyActedOnIds returns the PreviouslyActedOnIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiTaskV1TaskSearchRequest) GetPreviouslyActedOnIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.PreviouslyActedOnIds
}

// GetPreviouslyActedOnIdsOk returns a tuple with the PreviouslyActedOnIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiTaskV1TaskSearchRequest) GetPreviouslyActedOnIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.PreviouslyActedOnIds) {
		return nil, false
	}
	return o.PreviouslyActedOnIds, true
}

// HasPreviouslyActedOnIds returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskSearchRequest) HasPreviouslyActedOnIds() bool {
	if o != nil && IsNil(o.PreviouslyActedOnIds) {
		return true
	}

	return false
}

// SetPreviouslyActedOnIds gets a reference to the given []string and assigns it to the PreviouslyActedOnIds field.
func (o *C1ApiTaskV1TaskSearchRequest) SetPreviouslyActedOnIds(v []string) {
	o.PreviouslyActedOnIds = v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *C1ApiTaskV1TaskSearchRequest) GetQuery() string {
	if o == nil || IsNil(o.Query) {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1TaskSearchRequest) GetQueryOk() (*string, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskSearchRequest) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *C1ApiTaskV1TaskSearchRequest) SetQuery(v string) {
	o.Query = &v
}

// GetRefs returns the Refs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiTaskV1TaskSearchRequest) GetRefs() []C1ApiTaskV1TaskRef {
	if o == nil {
		var ret []C1ApiTaskV1TaskRef
		return ret
	}
	return o.Refs
}

// GetRefsOk returns a tuple with the Refs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiTaskV1TaskSearchRequest) GetRefsOk() ([]C1ApiTaskV1TaskRef, bool) {
	if o == nil || IsNil(o.Refs) {
		return nil, false
	}
	return o.Refs, true
}

// HasRefs returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskSearchRequest) HasRefs() bool {
	if o != nil && IsNil(o.Refs) {
		return true
	}

	return false
}

// SetRefs gets a reference to the given []C1ApiTaskV1TaskRef and assigns it to the Refs field.
func (o *C1ApiTaskV1TaskSearchRequest) SetRefs(v []C1ApiTaskV1TaskRef) {
	o.Refs = v
}

// GetSortBy returns the SortBy field value if set, zero value otherwise.
func (o *C1ApiTaskV1TaskSearchRequest) GetSortBy() string {
	if o == nil || IsNil(o.SortBy) {
		var ret string
		return ret
	}
	return *o.SortBy
}

// GetSortByOk returns a tuple with the SortBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiTaskV1TaskSearchRequest) GetSortByOk() (*string, bool) {
	if o == nil || IsNil(o.SortBy) {
		return nil, false
	}
	return o.SortBy, true
}

// HasSortBy returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskSearchRequest) HasSortBy() bool {
	if o != nil && !IsNil(o.SortBy) {
		return true
	}

	return false
}

// SetSortBy gets a reference to the given string and assigns it to the SortBy field.
func (o *C1ApiTaskV1TaskSearchRequest) SetSortBy(v string) {
	o.SortBy = &v
}

// GetSubjectIds returns the SubjectIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiTaskV1TaskSearchRequest) GetSubjectIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.SubjectIds
}

// GetSubjectIdsOk returns a tuple with the SubjectIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiTaskV1TaskSearchRequest) GetSubjectIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.SubjectIds) {
		return nil, false
	}
	return o.SubjectIds, true
}

// HasSubjectIds returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskSearchRequest) HasSubjectIds() bool {
	if o != nil && IsNil(o.SubjectIds) {
		return true
	}

	return false
}

// SetSubjectIds gets a reference to the given []string and assigns it to the SubjectIds field.
func (o *C1ApiTaskV1TaskSearchRequest) SetSubjectIds(v []string) {
	o.SubjectIds = v
}

// GetTaskStates returns the TaskStates field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiTaskV1TaskSearchRequest) GetTaskStates() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.TaskStates
}

// GetTaskStatesOk returns a tuple with the TaskStates field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiTaskV1TaskSearchRequest) GetTaskStatesOk() ([]string, bool) {
	if o == nil || IsNil(o.TaskStates) {
		return nil, false
	}
	return o.TaskStates, true
}

// HasTaskStates returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskSearchRequest) HasTaskStates() bool {
	if o != nil && IsNil(o.TaskStates) {
		return true
	}

	return false
}

// SetTaskStates gets a reference to the given []string and assigns it to the TaskStates field.
func (o *C1ApiTaskV1TaskSearchRequest) SetTaskStates(v []string) {
	o.TaskStates = v
}

// GetTaskTypes returns the TaskTypes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *C1ApiTaskV1TaskSearchRequest) GetTaskTypes() []C1ApiTaskV1TaskType {
	if o == nil {
		var ret []C1ApiTaskV1TaskType
		return ret
	}
	return o.TaskTypes
}

// GetTaskTypesOk returns a tuple with the TaskTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *C1ApiTaskV1TaskSearchRequest) GetTaskTypesOk() ([]C1ApiTaskV1TaskType, bool) {
	if o == nil || IsNil(o.TaskTypes) {
		return nil, false
	}
	return o.TaskTypes, true
}

// HasTaskTypes returns a boolean if a field has been set.
func (o *C1ApiTaskV1TaskSearchRequest) HasTaskTypes() bool {
	if o != nil && IsNil(o.TaskTypes) {
		return true
	}

	return false
}

// SetTaskTypes gets a reference to the given []C1ApiTaskV1TaskType and assigns it to the TaskTypes field.
func (o *C1ApiTaskV1TaskSearchRequest) SetTaskTypes(v []C1ApiTaskV1TaskType) {
	o.TaskTypes = v
}

func (o C1ApiTaskV1TaskSearchRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o C1ApiTaskV1TaskSearchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessReviewIds != nil {
		toSerialize["accessReviewIds"] = o.AccessReviewIds
	}
	if o.AccountOwnerIds != nil {
		toSerialize["accountOwnerIds"] = o.AccountOwnerIds
	}
	if !IsNil(o.ActorId) {
		toSerialize["actorId"] = o.ActorId
	}
	if o.AppEntitlementIds != nil {
		toSerialize["appEntitlementIds"] = o.AppEntitlementIds
	}
	if o.AppResourceIds != nil {
		toSerialize["appResourceIds"] = o.AppResourceIds
	}
	if o.AppResourceTypeIds != nil {
		toSerialize["appResourceTypeIds"] = o.AppResourceTypeIds
	}
	if o.AppUserSubjectIds != nil {
		toSerialize["appUserSubjectIds"] = o.AppUserSubjectIds
	}
	if o.ApplicationIds != nil {
		toSerialize["applicationIds"] = o.ApplicationIds
	}
	if o.AssigneesInIds != nil {
		toSerialize["assigneesInIds"] = o.AssigneesInIds
	}
	if !IsNil(o.CreatedAfter) {
		toSerialize["createdAfter"] = o.CreatedAfter
	}
	if !IsNil(o.CreatedBefore) {
		toSerialize["createdBefore"] = o.CreatedBefore
	}
	if !IsNil(o.CurrentStep) {
		toSerialize["currentStep"] = o.CurrentStep
	}
	if o.ExcludeAppEntitlementIds != nil {
		toSerialize["excludeAppEntitlementIds"] = o.ExcludeAppEntitlementIds
	}
	if o.ExcludeIds != nil {
		toSerialize["excludeIds"] = o.ExcludeIds
	}
	if !IsNil(o.ExpandMask) {
		toSerialize["expandMask"] = o.ExpandMask
	}
	if !IsNil(o.IncludeDeleted) {
		toSerialize["includeDeleted"] = o.IncludeDeleted
	}
	if o.MyWorkUserIds != nil {
		toSerialize["myWorkUserIds"] = o.MyWorkUserIds
	}
	if o.OpenerIds != nil {
		toSerialize["openerIds"] = o.OpenerIds
	}
	if !IsNil(o.PageSize) {
		toSerialize["pageSize"] = o.PageSize
	}
	if !IsNil(o.PageToken) {
		toSerialize["pageToken"] = o.PageToken
	}
	if o.PreviouslyActedOnIds != nil {
		toSerialize["previouslyActedOnIds"] = o.PreviouslyActedOnIds
	}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	if o.Refs != nil {
		toSerialize["refs"] = o.Refs
	}
	if !IsNil(o.SortBy) {
		toSerialize["sortBy"] = o.SortBy
	}
	if o.SubjectIds != nil {
		toSerialize["subjectIds"] = o.SubjectIds
	}
	if o.TaskStates != nil {
		toSerialize["taskStates"] = o.TaskStates
	}
	if o.TaskTypes != nil {
		toSerialize["taskTypes"] = o.TaskTypes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *C1ApiTaskV1TaskSearchRequest) UnmarshalJSON(bytes []byte) (err error) {
	varC1ApiTaskV1TaskSearchRequest := _C1ApiTaskV1TaskSearchRequest{}

	if err = json.Unmarshal(bytes, &varC1ApiTaskV1TaskSearchRequest); err == nil {
		*o = C1ApiTaskV1TaskSearchRequest(varC1ApiTaskV1TaskSearchRequest)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "accessReviewIds")
		delete(additionalProperties, "accountOwnerIds")
		delete(additionalProperties, "actorId")
		delete(additionalProperties, "appEntitlementIds")
		delete(additionalProperties, "appResourceIds")
		delete(additionalProperties, "appResourceTypeIds")
		delete(additionalProperties, "appUserSubjectIds")
		delete(additionalProperties, "applicationIds")
		delete(additionalProperties, "assigneesInIds")
		delete(additionalProperties, "createdAfter")
		delete(additionalProperties, "createdBefore")
		delete(additionalProperties, "currentStep")
		delete(additionalProperties, "excludeAppEntitlementIds")
		delete(additionalProperties, "excludeIds")
		delete(additionalProperties, "expandMask")
		delete(additionalProperties, "includeDeleted")
		delete(additionalProperties, "myWorkUserIds")
		delete(additionalProperties, "openerIds")
		delete(additionalProperties, "pageSize")
		delete(additionalProperties, "pageToken")
		delete(additionalProperties, "previouslyActedOnIds")
		delete(additionalProperties, "query")
		delete(additionalProperties, "refs")
		delete(additionalProperties, "sortBy")
		delete(additionalProperties, "subjectIds")
		delete(additionalProperties, "taskStates")
		delete(additionalProperties, "taskTypes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableC1ApiTaskV1TaskSearchRequest struct {
	value *C1ApiTaskV1TaskSearchRequest
	isSet bool
}

func (v NullableC1ApiTaskV1TaskSearchRequest) Get() *C1ApiTaskV1TaskSearchRequest {
	return v.value
}

func (v *NullableC1ApiTaskV1TaskSearchRequest) Set(val *C1ApiTaskV1TaskSearchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableC1ApiTaskV1TaskSearchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableC1ApiTaskV1TaskSearchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableC1ApiTaskV1TaskSearchRequest(val *C1ApiTaskV1TaskSearchRequest) *NullableC1ApiTaskV1TaskSearchRequest {
	return &NullableC1ApiTaskV1TaskSearchRequest{value: val, isSet: true}
}

func (v NullableC1ApiTaskV1TaskSearchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableC1ApiTaskV1TaskSearchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


