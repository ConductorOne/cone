/*
ConductorOne API

The ConductorOne API is a HTTP API for managing ConductorOne resources.

API version: 0.1.0-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c1api

import (
	"encoding/json"
)

// checks if the C1ApiUserV1UserRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &C1ApiUserV1UserRef{}

// C1ApiUserV1UserRef The UserRef message.
type C1ApiUserV1UserRef struct {
	// The id field.
	Id *string `json:"id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _C1ApiUserV1UserRef C1ApiUserV1UserRef

// NewC1ApiUserV1UserRef instantiates a new C1ApiUserV1UserRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewC1ApiUserV1UserRef() *C1ApiUserV1UserRef {
	this := C1ApiUserV1UserRef{}
	return &this
}

// NewC1ApiUserV1UserRefWithDefaults instantiates a new C1ApiUserV1UserRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewC1ApiUserV1UserRefWithDefaults() *C1ApiUserV1UserRef {
	this := C1ApiUserV1UserRef{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *C1ApiUserV1UserRef) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *C1ApiUserV1UserRef) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *C1ApiUserV1UserRef) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *C1ApiUserV1UserRef) SetId(v string) {
	o.Id = &v
}

func (o C1ApiUserV1UserRef) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o C1ApiUserV1UserRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *C1ApiUserV1UserRef) UnmarshalJSON(bytes []byte) (err error) {
	varC1ApiUserV1UserRef := _C1ApiUserV1UserRef{}

	if err = json.Unmarshal(bytes, &varC1ApiUserV1UserRef); err == nil {
		*o = C1ApiUserV1UserRef(varC1ApiUserV1UserRef)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableC1ApiUserV1UserRef struct {
	value *C1ApiUserV1UserRef
	isSet bool
}

func (v NullableC1ApiUserV1UserRef) Get() *C1ApiUserV1UserRef {
	return v.value
}

func (v *NullableC1ApiUserV1UserRef) Set(val *C1ApiUserV1UserRef) {
	v.value = val
	v.isSet = true
}

func (v NullableC1ApiUserV1UserRef) IsSet() bool {
	return v.isSet
}

func (v *NullableC1ApiUserV1UserRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableC1ApiUserV1UserRef(val *C1ApiUserV1UserRef) *NullableC1ApiUserV1UserRef {
	return &NullableC1ApiUserV1UserRef{value: val, isSet: true}
}

func (v NullableC1ApiUserV1UserRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableC1ApiUserV1UserRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


