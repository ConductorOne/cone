// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"time"
)

// ConnectorInput - The Connector message.
type ConnectorInput struct {
	// The ConnectorStatus message.
	ConnectorStatus *ConnectorStatus `json:"status,omitempty"`
	// The OAuth2AuthorizedAs message.
	OAuth2AuthorizedAs *OAuth2AuthorizedAs `json:"oauthAuthorizedAs,omitempty"`
	// The appId field.
	AppID *string `json:"appId,omitempty"`
	// The catalogId field.
	CatalogID *string `json:"catalogId,omitempty"`
	// Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
	Config map[string]interface{} `json:"config,omitempty"`
	// The description field.
	Description *string `json:"description,omitempty"`
	// The displayName field.
	DisplayName *string `json:"displayName,omitempty"`
	// The downloadUrl field.
	DownloadURL *string `json:"downloadUrl,omitempty"`
	// The id field.
	ID *string `json:"id,omitempty"`
	// The userIds field.
	UserIds []string `json:"userIds,omitempty"`
}

func (o *ConnectorInput) GetConnectorStatus() *ConnectorStatus {
	if o == nil {
		return nil
	}
	return o.ConnectorStatus
}

func (o *ConnectorInput) GetOAuth2AuthorizedAs() *OAuth2AuthorizedAs {
	if o == nil {
		return nil
	}
	return o.OAuth2AuthorizedAs
}

func (o *ConnectorInput) GetAppID() *string {
	if o == nil {
		return nil
	}
	return o.AppID
}

func (o *ConnectorInput) GetCatalogID() *string {
	if o == nil {
		return nil
	}
	return o.CatalogID
}

func (o *ConnectorInput) GetConfig() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *ConnectorInput) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ConnectorInput) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *ConnectorInput) GetDownloadURL() *string {
	if o == nil {
		return nil
	}
	return o.DownloadURL
}

func (o *ConnectorInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ConnectorInput) GetUserIds() []string {
	if o == nil {
		return nil
	}
	return o.UserIds
}

// Connector - The Connector message.
type Connector struct {
	// The ConnectorStatus message.
	ConnectorStatus *ConnectorStatus `json:"status,omitempty"`
	// The OAuth2AuthorizedAs message.
	OAuth2AuthorizedAs *OAuth2AuthorizedAs `json:"oauthAuthorizedAs,omitempty"`
	// The appId field.
	AppID *string `json:"appId,omitempty"`
	// The catalogId field.
	CatalogID *string `json:"catalogId,omitempty"`
	// Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
	Config    map[string]interface{} `json:"config,omitempty"`
	CreatedAt *time.Time             `json:"createdAt,omitempty"`
	DeletedAt *time.Time             `json:"deletedAt,omitempty"`
	// The description field.
	Description *string `json:"description,omitempty"`
	// The displayName field.
	DisplayName *string `json:"displayName,omitempty"`
	// The downloadUrl field.
	DownloadURL *string `json:"downloadUrl,omitempty"`
	// The id field.
	ID        *string    `json:"id,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	// The userIds field.
	UserIds []string `json:"userIds,omitempty"`
}

func (o *Connector) GetConnectorStatus() *ConnectorStatus {
	if o == nil {
		return nil
	}
	return o.ConnectorStatus
}

func (o *Connector) GetOAuth2AuthorizedAs() *OAuth2AuthorizedAs {
	if o == nil {
		return nil
	}
	return o.OAuth2AuthorizedAs
}

func (o *Connector) GetAppID() *string {
	if o == nil {
		return nil
	}
	return o.AppID
}

func (o *Connector) GetCatalogID() *string {
	if o == nil {
		return nil
	}
	return o.CatalogID
}

func (o *Connector) GetConfig() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *Connector) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Connector) GetDeletedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *Connector) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *Connector) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *Connector) GetDownloadURL() *string {
	if o == nil {
		return nil
	}
	return o.DownloadURL
}

func (o *Connector) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Connector) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *Connector) GetUserIds() []string {
	if o == nil {
		return nil
	}
	return o.UserIds
}
